
ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800a2c0  0800a2c0  0001a2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e8  0800a7e8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7e8  0800a7e8  0001a7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7f0  0800a7f0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7f4  0800a7f4  0001a7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a7f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001274  200001e8  0800a9e0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000145c  0800a9e0  0002145c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b7b6  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000203f  00000000  00000000  0002ba11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002da50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000799  00000000  00000000  0002e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023684  00000000  00000000  0002ebd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4bd  00000000  00000000  0005225d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7906  00000000  00000000  0005f71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040a8  00000000  00000000  00137020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0013b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a2a8 	.word	0x0800a2a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800a2a8 	.word	0x0800a2a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	adc_valid = 1;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_ADC_ConvCpltCallback+0x54>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
	if(i < NUM_SAMPLES){
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_ADC_ConvCpltCallback+0x58>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d211      	bcs.n	800106e <HAL_ADC_ConvCpltCallback+0x3e>
		ADC_SAMPLES[i] = HAL_ADC_GetValue(&hadc1);
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_ADC_ConvCpltCallback+0x58>)
 800104c:	681c      	ldr	r4, [r3, #0]
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <HAL_ADC_ConvCpltCallback+0x60>)
 8001050:	f001 f9d7 	bl	8002402 <HAL_ADC_GetValue>
 8001054:	4603      	mov	r3, r0
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <HAL_ADC_ConvCpltCallback+0x64>)
 8001058:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		i++;
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_ADC_ConvCpltCallback+0x58>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a09      	ldr	r2, [pc, #36]	; (8001088 <HAL_ADC_ConvCpltCallback+0x58>)
 8001064:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_IT(&hadc1);
 8001066:	480a      	ldr	r0, [pc, #40]	; (8001090 <HAL_ADC_ConvCpltCallback+0x60>)
 8001068:	f000 ffa0 	bl	8001fac <HAL_ADC_Start_IT>
	}
	else{
		i = 0;	// reinitialize iterator
		HAL_ADC_Stop_IT(&hadc1);
	}
}
 800106c:	e005      	b.n	800107a <HAL_ADC_ConvCpltCallback+0x4a>
		i = 0;	// reinitialize iterator
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_ADC_ConvCpltCallback+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop_IT(&hadc1);
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <HAL_ADC_ConvCpltCallback+0x60>)
 8001076:	f001 f877 	bl	8002168 <HAL_ADC_Stop_IT>
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}
 8001082:	bf00      	nop
 8001084:	2000035c 	.word	0x2000035c
 8001088:	20000364 	.word	0x20000364
 800108c:	20000360 	.word	0x20000360
 8001090:	20000204 	.word	0x20000204
 8001094:	20000368 	.word	0x20000368

08001098 <MQ2_create>:

/* MQ2 Sensor Specific Functions */
void MQ2_create(MQ2 *sensor) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    sensor->LPGCurve[0] = 2.3;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <MQ2_create+0x58>)
 80010a4:	601a      	str	r2, [r3, #0]
    sensor->LPGCurve[1] = 0.21;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MQ2_create+0x5c>)
 80010aa:	605a      	str	r2, [r3, #4]
    sensor->LPGCurve[2] = -0.47;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <MQ2_create+0x60>)
 80010b0:	609a      	str	r2, [r3, #8]
    sensor->COCurve[0] = 2.3;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <MQ2_create+0x58>)
 80010b6:	60da      	str	r2, [r3, #12]
    sensor->COCurve[1] = 0.72;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <MQ2_create+0x64>)
 80010bc:	611a      	str	r2, [r3, #16]
    sensor->COCurve[2] = -0.34;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <MQ2_create+0x68>)
 80010c2:	615a      	str	r2, [r3, #20]
    sensor->SmokeCurve[0] = 2.3;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <MQ2_create+0x58>)
 80010c8:	619a      	str	r2, [r3, #24]
    sensor->SmokeCurve[1] = 0.53;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <MQ2_create+0x6c>)
 80010ce:	61da      	str	r2, [r3, #28]
    sensor->SmokeCurve[2] = -0.44;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <MQ2_create+0x70>)
 80010d4:	621a      	str	r2, [r3, #32]
    sensor->Ro = -1.0;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <MQ2_create+0x74>)
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
    sensor->lastReadTime = 0;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40133333 	.word	0x40133333
 80010f4:	3e570a3d 	.word	0x3e570a3d
 80010f8:	bef0a3d7 	.word	0xbef0a3d7
 80010fc:	3f3851ec 	.word	0x3f3851ec
 8001100:	beae147b 	.word	0xbeae147b
 8001104:	3f07ae14 	.word	0x3f07ae14
 8001108:	bee147ae 	.word	0xbee147ae
 800110c:	bf800000 	.word	0xbf800000

08001110 <MQ2_begin>:

void MQ2_begin(MQ2 *sensor) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    // Initialization code here
	sensor->Ro = MQ2_MQCalibration(sensor);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f9e9 	bl	80014f0 <MQ2_MQCalibration>
 800111e:	eef0 7a40 	vmov.f32	s15, s0
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	sprintf(txBuf, "Ro: %f kohm\r\n\r\n", sensor->Ro);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa2b 	bl	8000588 <__aeabi_f2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	490a      	ldr	r1, [pc, #40]	; (8001160 <MQ2_begin+0x50>)
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <MQ2_begin+0x54>)
 800113a:	f004 fae1 	bl	8005700 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)txBuf, strlen(txBuf));
 800113e:	4809      	ldr	r0, [pc, #36]	; (8001164 <MQ2_begin+0x54>)
 8001140:	f7ff f8b6 	bl	80002b0 <strlen>
 8001144:	4603      	mov	r3, r0
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	4906      	ldr	r1, [pc, #24]	; (8001164 <MQ2_begin+0x54>)
 800114c:	4806      	ldr	r0, [pc, #24]	; (8001168 <MQ2_begin+0x58>)
 800114e:	f002 fc9b 	bl	8003a88 <HAL_UART_Transmit_IT>
	HAL_Delay(50);
 8001152:	2032      	movs	r0, #50	; 0x32
 8001154:	f000 fec2 	bl	8001edc <HAL_Delay>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800a2c0 	.word	0x0800a2c0
 8001164:	20000294 	.word	0x20000294
 8001168:	2000024c 	.word	0x2000024c

0800116c <MQ2_checkCalibration>:
	sensor->values[0] = 0.0;
	sensor->values[1] = 0.0;
	sensor->values[2] = 0.0;
}

bool MQ2_checkCalibration(MQ2 *sensor) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	if (sensor->Ro < 0.0) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800117a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	d510      	bpl.n	80011a6 <MQ2_checkCalibration+0x3a>
		sprintf(txBuf, "%s ", "Device not calibrated, call MQ2_begin before reading any value.");
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <MQ2_checkCalibration+0x44>)
 8001186:	490b      	ldr	r1, [pc, #44]	; (80011b4 <MQ2_checkCalibration+0x48>)
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <MQ2_checkCalibration+0x4c>)
 800118a:	f004 fab9 	bl	8005700 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)txBuf, strlen(txBuf));
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <MQ2_checkCalibration+0x4c>)
 8001190:	f7ff f88e 	bl	80002b0 <strlen>
 8001194:	4603      	mov	r3, r0
 8001196:	b29b      	uxth	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	4907      	ldr	r1, [pc, #28]	; (80011b8 <MQ2_checkCalibration+0x4c>)
 800119c:	4807      	ldr	r0, [pc, #28]	; (80011bc <MQ2_checkCalibration+0x50>)
 800119e:	f002 fc73 	bl	8003a88 <HAL_UART_Transmit_IT>
		return false;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <MQ2_checkCalibration+0x3c>
	}
	return true;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	0800a2d0 	.word	0x0800a2d0
 80011b4:	0800a310 	.word	0x0800a310
 80011b8:	20000294 	.word	0x20000294
 80011bc:	2000024c 	.word	0x2000024c

080011c0 <MQ2_read>:

float* MQ2_read(MQ2 *sensor, bool print) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
    // Reading code here
	if (!MQ2_checkCalibration(sensor)) return NULL;
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ffcd 	bl	800116c <MQ2_checkCalibration>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f083 0301 	eor.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MQ2_read+0x22>
 80011de:	2300      	movs	r3, #0
 80011e0:	e086      	b.n	80012f0 <MQ2_read+0x130>

	sensor->values[0] = MQ2_MQGetPercentage(sensor->LPGCurve, sensor);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 fa12 	bl	8001610 <MQ2_MQGetPercentage>
 80011ec:	eef0 7a40 	vmov.f32	s15, s0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	sensor->values[1] = MQ2_MQGetPercentage(sensor->COCurve, sensor);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	330c      	adds	r3, #12
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fa07 	bl	8001610 <MQ2_MQGetPercentage>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	sensor->values[2] = MQ2_MQGetPercentage(sensor->SmokeCurve, sensor);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3318      	adds	r3, #24
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f9fc 	bl	8001610 <MQ2_MQGetPercentage>
 8001218:	eef0 7a40 	vmov.f32	s15, s0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	sensor->lastReadTime = HAL_GetTick();
 8001222:	f000 fe4f 	bl	8001ec4 <HAL_GetTick>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	635a      	str	r2, [r3, #52]	; 0x34

	if (print){
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d05b      	beq.n	80012ec <MQ2_read+0x12c>
		sprintf(txBuf, "%dms\r\n", sensor->lastReadTime);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001238:	461a      	mov	r2, r3
 800123a:	492f      	ldr	r1, [pc, #188]	; (80012f8 <MQ2_read+0x138>)
 800123c:	482f      	ldr	r0, [pc, #188]	; (80012fc <MQ2_read+0x13c>)
 800123e:	f004 fa5f 	bl	8005700 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)txBuf, strlen(txBuf));
 8001242:	482e      	ldr	r0, [pc, #184]	; (80012fc <MQ2_read+0x13c>)
 8001244:	f7ff f834 	bl	80002b0 <strlen>
 8001248:	4603      	mov	r3, r0
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	492b      	ldr	r1, [pc, #172]	; (80012fc <MQ2_read+0x13c>)
 8001250:	482b      	ldr	r0, [pc, #172]	; (8001300 <MQ2_read+0x140>)
 8001252:	f002 fc19 	bl	8003a88 <HAL_UART_Transmit_IT>
		HAL_Delay(50);
 8001256:	2032      	movs	r0, #50	; 0x32
 8001258:	f000 fe40 	bl	8001edc <HAL_Delay>

		sprintf(txBuf, "LPG: %f ppm\r\n", sensor->values[0]);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f991 	bl	8000588 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4926      	ldr	r1, [pc, #152]	; (8001304 <MQ2_read+0x144>)
 800126c:	4823      	ldr	r0, [pc, #140]	; (80012fc <MQ2_read+0x13c>)
 800126e:	f004 fa47 	bl	8005700 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)txBuf, strlen(txBuf));
 8001272:	4822      	ldr	r0, [pc, #136]	; (80012fc <MQ2_read+0x13c>)
 8001274:	f7ff f81c 	bl	80002b0 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	b29b      	uxth	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	491f      	ldr	r1, [pc, #124]	; (80012fc <MQ2_read+0x13c>)
 8001280:	481f      	ldr	r0, [pc, #124]	; (8001300 <MQ2_read+0x140>)
 8001282:	f002 fc01 	bl	8003a88 <HAL_UART_Transmit_IT>
		HAL_Delay(50);
 8001286:	2032      	movs	r0, #50	; 0x32
 8001288:	f000 fe28 	bl	8001edc <HAL_Delay>

		sprintf(txBuf, "CO: %f ppm \r\n", sensor->values[1]);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f979 	bl	8000588 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	491b      	ldr	r1, [pc, #108]	; (8001308 <MQ2_read+0x148>)
 800129c:	4817      	ldr	r0, [pc, #92]	; (80012fc <MQ2_read+0x13c>)
 800129e:	f004 fa2f 	bl	8005700 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)txBuf, strlen(txBuf));
 80012a2:	4816      	ldr	r0, [pc, #88]	; (80012fc <MQ2_read+0x13c>)
 80012a4:	f7ff f804 	bl	80002b0 <strlen>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	461a      	mov	r2, r3
 80012ae:	4913      	ldr	r1, [pc, #76]	; (80012fc <MQ2_read+0x13c>)
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MQ2_read+0x140>)
 80012b2:	f002 fbe9 	bl	8003a88 <HAL_UART_Transmit_IT>
		HAL_Delay(50);
 80012b6:	2032      	movs	r0, #50	; 0x32
 80012b8:	f000 fe10 	bl	8001edc <HAL_Delay>

		sprintf(txBuf, "SMOKE: %f ppm\r\n", sensor->values[2]);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f961 	bl	8000588 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4910      	ldr	r1, [pc, #64]	; (800130c <MQ2_read+0x14c>)
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <MQ2_read+0x13c>)
 80012ce:	f004 fa17 	bl	8005700 <siprintf>
		HAL_UART_Transmit_IT(&huart2, (uint8_t *)txBuf, strlen(txBuf));
 80012d2:	480a      	ldr	r0, [pc, #40]	; (80012fc <MQ2_read+0x13c>)
 80012d4:	f7fe ffec 	bl	80002b0 <strlen>
 80012d8:	4603      	mov	r3, r0
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	4907      	ldr	r1, [pc, #28]	; (80012fc <MQ2_read+0x13c>)
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <MQ2_read+0x140>)
 80012e2:	f002 fbd1 	bl	8003a88 <HAL_UART_Transmit_IT>
		HAL_Delay(50);
 80012e6:	2032      	movs	r0, #50	; 0x32
 80012e8:	f000 fdf8 	bl	8001edc <HAL_Delay>
	}

	return sensor->values;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3328      	adds	r3, #40	; 0x28
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	0800a314 	.word	0x0800a314
 80012fc:	20000294 	.word	0x20000294
 8001300:	2000024c 	.word	0x2000024c
 8001304:	0800a31c 	.word	0x0800a31c
 8001308:	0800a32c 	.word	0x0800a32c
 800130c:	0800a33c 	.word	0x0800a33c

08001310 <MQ2_readLPG>:

float MQ2_readLPG(MQ2 *sensor) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

	if (!MQ2_checkCalibration(sensor)) return 0.0;
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff27 	bl	800116c <MQ2_checkCalibration>
 800131e:	4603      	mov	r3, r0
 8001320:	f083 0301 	eor.w	r3, r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <MQ2_readLPG+0x20>
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	e020      	b.n	8001372 <MQ2_readLPG+0x62>

	if (HAL_GetTick() < (sensor->lastReadTime + READ_DELAY) && sensor->values[0] > 0)
 8001330:	f000 fdc8 	bl	8001ec4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800133e:	3310      	adds	r3, #16
 8001340:	429a      	cmp	r2, r3
 8001342:	d20a      	bcs.n	800135a <MQ2_readLPG+0x4a>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800134a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	dd02      	ble.n	800135a <MQ2_readLPG+0x4a>
		return sensor->values[0];
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	e00b      	b.n	8001372 <MQ2_readLPG+0x62>
	else
		return (sensor->values[0] = MQ2_MQGetPercentage(sensor->LPGCurve, sensor));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f956 	bl	8001610 <MQ2_MQGetPercentage>
 8001364:	eef0 7a40 	vmov.f32	s15, s0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <MQ2_readCO>:

float MQ2_readCO(MQ2 *sensor) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	if (!MQ2_checkCalibration(sensor)) return 0.0;
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff feef 	bl	800116c <MQ2_checkCalibration>
 800138e:	4603      	mov	r3, r0
 8001390:	f083 0301 	eor.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <MQ2_readCO+0x20>
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	e021      	b.n	80013e4 <MQ2_readCO+0x64>

	if (HAL_GetTick() < (sensor->lastReadTime + READ_DELAY) && sensor->values[1] > 0)
 80013a0:	f000 fd90 	bl	8001ec4 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80013ae:	3310      	adds	r3, #16
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d20a      	bcs.n	80013ca <MQ2_readCO+0x4a>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80013ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	dd02      	ble.n	80013ca <MQ2_readCO+0x4a>
		return sensor->values[1];
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	e00c      	b.n	80013e4 <MQ2_readCO+0x64>
	else
		return (sensor->values[1] = MQ2_MQGetPercentage(sensor->COCurve, sensor));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	330c      	adds	r3, #12
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f91d 	bl	8001610 <MQ2_MQGetPercentage>
 80013d6:	eef0 7a40 	vmov.f32	s15, s0
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <MQ2_readSmoke>:

float MQ2_readSmoke(MQ2 *sensor) {
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	if (!MQ2_checkCalibration(sensor)) return 0.0;
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff feb6 	bl	800116c <MQ2_checkCalibration>
 8001400:	4603      	mov	r3, r0
 8001402:	f083 0301 	eor.w	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <MQ2_readSmoke+0x20>
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e021      	b.n	8001456 <MQ2_readSmoke+0x64>

	if (HAL_GetTick() < (sensor->lastReadTime + READ_DELAY) && sensor->values[2] > 0)
 8001412:	f000 fd57 	bl	8001ec4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001420:	3310      	adds	r3, #16
 8001422:	429a      	cmp	r2, r3
 8001424:	d20a      	bcs.n	800143c <MQ2_readSmoke+0x4a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800142c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	dd02      	ble.n	800143c <MQ2_readSmoke+0x4a>
		return sensor->values[2];
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	e00c      	b.n	8001456 <MQ2_readSmoke+0x64>
	else
		return (sensor->values[2] = MQ2_MQGetPercentage(sensor->SmokeCurve, sensor));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3318      	adds	r3, #24
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f8e4 	bl	8001610 <MQ2_MQGetPercentage>
 8001448:	eef0 7a40 	vmov.f32	s15, s0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	0000      	movs	r0, r0
	...

08001468 <MQ2_MQResistanceCalculation>:

float MQ2_MQResistanceCalculation(int raw_adc) {
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    // MQResistanceCalculation code here
	float flt_adc = (float) raw_adc;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	edc7 7a03 	vstr	s15, [r7, #12]
	return RL_VALUE * (1023.0 - flt_adc) / flt_adc;
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff f882 	bl	8000588 <__aeabi_f2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	a116      	add	r1, pc, #88	; (adr r1, 80014e4 <MQ2_MQResistanceCalculation+0x7c>)
 800148a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800148e:	f7fe ff1b 	bl	80002c8 <__aeabi_dsub>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <MQ2_MQResistanceCalculation+0x78>)
 80014a0:	f7ff f8ca 	bl	8000638 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4614      	mov	r4, r2
 80014aa:	461d      	mov	r5, r3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f7ff f86b 	bl	8000588 <__aeabi_f2d>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4620      	mov	r0, r4
 80014b8:	4629      	mov	r1, r5
 80014ba:	f7ff f9e7 	bl	800088c <__aeabi_ddiv>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fbaf 	bl	8000c28 <__aeabi_d2f>
 80014ca:	4603      	mov	r3, r0
 80014cc:	ee07 3a90 	vmov	s15, r3
}
 80014d0:	eeb0 0a67 	vmov.f32	s0, s15
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bdb0      	pop	{r4, r5, r7, pc}
 80014da:	bf00      	nop
 80014dc:	f3af 8000 	nop.w
 80014e0:	40140000 	.word	0x40140000
 80014e4:	00000000 	.word	0x00000000
 80014e8:	408ff800 	.word	0x408ff800
 80014ec:	00000000 	.word	0x00000000

080014f0 <MQ2_MQCalibration>:

float MQ2_MQCalibration(MQ2 *sensor) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    // MQCalibration code here
	float val = 0.0;
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]

	// take multiple samples
	NUM_SAMPLES = CALIBARAION_SAMPLE_TIMES;
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MQ2_MQCalibration+0x98>)
 8001500:	220a      	movs	r2, #10
 8001502:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8001504:	4821      	ldr	r0, [pc, #132]	; (800158c <MQ2_MQCalibration+0x9c>)
 8001506:	f000 fd51 	bl	8001fac <HAL_ADC_Start_IT>
	HAL_Delay(CALIBRATION_SAMPLE_INTERVAL);
 800150a:	2032      	movs	r0, #50	; 0x32
 800150c:	f000 fce6 	bl	8001edc <HAL_Delay>

	for (int i = 0; i < CALIBARAION_SAMPLE_TIMES; i++) {
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	e011      	b.n	800153a <MQ2_MQCalibration+0x4a>
		val += MQ2_MQResistanceCalculation(ADC_SAMPLES[i]);
 8001516:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <MQ2_MQCalibration+0xa0>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ffa2 	bl	8001468 <MQ2_MQResistanceCalculation>
 8001524:	eeb0 7a40 	vmov.f32	s14, s0
 8001528:	edd7 7a03 	vldr	s15, [r7, #12]
 800152c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001530:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < CALIBARAION_SAMPLE_TIMES; i++) {
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3301      	adds	r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2b09      	cmp	r3, #9
 800153e:	ddea      	ble.n	8001516 <MQ2_MQCalibration+0x26>
	}

	//calculate the average value
	val = val / ((float) CALIBARAION_SAMPLE_TIMES);
 8001540:	ed97 7a03 	vldr	s14, [r7, #12]
 8001544:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154c:	edc7 7a03 	vstr	s15, [r7, #12]

	//divided by RO_CLEAN_AIR_FACTOR yields the Ro according to the chart in the datasheet
	val = val / RO_CLEAN_AIR_FACTOR;
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f7ff f819 	bl	8000588 <__aeabi_f2d>
 8001556:	a30a      	add	r3, pc, #40	; (adr r3, 8001580 <MQ2_MQCalibration+0x90>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7ff f996 	bl	800088c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fb5e 	bl	8000c28 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	60fb      	str	r3, [r7, #12]

	return val;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	ee07 3a90 	vmov	s15, r3
}
 8001576:	eeb0 0a67 	vmov.f32	s0, s15
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	c28f5c29 	.word	0xc28f5c29
 8001584:	4023a8f5 	.word	0x4023a8f5
 8001588:	20000360 	.word	0x20000360
 800158c:	20000204 	.word	0x20000204
 8001590:	20000368 	.word	0x20000368

08001594 <MQ2_MQRead>:

float MQ2_MQRead(MQ2 *sensor) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	float rs = 0.0;
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]

	// take multiple samples
	NUM_SAMPLES = READ_SAMPLE_TIMES;
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MQ2_MQRead+0x6c>)
 80015a4:	2205      	movs	r2, #5
 80015a6:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 80015a8:	4816      	ldr	r0, [pc, #88]	; (8001604 <MQ2_MQRead+0x70>)
 80015aa:	f000 fcff 	bl	8001fac <HAL_ADC_Start_IT>
	HAL_Delay(READ_SAMPLE_INTERVAL);
 80015ae:	2032      	movs	r0, #50	; 0x32
 80015b0:	f000 fc94 	bl	8001edc <HAL_Delay>

	for (int i = 0; i < READ_SAMPLE_TIMES; i++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	e011      	b.n	80015de <MQ2_MQRead+0x4a>
		rs += MQ2_MQResistanceCalculation(ADC_SAMPLES[i]);
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <MQ2_MQRead+0x74>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff50 	bl	8001468 <MQ2_MQResistanceCalculation>
 80015c8:	eeb0 7a40 	vmov.f32	s14, s0
 80015cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015d4:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < READ_SAMPLE_TIMES; i++) {
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3301      	adds	r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	ddea      	ble.n	80015ba <MQ2_MQRead+0x26>
	}

	return rs / ((float) READ_SAMPLE_TIMES);  // return the average
 80015e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80015ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015f0:	eef0 7a66 	vmov.f32	s15, s13
}
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000360 	.word	0x20000360
 8001604:	20000204 	.word	0x20000204
 8001608:	20000368 	.word	0x20000368
 800160c:	00000000 	.word	0x00000000

08001610 <MQ2_MQGetPercentage>:

float MQ2_MQGetPercentage(float *pcurve, MQ2 *sensor) {
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	float rs_ro_ratio = MQ2_MQRead(sensor) / sensor->Ro;
 800161a:	6838      	ldr	r0, [r7, #0]
 800161c:	f7ff ffba 	bl	8001594 <MQ2_MQRead>
 8001620:	eef0 6a40 	vmov.f32	s13, s0
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800162a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800162e:	edc7 7a03 	vstr	s15, [r7, #12]
	return pow(10.0, ((log(rs_ro_ratio) - pcurve[1]) / pcurve[2]) + pcurve[0]);
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7fe ffa8 	bl	8000588 <__aeabi_f2d>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	ec43 2b10 	vmov	d0, r2, r3
 8001640:	f007 fcfe 	bl	8009040 <log>
 8001644:	ec55 4b10 	vmov	r4, r5, d0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3304      	adds	r3, #4
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff9a 	bl	8000588 <__aeabi_f2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7fe fe34 	bl	80002c8 <__aeabi_dsub>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3308      	adds	r3, #8
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff8a 	bl	8000588 <__aeabi_f2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7ff f906 	bl	800088c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4614      	mov	r4, r2
 8001686:	461d      	mov	r5, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff7b 	bl	8000588 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4620      	mov	r0, r4
 8001698:	4629      	mov	r1, r5
 800169a:	f7fe fe17 	bl	80002cc <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	ec43 2b17 	vmov	d7, r2, r3
 80016a6:	eeb0 1a47 	vmov.f32	s2, s14
 80016aa:	eef0 1a67 	vmov.f32	s3, s15
 80016ae:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80016d8 <MQ2_MQGetPercentage+0xc8>
 80016b2:	f007 fd03 	bl	80090bc <pow>
 80016b6:	ec53 2b10 	vmov	r2, r3, d0
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fab3 	bl	8000c28 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	ee07 3a90 	vmov	s15, r3
}
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdb0      	pop	{r4, r5, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	f3af 8000 	nop.w
 80016d8:	00000000 	.word	0x00000000
 80016dc:	40240000 	.word	0x40240000

080016e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b092      	sub	sp, #72	; 0x48
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e6:	f000 fb87 	bl	8001df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ea:	f000 f877 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ee:	f000 f951 	bl	8001994 <MX_GPIO_Init>
  MX_ADC1_Init();
 80016f2:	f000 f8d3 	bl	800189c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80016f6:	f000 f923 	bl	8001940 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Setup
  MQ2 sensor;
  MQ2_create(&sensor);
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fccb 	bl	8001098 <MQ2_create>
  MQ2_begin(&sensor);
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fd03 	bl	8001110 <MQ2_begin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MQ2_read(&sensor, true); //set it false if you don't want to print the values to the Serial
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2101      	movs	r1, #1
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fd56 	bl	80011c0 <MQ2_read>

	  // lpg = values[0];
	  lpg = MQ2_readLPG(&sensor);
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fdfa 	bl	8001310 <MQ2_readLPG>
 800171c:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	  // co = values[1];
	  co = MQ2_readCO(&sensor);
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fe2c 	bl	8001380 <MQ2_readCO>
 8001728:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	  // smoke = values[2];
	  smoke = MQ2_readSmoke(&sensor);
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe5f 	bl	80013f2 <MQ2_readSmoke>
 8001734:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

	  sprintf(txBuf, "lpg: %f\r\n", lpg);
 8001738:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800173a:	f7fe ff25 	bl	8000588 <__aeabi_f2d>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4921      	ldr	r1, [pc, #132]	; (80017c8 <main+0xe8>)
 8001744:	4821      	ldr	r0, [pc, #132]	; (80017cc <main+0xec>)
 8001746:	f003 ffdb 	bl	8005700 <siprintf>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t *)txBuf, strlen(txBuf));
 800174a:	4820      	ldr	r0, [pc, #128]	; (80017cc <main+0xec>)
 800174c:	f7fe fdb0 	bl	80002b0 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	b29b      	uxth	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	491d      	ldr	r1, [pc, #116]	; (80017cc <main+0xec>)
 8001758:	481d      	ldr	r0, [pc, #116]	; (80017d0 <main+0xf0>)
 800175a:	f002 f995 	bl	8003a88 <HAL_UART_Transmit_IT>
	  HAL_Delay(50);
 800175e:	2032      	movs	r0, #50	; 0x32
 8001760:	f000 fbbc 	bl	8001edc <HAL_Delay>

	  sprintf(txBuf, "co: %f\r\n", co);
 8001764:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001766:	f7fe ff0f 	bl	8000588 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4919      	ldr	r1, [pc, #100]	; (80017d4 <main+0xf4>)
 8001770:	4816      	ldr	r0, [pc, #88]	; (80017cc <main+0xec>)
 8001772:	f003 ffc5 	bl	8005700 <siprintf>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t *)txBuf, strlen(txBuf));
 8001776:	4815      	ldr	r0, [pc, #84]	; (80017cc <main+0xec>)
 8001778:	f7fe fd9a 	bl	80002b0 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	b29b      	uxth	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	4912      	ldr	r1, [pc, #72]	; (80017cc <main+0xec>)
 8001784:	4812      	ldr	r0, [pc, #72]	; (80017d0 <main+0xf0>)
 8001786:	f002 f97f 	bl	8003a88 <HAL_UART_Transmit_IT>
	  HAL_Delay(50);
 800178a:	2032      	movs	r0, #50	; 0x32
 800178c:	f000 fba6 	bl	8001edc <HAL_Delay>

	  sprintf(txBuf, "smoke: %f\r\n\r\n", smoke);
 8001790:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001792:	f7fe fef9 	bl	8000588 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	490f      	ldr	r1, [pc, #60]	; (80017d8 <main+0xf8>)
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <main+0xec>)
 800179e:	f003 ffaf 	bl	8005700 <siprintf>
	  HAL_UART_Transmit_IT(&huart2, (uint8_t *)txBuf, strlen(txBuf));
 80017a2:	480a      	ldr	r0, [pc, #40]	; (80017cc <main+0xec>)
 80017a4:	f7fe fd84 	bl	80002b0 <strlen>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	4907      	ldr	r1, [pc, #28]	; (80017cc <main+0xec>)
 80017b0:	4807      	ldr	r0, [pc, #28]	; (80017d0 <main+0xf0>)
 80017b2:	f002 f969 	bl	8003a88 <HAL_UART_Transmit_IT>
	  HAL_Delay(50);
 80017b6:	2032      	movs	r0, #50	; 0x32
 80017b8:	f000 fb90 	bl	8001edc <HAL_Delay>

	  HAL_Delay(500);
 80017bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c0:	f000 fb8c 	bl	8001edc <HAL_Delay>
	  MQ2_read(&sensor, true); //set it false if you don't want to print the values to the Serial
 80017c4:	e7a1      	b.n	800170a <main+0x2a>
 80017c6:	bf00      	nop
 80017c8:	0800a34c 	.word	0x0800a34c
 80017cc:	20000294 	.word	0x20000294
 80017d0:	2000024c 	.word	0x2000024c
 80017d4:	0800a358 	.word	0x0800a358
 80017d8:	0800a364 	.word	0x0800a364

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	; 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	2234      	movs	r2, #52	; 0x34
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 ffeb 	bl	80057c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <SystemClock_Config+0xb8>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <SystemClock_Config+0xb8>)
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <SystemClock_Config+0xb8>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800181c:	2300      	movs	r3, #0
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <SystemClock_Config+0xbc>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <SystemClock_Config+0xbc>)
 800182a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <SystemClock_Config+0xbc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800183c:	2302      	movs	r3, #2
 800183e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001840:	2301      	movs	r3, #1
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001844:	2310      	movs	r3, #16
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4618      	mov	r0, r3
 8001852:	f001 fe2b 	bl	80034ac <HAL_RCC_OscConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800185c:	f000 f8c2 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001860:	230f      	movs	r3, #15
 8001862:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f001 fb52 	bl	8002f24 <HAL_RCC_ClockConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001886:	f000 f8ad 	bl	80019e4 <Error_Handler>
  }
}
 800188a:	bf00      	nop
 800188c:	3750      	adds	r7, #80	; 0x50
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000

0800189c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <MX_ADC1_Init+0x98>)
 80018b0:	4a21      	ldr	r2, [pc, #132]	; (8001938 <MX_ADC1_Init+0x9c>)
 80018b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <MX_ADC1_Init+0x98>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <MX_ADC1_Init+0x98>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <MX_ADC1_Init+0x98>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <MX_ADC1_Init+0x98>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <MX_ADC1_Init+0x98>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_ADC1_Init+0x98>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_ADC1_Init+0x98>)
 80018dc:	4a17      	ldr	r2, [pc, #92]	; (800193c <MX_ADC1_Init+0xa0>)
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_ADC1_Init+0x98>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <MX_ADC1_Init+0x98>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_ADC1_Init+0x98>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_ADC1_Init+0x98>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018fa:	480e      	ldr	r0, [pc, #56]	; (8001934 <MX_ADC1_Init+0x98>)
 80018fc:	f000 fb12 	bl	8001f24 <HAL_ADC_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001906:	f000 f86d 	bl	80019e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800190a:	2301      	movs	r3, #1
 800190c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800190e:	2301      	movs	r3, #1
 8001910:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001912:	2301      	movs	r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001916:	463b      	mov	r3, r7
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <MX_ADC1_Init+0x98>)
 800191c:	f000 fd92 	bl	8002444 <HAL_ADC_ConfigChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001926:	f000 f85d 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000204 	.word	0x20000204
 8001938:	40012000 	.word	0x40012000
 800193c:	0f000001 	.word	0x0f000001

08001940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_USART2_UART_Init+0x4c>)
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <MX_USART2_UART_Init+0x50>)
 8001948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <MX_USART2_UART_Init+0x4c>)
 800194c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_USART2_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_USART2_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_USART2_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_USART2_UART_Init+0x4c>)
 8001966:	220c      	movs	r2, #12
 8001968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_USART2_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_USART2_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_USART2_UART_Init+0x4c>)
 8001978:	f002 f836 	bl	80039e8 <HAL_UART_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001982:	f000 f82f 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000024c 	.word	0x2000024c
 8001990:	40004400 	.word	0x40004400

08001994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_GPIO_Init+0x4c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <MX_GPIO_Init+0x4c>)
 80019a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <MX_GPIO_Init+0x4c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_GPIO_Init+0x4c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <MX_GPIO_Init+0x4c>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_GPIO_Init+0x4c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	e7fe      	b.n	80019ec <Error_Handler+0x8>
	...

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_MspInit+0x4c>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <HAL_MspInit+0x4c>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_MspInit+0x4c>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_MspInit+0x4c>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_MspInit+0x4c>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_MspInit+0x4c>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800

08001a40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <HAL_ADC_MspInit+0x8c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d12f      	bne.n	8001ac2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <HAL_ADC_MspInit+0x90>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <HAL_ADC_MspInit+0x90>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <HAL_ADC_MspInit+0x90>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_ADC_MspInit+0x90>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_ADC_MspInit+0x90>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_ADC_MspInit+0x90>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <HAL_ADC_MspInit+0x94>)
 8001aae:	f001 f8a5 	bl	8002bfc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2105      	movs	r1, #5
 8001ab6:	2012      	movs	r0, #18
 8001ab8:	f000 ffd7 	bl	8002a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001abc:	2012      	movs	r0, #18
 8001abe:	f000 fff0 	bl	8002aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40012000 	.word	0x40012000
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <HAL_UART_MspInit+0x94>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d133      	bne.n	8001b62 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_UART_MspInit+0x98>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_UART_MspInit+0x98>)
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_UART_MspInit+0x98>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_UART_MspInit+0x98>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <HAL_UART_MspInit+0x98>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_UART_MspInit+0x98>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b32:	230c      	movs	r3, #12
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b42:	2307      	movs	r3, #7
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4809      	ldr	r0, [pc, #36]	; (8001b74 <HAL_UART_MspInit+0x9c>)
 8001b4e:	f001 f855 	bl	8002bfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 4, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2104      	movs	r1, #4
 8001b56:	2026      	movs	r0, #38	; 0x26
 8001b58:	f000 ff87 	bl	8002a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b5c:	2026      	movs	r0, #38	; 0x26
 8001b5e:	f000 ffa0 	bl	8002aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	; 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40004400 	.word	0x40004400
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b7c:	e7fe      	b.n	8001b7c <NMI_Handler+0x4>

08001b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc4:	f000 f96a 	bl	8001e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <ADC_IRQHandler+0x10>)
 8001bd2:	f000 fb06 	bl	80021e2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000204 	.word	0x20000204

08001be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <USART2_IRQHandler+0x10>)
 8001be6:	f001 ff85 	bl	8003af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000024c 	.word	0x2000024c

08001bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return 1;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_kill>:

int _kill(int pid, int sig)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c0e:	f003 fe2d 	bl	800586c <__errno>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2216      	movs	r2, #22
 8001c16:	601a      	str	r2, [r3, #0]
  return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_exit>:

void _exit (int status)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ffe7 	bl	8001c04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c36:	e7fe      	b.n	8001c36 <_exit+0x12>

08001c38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	e00a      	b.n	8001c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c4a:	f3af 8000 	nop.w
 8001c4e:	4601      	mov	r1, r0
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60ba      	str	r2, [r7, #8]
 8001c56:	b2ca      	uxtb	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbf0      	blt.n	8001c4a <_read+0x12>
  }

  return len;
 8001c68:	687b      	ldr	r3, [r7, #4]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e009      	b.n	8001c98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dbf1      	blt.n	8001c84 <_write+0x12>
  }
  return len;
 8001ca0:	687b      	ldr	r3, [r7, #4]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_close>:

int _close(int file)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_isatty>:

int _isatty(int file)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f003 fd92 	bl	800586c <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20020000 	.word	0x20020000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	20001308 	.word	0x20001308
 8001d7c:	20001460 	.word	0x20001460

08001d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ddc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001da8:	f7ff ffea 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dae:	490d      	ldr	r1, [pc, #52]	; (8001de4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db0:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc4:	4c0a      	ldr	r4, [pc, #40]	; (8001df0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f003 fd51 	bl	8005878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd6:	f7ff fc83 	bl	80016e0 <main>
  bx  lr    
 8001dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001de8:	0800a7f8 	.word	0x0800a7f8
  ldr r2, =_sbss
 8001dec:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001df0:	2000145c 	.word	0x2000145c

08001df4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <CAN1_RX0_IRQHandler>
	...

08001df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <HAL_Init+0x40>)
 8001e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <HAL_Init+0x40>)
 8001e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <HAL_Init+0x40>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f000 fe17 	bl	8002a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e26:	200f      	movs	r0, #15
 8001e28:	f000 f808 	bl	8001e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2c:	f7ff fde0 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_InitTick+0x54>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_InitTick+0x58>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fe2f 	bl	8002abe <HAL_SYSTICK_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00e      	b.n	8001e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d80a      	bhi.n	8001e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 fdf7 	bl	8002a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e7c:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <HAL_InitTick+0x5c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_IncTick+0x20>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_IncTick+0x24>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_IncTick+0x24>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000008 	.word	0x20000008
 8001ec0:	2000130c 	.word	0x2000130c

08001ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_GetTick+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	2000130c 	.word	0x2000130c

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff ffee 	bl	8001ec4 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d005      	beq.n	8001f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_Delay+0x44>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f02:	bf00      	nop
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d8f7      	bhi.n	8001f04 <HAL_Delay+0x28>
  {
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e033      	b.n	8001fa2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fd7c 	bl	8001a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d118      	bne.n	8001f94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f6a:	f023 0302 	bic.w	r3, r3, #2
 8001f6e:	f043 0202 	orr.w	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fb96 	bl	80026a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
 8001f92:	e001      	b.n	8001f98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_Start_IT+0x1a>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e0bd      	b.n	8002142 <HAL_ADC_Start_IT+0x196>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d018      	beq.n	800200e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fec:	4b58      	ldr	r3, [pc, #352]	; (8002150 <HAL_ADC_Start_IT+0x1a4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	; (8002154 <HAL_ADC_Start_IT+0x1a8>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0c9a      	lsrs	r2, r3, #18
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002000:	e002      	b.n	8002008 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3b01      	subs	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f9      	bne.n	8002002 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	f040 8085 	bne.w	8002128 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002048:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205c:	d106      	bne.n	800206c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f023 0206 	bic.w	r2, r3, #6
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
 800206a:	e002      	b.n	8002072 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800207a:	4b37      	ldr	r3, [pc, #220]	; (8002158 <HAL_ADC_Start_IT+0x1ac>)
 800207c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002086:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002096:	f043 0320 	orr.w	r3, r3, #32
 800209a:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d12a      	bne.n	80020fe <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2b      	ldr	r2, [pc, #172]	; (800215c <HAL_ADC_Start_IT+0x1b0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d015      	beq.n	80020de <HAL_ADC_Start_IT+0x132>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <HAL_ADC_Start_IT+0x1b4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d105      	bne.n	80020c8 <HAL_ADC_Start_IT+0x11c>
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_ADC_Start_IT+0x1ac>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a25      	ldr	r2, [pc, #148]	; (8002164 <HAL_ADC_Start_IT+0x1b8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d136      	bne.n	8002140 <HAL_ADC_Start_IT+0x194>
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <HAL_ADC_Start_IT+0x1ac>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d130      	bne.n	8002140 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d129      	bne.n	8002140 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	e020      	b.n	8002140 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a16      	ldr	r2, [pc, #88]	; (800215c <HAL_ADC_Start_IT+0x1b0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d11b      	bne.n	8002140 <HAL_ADC_Start_IT+0x194>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d114      	bne.n	8002140 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	e00b      	b.n	8002140 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f043 0210 	orr.w	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000
 8002154:	431bde83 	.word	0x431bde83
 8002158:	40012300 	.word	0x40012300
 800215c:	40012000 	.word	0x40012000
 8002160:	40012100 	.word	0x40012100
 8002164:	40012200 	.word	0x40012200

08002168 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_ADC_Stop_IT+0x16>
 800217a:	2302      	movs	r3, #2
 800217c:	e02b      	b.n	80021d6 <HAL_ADC_Stop_IT+0x6e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d113      	bne.n	80021cc <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021b2:	f023 0320 	bic.w	r3, r3, #32
 80021b6:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	f043 0201 	orr.w	r2, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d049      	beq.n	80022ac <HAL_ADC_IRQHandler+0xca>
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d046      	beq.n	80022ac <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d12b      	bne.n	800229c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	d127      	bne.n	800229c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002264:	2b00      	cmp	r3, #0
 8002266:	d119      	bne.n	800229c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0220 	bic.w	r2, r2, #32
 8002276:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7fe fec7 	bl	8001030 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f06f 0212 	mvn.w	r2, #18
 80022aa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d057      	beq.n	8002372 <HAL_ADC_IRQHandler+0x190>
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d054      	beq.n	8002372 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d139      	bne.n	8002362 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002306:	2b00      	cmp	r3, #0
 8002308:	d12b      	bne.n	8002362 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002314:	2b00      	cmp	r3, #0
 8002316:	d124      	bne.n	8002362 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11d      	bne.n	8002362 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800232a:	2b00      	cmp	r3, #0
 800232c:	d119      	bne.n	8002362 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800233c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f043 0201 	orr.w	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fa9c 	bl	80028a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 020c 	mvn.w	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002380:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d017      	beq.n	80023b8 <HAL_ADC_IRQHandler+0x1d6>
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d014      	beq.n	80023b8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d10d      	bne.n	80023b8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f837 	bl	800241c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f06f 0201 	mvn.w	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023c6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d015      	beq.n	80023fa <HAL_ADC_IRQHandler+0x218>
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d012      	beq.n	80023fa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	f043 0202 	orr.w	r2, r3, #2
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0220 	mvn.w	r2, #32
 80023e8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f820 	bl	8002430 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0220 	mvn.w	r2, #32
 80023f8:	601a      	str	r2, [r3, #0]
  }
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x1c>
 800245c:	2302      	movs	r3, #2
 800245e:	e113      	b.n	8002688 <HAL_ADC_ConfigChannel+0x244>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b09      	cmp	r3, #9
 800246e:	d925      	bls.n	80024bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68d9      	ldr	r1, [r3, #12]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	4613      	mov	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	3b1e      	subs	r3, #30
 8002486:	2207      	movs	r2, #7
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43da      	mvns	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	400a      	ands	r2, r1
 8002494:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68d9      	ldr	r1, [r3, #12]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	4603      	mov	r3, r0
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4403      	add	r3, r0
 80024ae:	3b1e      	subs	r3, #30
 80024b0:	409a      	lsls	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	e022      	b.n	8002502 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6919      	ldr	r1, [r3, #16]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	2207      	movs	r2, #7
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	400a      	ands	r2, r1
 80024de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6919      	ldr	r1, [r3, #16]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	4618      	mov	r0, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4403      	add	r3, r0
 80024f8:	409a      	lsls	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b06      	cmp	r3, #6
 8002508:	d824      	bhi.n	8002554 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	3b05      	subs	r3, #5
 800251c:	221f      	movs	r2, #31
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	400a      	ands	r2, r1
 800252a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	4618      	mov	r0, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	3b05      	subs	r3, #5
 8002546:	fa00 f203 	lsl.w	r2, r0, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	635a      	str	r2, [r3, #52]	; 0x34
 8002552:	e04c      	b.n	80025ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b0c      	cmp	r3, #12
 800255a:	d824      	bhi.n	80025a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	3b23      	subs	r3, #35	; 0x23
 800256e:	221f      	movs	r2, #31
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43da      	mvns	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	400a      	ands	r2, r1
 800257c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	4618      	mov	r0, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	3b23      	subs	r3, #35	; 0x23
 8002598:	fa00 f203 	lsl.w	r2, r0, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
 80025a4:	e023      	b.n	80025ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b41      	subs	r3, #65	; 0x41
 80025b8:	221f      	movs	r2, #31
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	400a      	ands	r2, r1
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3b41      	subs	r3, #65	; 0x41
 80025e2:	fa00 f203 	lsl.w	r2, r0, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ee:	4b29      	ldr	r3, [pc, #164]	; (8002694 <HAL_ADC_ConfigChannel+0x250>)
 80025f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a28      	ldr	r2, [pc, #160]	; (8002698 <HAL_ADC_ConfigChannel+0x254>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d10f      	bne.n	800261c <HAL_ADC_ConfigChannel+0x1d8>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b12      	cmp	r3, #18
 8002602:	d10b      	bne.n	800261c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_ADC_ConfigChannel+0x254>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d12b      	bne.n	800267e <HAL_ADC_ConfigChannel+0x23a>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a1c      	ldr	r2, [pc, #112]	; (800269c <HAL_ADC_ConfigChannel+0x258>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <HAL_ADC_ConfigChannel+0x1f4>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b11      	cmp	r3, #17
 8002636:	d122      	bne.n	800267e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <HAL_ADC_ConfigChannel+0x258>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d111      	bne.n	800267e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_ADC_ConfigChannel+0x25c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a11      	ldr	r2, [pc, #68]	; (80026a4 <HAL_ADC_ConfigChannel+0x260>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	0c9a      	lsrs	r2, r3, #18
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002670:	e002      	b.n	8002678 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3b01      	subs	r3, #1
 8002676:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f9      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40012300 	.word	0x40012300
 8002698:	40012000 	.word	0x40012000
 800269c:	10000012 	.word	0x10000012
 80026a0:	20000000 	.word	0x20000000
 80026a4:	431bde83 	.word	0x431bde83

080026a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b0:	4b79      	ldr	r3, [pc, #484]	; (8002898 <ADC_Init+0x1f0>)
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	021a      	lsls	r2, r3, #8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002700:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002722:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6899      	ldr	r1, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	4a58      	ldr	r2, [pc, #352]	; (800289c <ADC_Init+0x1f4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d022      	beq.n	8002786 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800274e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6899      	ldr	r1, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6899      	ldr	r1, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	e00f      	b.n	80027a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002794:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0202 	bic.w	r2, r2, #2
 80027b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6899      	ldr	r1, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7e1b      	ldrb	r3, [r3, #24]
 80027c0:	005a      	lsls	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01b      	beq.n	800280c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	3b01      	subs	r3, #1
 8002800:	035a      	lsls	r2, r3, #13
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	e007      	b.n	800281c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800281a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	3b01      	subs	r3, #1
 8002838:	051a      	lsls	r2, r3, #20
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800285e:	025a      	lsls	r2, r3, #9
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002876:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	029a      	lsls	r2, r3, #10
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	609a      	str	r2, [r3, #8]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40012300 	.word	0x40012300
 800289c:	0f000001 	.word	0x0f000001

080028a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	2b00      	cmp	r3, #0
 8002928:	db0b      	blt.n	8002942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4907      	ldr	r1, [pc, #28]	; (8002950 <__NVIC_EnableIRQ+0x38>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2001      	movs	r0, #1
 800293a:	fa00 f202 	lsl.w	r2, r0, r2
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000e100 	.word	0xe000e100

08002954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	6039      	str	r1, [r7, #0]
 800295e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	2b00      	cmp	r3, #0
 8002966:	db0a      	blt.n	800297e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	490c      	ldr	r1, [pc, #48]	; (80029a0 <__NVIC_SetPriority+0x4c>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	0112      	lsls	r2, r2, #4
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	440b      	add	r3, r1
 8002978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800297c:	e00a      	b.n	8002994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4908      	ldr	r1, [pc, #32]	; (80029a4 <__NVIC_SetPriority+0x50>)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	3b04      	subs	r3, #4
 800298c:	0112      	lsls	r2, r2, #4
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	440b      	add	r3, r1
 8002992:	761a      	strb	r2, [r3, #24]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000e100 	.word	0xe000e100
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f1c3 0307 	rsb	r3, r3, #7
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	bf28      	it	cs
 80029c6:	2304      	movcs	r3, #4
 80029c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d902      	bls.n	80029d8 <NVIC_EncodePriority+0x30>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3b03      	subs	r3, #3
 80029d6:	e000      	b.n	80029da <NVIC_EncodePriority+0x32>
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	401a      	ands	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	43d9      	mvns	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	4313      	orrs	r3, r2
         );
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3724      	adds	r7, #36	; 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a20:	d301      	bcc.n	8002a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00f      	b.n	8002a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <SysTick_Config+0x40>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2e:	210f      	movs	r1, #15
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	f7ff ff8e 	bl	8002954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <SysTick_Config+0x40>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <SysTick_Config+0x40>)
 8002a40:	2207      	movs	r2, #7
 8002a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	e000e010 	.word	0xe000e010

08002a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ff29 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a7c:	f7ff ff3e 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	6978      	ldr	r0, [r7, #20]
 8002a88:	f7ff ff8e 	bl	80029a8 <NVIC_EncodePriority>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff5d 	bl	8002954 <__NVIC_SetPriority>
}
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff31 	bl	8002918 <__NVIC_EnableIRQ>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffa2 	bl	8002a10 <SysTick_Config>
 8002acc:	4603      	mov	r3, r0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7ff f9ee 	bl	8001ec4 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d008      	beq.n	8002b08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2280      	movs	r2, #128	; 0x80
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e052      	b.n	8002bae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0216 	bic.w	r2, r2, #22
 8002b16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d103      	bne.n	8002b38 <HAL_DMA_Abort+0x62>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0208 	bic.w	r2, r2, #8
 8002b46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b58:	e013      	b.n	8002b82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b5a:	f7ff f9b3 	bl	8001ec4 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d90c      	bls.n	8002b82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2203      	movs	r2, #3
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e015      	b.n	8002bae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e4      	bne.n	8002b5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	223f      	movs	r2, #63	; 0x3f
 8002b96:	409a      	lsls	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e00c      	b.n	8002bee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2205      	movs	r2, #5
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	; 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	e165      	b.n	8002ee4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	f040 8154 	bne.w	8002ede <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d005      	beq.n	8002c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d130      	bne.n	8002cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 0201 	and.w	r2, r3, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d017      	beq.n	8002cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d123      	bne.n	8002d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	08da      	lsrs	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3208      	adds	r2, #8
 8002d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	08da      	lsrs	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3208      	adds	r2, #8
 8002d3a:	69b9      	ldr	r1, [r7, #24]
 8002d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80ae 	beq.w	8002ede <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	4b5d      	ldr	r3, [pc, #372]	; (8002efc <HAL_GPIO_Init+0x300>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a5c      	ldr	r2, [pc, #368]	; (8002efc <HAL_GPIO_Init+0x300>)
 8002d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b5a      	ldr	r3, [pc, #360]	; (8002efc <HAL_GPIO_Init+0x300>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d9e:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	3302      	adds	r3, #2
 8002da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	220f      	movs	r2, #15
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4f      	ldr	r2, [pc, #316]	; (8002f04 <HAL_GPIO_Init+0x308>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d025      	beq.n	8002e16 <HAL_GPIO_Init+0x21a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4e      	ldr	r2, [pc, #312]	; (8002f08 <HAL_GPIO_Init+0x30c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01f      	beq.n	8002e12 <HAL_GPIO_Init+0x216>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4d      	ldr	r2, [pc, #308]	; (8002f0c <HAL_GPIO_Init+0x310>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d019      	beq.n	8002e0e <HAL_GPIO_Init+0x212>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4c      	ldr	r2, [pc, #304]	; (8002f10 <HAL_GPIO_Init+0x314>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_GPIO_Init+0x20e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4b      	ldr	r2, [pc, #300]	; (8002f14 <HAL_GPIO_Init+0x318>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00d      	beq.n	8002e06 <HAL_GPIO_Init+0x20a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4a      	ldr	r2, [pc, #296]	; (8002f18 <HAL_GPIO_Init+0x31c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <HAL_GPIO_Init+0x206>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a49      	ldr	r2, [pc, #292]	; (8002f1c <HAL_GPIO_Init+0x320>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_GPIO_Init+0x202>
 8002dfa:	2306      	movs	r3, #6
 8002dfc:	e00c      	b.n	8002e18 <HAL_GPIO_Init+0x21c>
 8002dfe:	2307      	movs	r3, #7
 8002e00:	e00a      	b.n	8002e18 <HAL_GPIO_Init+0x21c>
 8002e02:	2305      	movs	r3, #5
 8002e04:	e008      	b.n	8002e18 <HAL_GPIO_Init+0x21c>
 8002e06:	2304      	movs	r3, #4
 8002e08:	e006      	b.n	8002e18 <HAL_GPIO_Init+0x21c>
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e004      	b.n	8002e18 <HAL_GPIO_Init+0x21c>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e002      	b.n	8002e18 <HAL_GPIO_Init+0x21c>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_GPIO_Init+0x21c>
 8002e16:	2300      	movs	r3, #0
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	f002 0203 	and.w	r2, r2, #3
 8002e1e:	0092      	lsls	r2, r2, #2
 8002e20:	4093      	lsls	r3, r2
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e28:	4935      	ldr	r1, [pc, #212]	; (8002f00 <HAL_GPIO_Init+0x304>)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	089b      	lsrs	r3, r3, #2
 8002e2e:	3302      	adds	r3, #2
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <HAL_GPIO_Init+0x324>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e5a:	4a31      	ldr	r2, [pc, #196]	; (8002f20 <HAL_GPIO_Init+0x324>)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e60:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <HAL_GPIO_Init+0x324>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e84:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_GPIO_Init+0x324>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e8a:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_GPIO_Init+0x324>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eae:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <HAL_GPIO_Init+0x324>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <HAL_GPIO_Init+0x324>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed8:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <HAL_GPIO_Init+0x324>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b0f      	cmp	r3, #15
 8002ee8:	f67f ae96 	bls.w	8002c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40013800 	.word	0x40013800
 8002f04:	40020000 	.word	0x40020000
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	40020c00 	.word	0x40020c00
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40021400 	.word	0x40021400
 8002f1c:	40021800 	.word	0x40021800
 8002f20:	40013c00 	.word	0x40013c00

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0cc      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d90c      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b65      	ldr	r3, [pc, #404]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b59      	ldr	r3, [pc, #356]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	494d      	ldr	r1, [pc, #308]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d044      	beq.n	8003044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d119      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e067      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003002:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f023 0203 	bic.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4934      	ldr	r1, [pc, #208]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003014:	f7fe ff56 	bl	8001ec4 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7fe ff52 	bl	8001ec4 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e04f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 020c 	and.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1eb      	bne.n	800301c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d20c      	bcs.n	800306c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e032      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4916      	ldr	r1, [pc, #88]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	490e      	ldr	r1, [pc, #56]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030aa:	f000 f855 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490a      	ldr	r1, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe feb6 	bl	8001e3c <HAL_InitTick>

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023c00 	.word	0x40023c00
 80030e0:	40023800 	.word	0x40023800
 80030e4:	0800a374 	.word	0x0800a374
 80030e8:	20000000 	.word	0x20000000
 80030ec:	20000004 	.word	0x20000004

080030f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000000 	.word	0x20000000

08003108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800310c:	f7ff fff0 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0a9b      	lsrs	r3, r3, #10
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4903      	ldr	r1, [pc, #12]	; (800312c <HAL_RCC_GetPCLK1Freq+0x24>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	0800a384 	.word	0x0800a384

08003130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003134:	f7ff ffdc 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0b5b      	lsrs	r3, r3, #13
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4903      	ldr	r1, [pc, #12]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	0800a384 	.word	0x0800a384

08003158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800315c:	b0a6      	sub	sp, #152	; 0x98
 800315e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800317e:	4bc8      	ldr	r3, [pc, #800]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b0c      	cmp	r3, #12
 8003188:	f200 817e 	bhi.w	8003488 <HAL_RCC_GetSysClockFreq+0x330>
 800318c:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <HAL_RCC_GetSysClockFreq+0x3c>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	080031c9 	.word	0x080031c9
 8003198:	08003489 	.word	0x08003489
 800319c:	08003489 	.word	0x08003489
 80031a0:	08003489 	.word	0x08003489
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	08003489 	.word	0x08003489
 80031ac:	08003489 	.word	0x08003489
 80031b0:	08003489 	.word	0x08003489
 80031b4:	080031d9 	.word	0x080031d9
 80031b8:	08003489 	.word	0x08003489
 80031bc:	08003489 	.word	0x08003489
 80031c0:	08003489 	.word	0x08003489
 80031c4:	08003343 	.word	0x08003343
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4bb6      	ldr	r3, [pc, #728]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80031ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80031ce:	e15f      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031d0:	4bb5      	ldr	r3, [pc, #724]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x350>)
 80031d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80031d6:	e15b      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d8:	4bb1      	ldr	r3, [pc, #708]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e4:	4bae      	ldr	r3, [pc, #696]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d031      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f0:	4bab      	ldr	r3, [pc, #684]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	2200      	movs	r2, #0
 80031f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80031fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003202:	663b      	str	r3, [r7, #96]	; 0x60
 8003204:	2300      	movs	r3, #0
 8003206:	667b      	str	r3, [r7, #100]	; 0x64
 8003208:	4ba7      	ldr	r3, [pc, #668]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800320a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800320e:	462a      	mov	r2, r5
 8003210:	fb03 f202 	mul.w	r2, r3, r2
 8003214:	2300      	movs	r3, #0
 8003216:	4621      	mov	r1, r4
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	4aa2      	ldr	r2, [pc, #648]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003220:	4621      	mov	r1, r4
 8003222:	fba1 1202 	umull	r1, r2, r1, r2
 8003226:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003228:	460a      	mov	r2, r1
 800322a:	67ba      	str	r2, [r7, #120]	; 0x78
 800322c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800322e:	4413      	add	r3, r2
 8003230:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003236:	2200      	movs	r2, #0
 8003238:	65bb      	str	r3, [r7, #88]	; 0x58
 800323a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800323c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003240:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003244:	f7fd fd40 	bl	8000cc8 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003252:	e064      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003254:	4b92      	ldr	r3, [pc, #584]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	099b      	lsrs	r3, r3, #6
 800325a:	2200      	movs	r2, #0
 800325c:	653b      	str	r3, [r7, #80]	; 0x50
 800325e:	657a      	str	r2, [r7, #84]	; 0x54
 8003260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48
 8003268:	2300      	movs	r3, #0
 800326a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800326c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003270:	4622      	mov	r2, r4
 8003272:	462b      	mov	r3, r5
 8003274:	f04f 0000 	mov.w	r0, #0
 8003278:	f04f 0100 	mov.w	r1, #0
 800327c:	0159      	lsls	r1, r3, #5
 800327e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003282:	0150      	lsls	r0, r2, #5
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4621      	mov	r1, r4
 800328a:	1a51      	subs	r1, r2, r1
 800328c:	6139      	str	r1, [r7, #16]
 800328e:	4629      	mov	r1, r5
 8003290:	eb63 0301 	sbc.w	r3, r3, r1
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a2:	4659      	mov	r1, fp
 80032a4:	018b      	lsls	r3, r1, #6
 80032a6:	4651      	mov	r1, sl
 80032a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ac:	4651      	mov	r1, sl
 80032ae:	018a      	lsls	r2, r1, #6
 80032b0:	4651      	mov	r1, sl
 80032b2:	ebb2 0801 	subs.w	r8, r2, r1
 80032b6:	4659      	mov	r1, fp
 80032b8:	eb63 0901 	sbc.w	r9, r3, r1
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032d0:	4690      	mov	r8, r2
 80032d2:	4699      	mov	r9, r3
 80032d4:	4623      	mov	r3, r4
 80032d6:	eb18 0303 	adds.w	r3, r8, r3
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	462b      	mov	r3, r5
 80032de:	eb49 0303 	adc.w	r3, r9, r3
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032f0:	4629      	mov	r1, r5
 80032f2:	028b      	lsls	r3, r1, #10
 80032f4:	4621      	mov	r1, r4
 80032f6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032fa:	4621      	mov	r1, r4
 80032fc:	028a      	lsls	r2, r1, #10
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003306:	2200      	movs	r2, #0
 8003308:	643b      	str	r3, [r7, #64]	; 0x40
 800330a:	647a      	str	r2, [r7, #68]	; 0x44
 800330c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003310:	f7fd fcda 	bl	8000cc8 <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4613      	mov	r3, r2
 800331a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800331e:	4b60      	ldr	r3, [pc, #384]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	0c1b      	lsrs	r3, r3, #16
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	3301      	adds	r3, #1
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003330:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003340:	e0a6      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003342:	4b57      	ldr	r3, [pc, #348]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800334a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334e:	4b54      	ldr	r3, [pc, #336]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d02a      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335a:	4b51      	ldr	r3, [pc, #324]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	2200      	movs	r2, #0
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
 8003364:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003368:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800336c:	2100      	movs	r1, #0
 800336e:	4b4e      	ldr	r3, [pc, #312]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8003370:	fb03 f201 	mul.w	r2, r3, r1
 8003374:	2300      	movs	r3, #0
 8003376:	fb00 f303 	mul.w	r3, r0, r3
 800337a:	4413      	add	r3, r2
 800337c:	4a4a      	ldr	r2, [pc, #296]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800337e:	fba0 1202 	umull	r1, r2, r0, r2
 8003382:	677a      	str	r2, [r7, #116]	; 0x74
 8003384:	460a      	mov	r2, r1
 8003386:	673a      	str	r2, [r7, #112]	; 0x70
 8003388:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800338a:	4413      	add	r3, r2
 800338c:	677b      	str	r3, [r7, #116]	; 0x74
 800338e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003392:	2200      	movs	r2, #0
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
 8003396:	637a      	str	r2, [r7, #52]	; 0x34
 8003398:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800339c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80033a0:	f7fd fc92 	bl	8000cc8 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4613      	mov	r3, r2
 80033aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033ae:	e05b      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b0:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	099b      	lsrs	r3, r3, #6
 80033b6:	2200      	movs	r2, #0
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c2:	623b      	str	r3, [r7, #32]
 80033c4:	2300      	movs	r3, #0
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
 80033c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	f04f 0000 	mov.w	r0, #0
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	0159      	lsls	r1, r3, #5
 80033da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033de:	0150      	lsls	r0, r2, #5
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4641      	mov	r1, r8
 80033e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033ea:	4649      	mov	r1, r9
 80033ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003400:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003404:	ebb2 040a 	subs.w	r4, r2, sl
 8003408:	eb63 050b 	sbc.w	r5, r3, fp
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	00eb      	lsls	r3, r5, #3
 8003416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800341a:	00e2      	lsls	r2, r4, #3
 800341c:	4614      	mov	r4, r2
 800341e:	461d      	mov	r5, r3
 8003420:	4643      	mov	r3, r8
 8003422:	18e3      	adds	r3, r4, r3
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	464b      	mov	r3, r9
 8003428:	eb45 0303 	adc.w	r3, r5, r3
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	e9d7 4500 	ldrd	r4, r5, [r7]
 800343a:	4629      	mov	r1, r5
 800343c:	028b      	lsls	r3, r1, #10
 800343e:	4621      	mov	r1, r4
 8003440:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003444:	4621      	mov	r1, r4
 8003446:	028a      	lsls	r2, r1, #10
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003450:	2200      	movs	r2, #0
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	61fa      	str	r2, [r7, #28]
 8003456:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800345a:	f7fd fc35 	bl	8000cc8 <__aeabi_uldivmod>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4613      	mov	r3, r2
 8003464:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003468:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	0f1b      	lsrs	r3, r3, #28
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003476:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800347a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003486:	e003      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800348a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800348e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003494:	4618      	mov	r0, r3
 8003496:	3798      	adds	r7, #152	; 0x98
 8003498:	46bd      	mov	sp, r7
 800349a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349e:	bf00      	nop
 80034a0:	40023800 	.word	0x40023800
 80034a4:	00f42400 	.word	0x00f42400
 80034a8:	017d7840 	.word	0x017d7840

080034ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e28d      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8083 	beq.w	80035d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034cc:	4b94      	ldr	r3, [pc, #592]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d019      	beq.n	800350c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034d8:	4b91      	ldr	r3, [pc, #580]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034e4:	4b8e      	ldr	r3, [pc, #568]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f0:	d00c      	beq.n	800350c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f2:	4b8b      	ldr	r3, [pc, #556]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d112      	bne.n	8003524 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fe:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800350a:	d10b      	bne.n	8003524 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	4b84      	ldr	r3, [pc, #528]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d05b      	beq.n	80035d0 <HAL_RCC_OscConfig+0x124>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d157      	bne.n	80035d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e25a      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d106      	bne.n	800353c <HAL_RCC_OscConfig+0x90>
 800352e:	4b7c      	ldr	r3, [pc, #496]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7b      	ldr	r2, [pc, #492]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e01d      	b.n	8003578 <HAL_RCC_OscConfig+0xcc>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0xb4>
 8003546:	4b76      	ldr	r3, [pc, #472]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a75      	ldr	r2, [pc, #468]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b73      	ldr	r3, [pc, #460]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a72      	ldr	r2, [pc, #456]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e00b      	b.n	8003578 <HAL_RCC_OscConfig+0xcc>
 8003560:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6e      	ldr	r2, [pc, #440]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	4b6c      	ldr	r3, [pc, #432]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a6b      	ldr	r2, [pc, #428]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe fca0 	bl	8001ec4 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003588:	f7fe fc9c 	bl	8001ec4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e21f      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b61      	ldr	r3, [pc, #388]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0xdc>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fc8c 	bl	8001ec4 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe fc88 	bl	8001ec4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e20b      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	4b57      	ldr	r3, [pc, #348]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x104>
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d06f      	beq.n	80036be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035de:	4b50      	ldr	r3, [pc, #320]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d017      	beq.n	800361a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035ea:	4b4d      	ldr	r3, [pc, #308]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d105      	bne.n	8003602 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035f6:	4b4a      	ldr	r3, [pc, #296]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d11c      	bne.n	8003648 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360e:	4b44      	ldr	r3, [pc, #272]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d116      	bne.n	8003648 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_RCC_OscConfig+0x186>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e1d3      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003632:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4937      	ldr	r1, [pc, #220]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	e03a      	b.n	80036be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d020      	beq.n	8003692 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003650:	4b34      	ldr	r3, [pc, #208]	; (8003724 <HAL_RCC_OscConfig+0x278>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7fe fc35 	bl	8001ec4 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800365e:	f7fe fc31 	bl	8001ec4 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e1b4      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367c:	4b28      	ldr	r3, [pc, #160]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4925      	ldr	r1, [pc, #148]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 800368c:	4313      	orrs	r3, r2
 800368e:	600b      	str	r3, [r1, #0]
 8003690:	e015      	b.n	80036be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <HAL_RCC_OscConfig+0x278>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe fc14 	bl	8001ec4 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a0:	f7fe fc10 	bl	8001ec4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e193      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d036      	beq.n	8003738 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d016      	beq.n	8003700 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d2:	4b15      	ldr	r3, [pc, #84]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe fbf4 	bl	8001ec4 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e0:	f7fe fbf0 	bl	8001ec4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e173      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_RCC_OscConfig+0x274>)
 80036f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x234>
 80036fe:	e01b      	b.n	8003738 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_OscConfig+0x27c>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003706:	f7fe fbdd 	bl	8001ec4 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	e00e      	b.n	800372c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370e:	f7fe fbd9 	bl	8001ec4 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d907      	bls.n	800372c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e15c      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
 8003720:	40023800 	.word	0x40023800
 8003724:	42470000 	.word	0x42470000
 8003728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	4b8a      	ldr	r3, [pc, #552]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 800372e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ea      	bne.n	800370e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8097 	beq.w	8003874 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374a:	4b83      	ldr	r3, [pc, #524]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10f      	bne.n	8003776 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	4b7f      	ldr	r3, [pc, #508]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a7e      	ldr	r2, [pc, #504]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
 8003766:	4b7c      	ldr	r3, [pc, #496]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003776:	4b79      	ldr	r3, [pc, #484]	; (800395c <HAL_RCC_OscConfig+0x4b0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d118      	bne.n	80037b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003782:	4b76      	ldr	r3, [pc, #472]	; (800395c <HAL_RCC_OscConfig+0x4b0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a75      	ldr	r2, [pc, #468]	; (800395c <HAL_RCC_OscConfig+0x4b0>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378e:	f7fe fb99 	bl	8001ec4 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003796:	f7fe fb95 	bl	8001ec4 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e118      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	4b6c      	ldr	r3, [pc, #432]	; (800395c <HAL_RCC_OscConfig+0x4b0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x31e>
 80037bc:	4b66      	ldr	r3, [pc, #408]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a65      	ldr	r2, [pc, #404]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
 80037c8:	e01c      	b.n	8003804 <HAL_RCC_OscConfig+0x358>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x340>
 80037d2:	4b61      	ldr	r3, [pc, #388]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	4a60      	ldr	r2, [pc, #384]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	6713      	str	r3, [r2, #112]	; 0x70
 80037de:	4b5e      	ldr	r3, [pc, #376]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a5d      	ldr	r2, [pc, #372]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	e00b      	b.n	8003804 <HAL_RCC_OscConfig+0x358>
 80037ec:	4b5a      	ldr	r3, [pc, #360]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a59      	ldr	r2, [pc, #356]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
 80037f8:	4b57      	ldr	r3, [pc, #348]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a56      	ldr	r2, [pc, #344]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80037fe:	f023 0304 	bic.w	r3, r3, #4
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d015      	beq.n	8003838 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fe fb5a 	bl	8001ec4 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fe fb56 	bl	8001ec4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0d7      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	4b4b      	ldr	r3, [pc, #300]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0ee      	beq.n	8003814 <HAL_RCC_OscConfig+0x368>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe fb44 	bl	8001ec4 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fe fb40 	bl	8001ec4 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0c1      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	4b40      	ldr	r3, [pc, #256]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ee      	bne.n	8003840 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d105      	bne.n	8003874 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003868:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	4a3a      	ldr	r2, [pc, #232]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 800386e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003872:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 80ad 	beq.w	80039d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800387e:	4b36      	ldr	r3, [pc, #216]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b08      	cmp	r3, #8
 8003888:	d060      	beq.n	800394c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d145      	bne.n	800391e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b33      	ldr	r3, [pc, #204]	; (8003960 <HAL_RCC_OscConfig+0x4b4>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe fb14 	bl	8001ec4 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fe fb10 	bl	8001ec4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e093      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	4b29      	ldr	r3, [pc, #164]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	019b      	lsls	r3, r3, #6
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	3b01      	subs	r3, #1
 80038d8:	041b      	lsls	r3, r3, #16
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	061b      	lsls	r3, r3, #24
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	071b      	lsls	r3, r3, #28
 80038ea:	491b      	ldr	r1, [pc, #108]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_RCC_OscConfig+0x4b4>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fe fae5 	bl	8001ec4 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fe:	f7fe fae1 	bl	8001ec4 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e064      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x452>
 800391c:	e05c      	b.n	80039d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <HAL_RCC_OscConfig+0x4b4>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe face 	bl	8001ec4 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392c:	f7fe faca 	bl	8001ec4 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e04d      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_RCC_OscConfig+0x4ac>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x480>
 800394a:	e045      	b.n	80039d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d107      	bne.n	8003964 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e040      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
 8003958:	40023800 	.word	0x40023800
 800395c:	40007000 	.word	0x40007000
 8003960:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003964:	4b1f      	ldr	r3, [pc, #124]	; (80039e4 <HAL_RCC_OscConfig+0x538>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d030      	beq.n	80039d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d129      	bne.n	80039d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d122      	bne.n	80039d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003994:	4013      	ands	r3, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800399a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800399c:	4293      	cmp	r3, r2
 800399e:	d119      	bne.n	80039d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	3b01      	subs	r3, #1
 80039ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d10f      	bne.n	80039d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d107      	bne.n	80039d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800

080039e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e042      	b.n	8003a80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fe f862 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fcbb 	bl	80043a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d121      	bne.n	8003ae6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_UART_Transmit_IT+0x26>
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e01a      	b.n	8003ae8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	88fa      	ldrh	r2, [r7, #6]
 8003ac2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2221      	movs	r2, #33	; 0x21
 8003ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ae0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e000      	b.n	8003ae8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003ae6:	2302      	movs	r3, #2
  }
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b0ba      	sub	sp, #232	; 0xe8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_UART_IRQHandler+0x66>
 8003b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fb69 	bl	800422a <UART_Receive_IT>
      return;
 8003b58:	e25b      	b.n	8004012 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80de 	beq.w	8003d20 <HAL_UART_IRQHandler+0x22c>
 8003b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80d1 	beq.w	8003d20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <HAL_UART_IRQHandler+0xae>
 8003b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_UART_IRQHandler+0xd2>
 8003bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f043 0202 	orr.w	r2, r3, #2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_UART_IRQHandler+0xf6>
 8003bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	f043 0204 	orr.w	r2, r3, #4
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d011      	beq.n	8003c1a <HAL_UART_IRQHandler+0x126>
 8003bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d105      	bne.n	8003c0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f043 0208 	orr.w	r2, r3, #8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 81f2 	beq.w	8004008 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_UART_IRQHandler+0x14e>
 8003c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 faf4 	bl	800422a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <HAL_UART_IRQHandler+0x17a>
 8003c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d04f      	beq.n	8003d0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9fc 	bl	800406c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d141      	bne.n	8003d06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3314      	adds	r3, #20
 8003c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3314      	adds	r3, #20
 8003caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1d9      	bne.n	8003c82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d013      	beq.n	8003cfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	4a7e      	ldr	r2, [pc, #504]	; (8003ed4 <HAL_UART_IRQHandler+0x3e0>)
 8003cdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe ff67 	bl	8002bb6 <HAL_DMA_Abort_IT>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d016      	beq.n	8003d1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	e00e      	b.n	8003d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f99e 	bl	8004040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	e00a      	b.n	8003d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f99a 	bl	8004040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0c:	e006      	b.n	8003d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f996 	bl	8004040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003d1a:	e175      	b.n	8004008 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1c:	bf00      	nop
    return;
 8003d1e:	e173      	b.n	8004008 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	f040 814f 	bne.w	8003fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8148 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8141 	beq.w	8003fc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	f040 80b6 	bne.w	8003ed8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8145 	beq.w	800400c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	f080 813e 	bcs.w	800400c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da2:	f000 8088 	beq.w	8003eb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1d9      	bne.n	8003da6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e1      	bne.n	8003df2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3314      	adds	r3, #20
 8003e34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e3      	bne.n	8003e2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e86:	f023 0310 	bic.w	r3, r3, #16
 8003e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e98:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e3      	bne.n	8003e74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe fe10 	bl	8002ad6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f8c1 	bl	8004054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ed2:	e09b      	b.n	800400c <HAL_UART_IRQHandler+0x518>
 8003ed4:	08004133 	.word	0x08004133
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 808e 	beq.w	8004010 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8089 	beq.w	8004010 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f22:	647a      	str	r2, [r7, #68]	; 0x44
 8003f24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e3      	bne.n	8003efe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3314      	adds	r3, #20
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	623b      	str	r3, [r7, #32]
   return(result);
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3314      	adds	r3, #20
 8003f56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f5a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e3      	bne.n	8003f36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0310 	bic.w	r3, r3, #16
 8003f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fa0:	61fa      	str	r2, [r7, #28]
 8003fa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	69b9      	ldr	r1, [r7, #24]
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	617b      	str	r3, [r7, #20]
   return(result);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e3      	bne.n	8003f7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f847 	bl	8004054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fc6:	e023      	b.n	8004010 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d009      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x4f4>
 8003fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f8ba 	bl	800415a <UART_Transmit_IT>
    return;
 8003fe6:	e014      	b.n	8004012 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00e      	beq.n	8004012 <HAL_UART_IRQHandler+0x51e>
 8003ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f8fa 	bl	80041fa <UART_EndTransmit_IT>
    return;
 8004006:	e004      	b.n	8004012 <HAL_UART_IRQHandler+0x51e>
    return;
 8004008:	bf00      	nop
 800400a:	e002      	b.n	8004012 <HAL_UART_IRQHandler+0x51e>
      return;
 800400c:	bf00      	nop
 800400e:	e000      	b.n	8004012 <HAL_UART_IRQHandler+0x51e>
      return;
 8004010:	bf00      	nop
  }
}
 8004012:	37e8      	adds	r7, #232	; 0xe8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b095      	sub	sp, #84	; 0x54
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800408a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	330c      	adds	r3, #12
 8004092:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004094:	643a      	str	r2, [r7, #64]	; 0x40
 8004096:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800409a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e5      	bne.n	8004074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3314      	adds	r3, #20
 80040ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3314      	adds	r3, #20
 80040c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e5      	bne.n	80040a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d119      	bne.n	8004118 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f023 0310 	bic.w	r3, r3, #16
 80040fa:	647b      	str	r3, [r7, #68]	; 0x44
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004104:	61ba      	str	r2, [r7, #24]
 8004106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6979      	ldr	r1, [r7, #20]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	613b      	str	r3, [r7, #16]
   return(result);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e5      	bne.n	80040e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004126:	bf00      	nop
 8004128:	3754      	adds	r7, #84	; 0x54
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7ff ff77 	bl	8004040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b21      	cmp	r3, #33	; 0x21
 800416c:	d13e      	bne.n	80041ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d114      	bne.n	80041a2 <UART_Transmit_IT+0x48>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d110      	bne.n	80041a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004194:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	1c9a      	adds	r2, r3, #2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	621a      	str	r2, [r3, #32]
 80041a0:	e008      	b.n	80041b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	1c59      	adds	r1, r3, #1
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6211      	str	r1, [r2, #32]
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	4619      	mov	r1, r3
 80041c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10f      	bne.n	80041e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	e000      	b.n	80041ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
  }
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004210:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff fefc 	bl	8004018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b08c      	sub	sp, #48	; 0x30
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b22      	cmp	r3, #34	; 0x22
 800423c:	f040 80ae 	bne.w	800439c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004248:	d117      	bne.n	800427a <UART_Receive_IT+0x50>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d113      	bne.n	800427a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004252:	2300      	movs	r3, #0
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004268:	b29a      	uxth	r2, r3
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	1c9a      	adds	r2, r3, #2
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
 8004278:	e026      	b.n	80042c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004280:	2300      	movs	r3, #0
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428c:	d007      	beq.n	800429e <UART_Receive_IT+0x74>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <UART_Receive_IT+0x82>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	e008      	b.n	80042be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4619      	mov	r1, r3
 80042d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d15d      	bne.n	8004398 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0220 	bic.w	r2, r2, #32
 80042ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	2b01      	cmp	r3, #1
 8004320:	d135      	bne.n	800438e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	613b      	str	r3, [r7, #16]
   return(result);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f023 0310 	bic.w	r3, r3, #16
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004348:	623a      	str	r2, [r7, #32]
 800434a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	69f9      	ldr	r1, [r7, #28]
 800434e:	6a3a      	ldr	r2, [r7, #32]
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	61bb      	str	r3, [r7, #24]
   return(result);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e5      	bne.n	8004328 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b10      	cmp	r3, #16
 8004368:	d10a      	bne.n	8004380 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004384:	4619      	mov	r1, r3
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fe64 	bl	8004054 <HAL_UARTEx_RxEventCallback>
 800438c:	e002      	b.n	8004394 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fe4c 	bl	800402c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e002      	b.n	800439e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	e000      	b.n	800439e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3730      	adds	r7, #48	; 0x30
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ac:	b0c0      	sub	sp, #256	; 0x100
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	68d9      	ldr	r1, [r3, #12]
 80043c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	ea40 0301 	orr.w	r3, r0, r1
 80043d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	431a      	orrs	r2, r3
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004400:	f021 010c 	bic.w	r1, r1, #12
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800440e:	430b      	orrs	r3, r1
 8004410:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004422:	6999      	ldr	r1, [r3, #24]
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	ea40 0301 	orr.w	r3, r0, r1
 800442e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b8f      	ldr	r3, [pc, #572]	; (8004674 <UART_SetConfig+0x2cc>)
 8004438:	429a      	cmp	r2, r3
 800443a:	d005      	beq.n	8004448 <UART_SetConfig+0xa0>
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b8d      	ldr	r3, [pc, #564]	; (8004678 <UART_SetConfig+0x2d0>)
 8004444:	429a      	cmp	r2, r3
 8004446:	d104      	bne.n	8004452 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004448:	f7fe fe72 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 800444c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004450:	e003      	b.n	800445a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004452:	f7fe fe59 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 8004456:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004464:	f040 810c 	bne.w	8004680 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800446c:	2200      	movs	r2, #0
 800446e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004472:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004476:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800447a:	4622      	mov	r2, r4
 800447c:	462b      	mov	r3, r5
 800447e:	1891      	adds	r1, r2, r2
 8004480:	65b9      	str	r1, [r7, #88]	; 0x58
 8004482:	415b      	adcs	r3, r3
 8004484:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004486:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800448a:	4621      	mov	r1, r4
 800448c:	eb12 0801 	adds.w	r8, r2, r1
 8004490:	4629      	mov	r1, r5
 8004492:	eb43 0901 	adc.w	r9, r3, r1
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044aa:	4690      	mov	r8, r2
 80044ac:	4699      	mov	r9, r3
 80044ae:	4623      	mov	r3, r4
 80044b0:	eb18 0303 	adds.w	r3, r8, r3
 80044b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044b8:	462b      	mov	r3, r5
 80044ba:	eb49 0303 	adc.w	r3, r9, r3
 80044be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044d6:	460b      	mov	r3, r1
 80044d8:	18db      	adds	r3, r3, r3
 80044da:	653b      	str	r3, [r7, #80]	; 0x50
 80044dc:	4613      	mov	r3, r2
 80044de:	eb42 0303 	adc.w	r3, r2, r3
 80044e2:	657b      	str	r3, [r7, #84]	; 0x54
 80044e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044ec:	f7fc fbec 	bl	8000cc8 <__aeabi_uldivmod>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4b61      	ldr	r3, [pc, #388]	; (800467c <UART_SetConfig+0x2d4>)
 80044f6:	fba3 2302 	umull	r2, r3, r3, r2
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	011c      	lsls	r4, r3, #4
 80044fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004508:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800450c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004510:	4642      	mov	r2, r8
 8004512:	464b      	mov	r3, r9
 8004514:	1891      	adds	r1, r2, r2
 8004516:	64b9      	str	r1, [r7, #72]	; 0x48
 8004518:	415b      	adcs	r3, r3
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004520:	4641      	mov	r1, r8
 8004522:	eb12 0a01 	adds.w	sl, r2, r1
 8004526:	4649      	mov	r1, r9
 8004528:	eb43 0b01 	adc.w	fp, r3, r1
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004538:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800453c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004540:	4692      	mov	sl, r2
 8004542:	469b      	mov	fp, r3
 8004544:	4643      	mov	r3, r8
 8004546:	eb1a 0303 	adds.w	r3, sl, r3
 800454a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800454e:	464b      	mov	r3, r9
 8004550:	eb4b 0303 	adc.w	r3, fp, r3
 8004554:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004564:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004568:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800456c:	460b      	mov	r3, r1
 800456e:	18db      	adds	r3, r3, r3
 8004570:	643b      	str	r3, [r7, #64]	; 0x40
 8004572:	4613      	mov	r3, r2
 8004574:	eb42 0303 	adc.w	r3, r2, r3
 8004578:	647b      	str	r3, [r7, #68]	; 0x44
 800457a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800457e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004582:	f7fc fba1 	bl	8000cc8 <__aeabi_uldivmod>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4611      	mov	r1, r2
 800458c:	4b3b      	ldr	r3, [pc, #236]	; (800467c <UART_SetConfig+0x2d4>)
 800458e:	fba3 2301 	umull	r2, r3, r3, r1
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	2264      	movs	r2, #100	; 0x64
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	1acb      	subs	r3, r1, r3
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045a2:	4b36      	ldr	r3, [pc, #216]	; (800467c <UART_SetConfig+0x2d4>)
 80045a4:	fba3 2302 	umull	r2, r3, r3, r2
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045b0:	441c      	add	r4, r3
 80045b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045c4:	4642      	mov	r2, r8
 80045c6:	464b      	mov	r3, r9
 80045c8:	1891      	adds	r1, r2, r2
 80045ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80045cc:	415b      	adcs	r3, r3
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045d4:	4641      	mov	r1, r8
 80045d6:	1851      	adds	r1, r2, r1
 80045d8:	6339      	str	r1, [r7, #48]	; 0x30
 80045da:	4649      	mov	r1, r9
 80045dc:	414b      	adcs	r3, r1
 80045de:	637b      	str	r3, [r7, #52]	; 0x34
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045ec:	4659      	mov	r1, fp
 80045ee:	00cb      	lsls	r3, r1, #3
 80045f0:	4651      	mov	r1, sl
 80045f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045f6:	4651      	mov	r1, sl
 80045f8:	00ca      	lsls	r2, r1, #3
 80045fa:	4610      	mov	r0, r2
 80045fc:	4619      	mov	r1, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	4642      	mov	r2, r8
 8004602:	189b      	adds	r3, r3, r2
 8004604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004608:	464b      	mov	r3, r9
 800460a:	460a      	mov	r2, r1
 800460c:	eb42 0303 	adc.w	r3, r2, r3
 8004610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004620:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004624:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004628:	460b      	mov	r3, r1
 800462a:	18db      	adds	r3, r3, r3
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28
 800462e:	4613      	mov	r3, r2
 8004630:	eb42 0303 	adc.w	r3, r2, r3
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004636:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800463a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800463e:	f7fc fb43 	bl	8000cc8 <__aeabi_uldivmod>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4b0d      	ldr	r3, [pc, #52]	; (800467c <UART_SetConfig+0x2d4>)
 8004648:	fba3 1302 	umull	r1, r3, r3, r2
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	2164      	movs	r1, #100	; 0x64
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	3332      	adds	r3, #50	; 0x32
 800465a:	4a08      	ldr	r2, [pc, #32]	; (800467c <UART_SetConfig+0x2d4>)
 800465c:	fba2 2303 	umull	r2, r3, r2, r3
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	f003 0207 	and.w	r2, r3, #7
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4422      	add	r2, r4
 800466e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004670:	e106      	b.n	8004880 <UART_SetConfig+0x4d8>
 8004672:	bf00      	nop
 8004674:	40011000 	.word	0x40011000
 8004678:	40011400 	.word	0x40011400
 800467c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004684:	2200      	movs	r2, #0
 8004686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800468a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800468e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004692:	4642      	mov	r2, r8
 8004694:	464b      	mov	r3, r9
 8004696:	1891      	adds	r1, r2, r2
 8004698:	6239      	str	r1, [r7, #32]
 800469a:	415b      	adcs	r3, r3
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
 800469e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046a2:	4641      	mov	r1, r8
 80046a4:	1854      	adds	r4, r2, r1
 80046a6:	4649      	mov	r1, r9
 80046a8:	eb43 0501 	adc.w	r5, r3, r1
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	00eb      	lsls	r3, r5, #3
 80046b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ba:	00e2      	lsls	r2, r4, #3
 80046bc:	4614      	mov	r4, r2
 80046be:	461d      	mov	r5, r3
 80046c0:	4643      	mov	r3, r8
 80046c2:	18e3      	adds	r3, r4, r3
 80046c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046c8:	464b      	mov	r3, r9
 80046ca:	eb45 0303 	adc.w	r3, r5, r3
 80046ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046ee:	4629      	mov	r1, r5
 80046f0:	008b      	lsls	r3, r1, #2
 80046f2:	4621      	mov	r1, r4
 80046f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f8:	4621      	mov	r1, r4
 80046fa:	008a      	lsls	r2, r1, #2
 80046fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004700:	f7fc fae2 	bl	8000cc8 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4b60      	ldr	r3, [pc, #384]	; (800488c <UART_SetConfig+0x4e4>)
 800470a:	fba3 2302 	umull	r2, r3, r3, r2
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	011c      	lsls	r4, r3, #4
 8004712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800471c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004720:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004724:	4642      	mov	r2, r8
 8004726:	464b      	mov	r3, r9
 8004728:	1891      	adds	r1, r2, r2
 800472a:	61b9      	str	r1, [r7, #24]
 800472c:	415b      	adcs	r3, r3
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004734:	4641      	mov	r1, r8
 8004736:	1851      	adds	r1, r2, r1
 8004738:	6139      	str	r1, [r7, #16]
 800473a:	4649      	mov	r1, r9
 800473c:	414b      	adcs	r3, r1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800474c:	4659      	mov	r1, fp
 800474e:	00cb      	lsls	r3, r1, #3
 8004750:	4651      	mov	r1, sl
 8004752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004756:	4651      	mov	r1, sl
 8004758:	00ca      	lsls	r2, r1, #3
 800475a:	4610      	mov	r0, r2
 800475c:	4619      	mov	r1, r3
 800475e:	4603      	mov	r3, r0
 8004760:	4642      	mov	r2, r8
 8004762:	189b      	adds	r3, r3, r2
 8004764:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004768:	464b      	mov	r3, r9
 800476a:	460a      	mov	r2, r1
 800476c:	eb42 0303 	adc.w	r3, r2, r3
 8004770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	67bb      	str	r3, [r7, #120]	; 0x78
 800477e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800478c:	4649      	mov	r1, r9
 800478e:	008b      	lsls	r3, r1, #2
 8004790:	4641      	mov	r1, r8
 8004792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004796:	4641      	mov	r1, r8
 8004798:	008a      	lsls	r2, r1, #2
 800479a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800479e:	f7fc fa93 	bl	8000cc8 <__aeabi_uldivmod>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4611      	mov	r1, r2
 80047a8:	4b38      	ldr	r3, [pc, #224]	; (800488c <UART_SetConfig+0x4e4>)
 80047aa:	fba3 2301 	umull	r2, r3, r3, r1
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	2264      	movs	r2, #100	; 0x64
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	1acb      	subs	r3, r1, r3
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	3332      	adds	r3, #50	; 0x32
 80047bc:	4a33      	ldr	r2, [pc, #204]	; (800488c <UART_SetConfig+0x4e4>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c8:	441c      	add	r4, r3
 80047ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ce:	2200      	movs	r2, #0
 80047d0:	673b      	str	r3, [r7, #112]	; 0x70
 80047d2:	677a      	str	r2, [r7, #116]	; 0x74
 80047d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047d8:	4642      	mov	r2, r8
 80047da:	464b      	mov	r3, r9
 80047dc:	1891      	adds	r1, r2, r2
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	415b      	adcs	r3, r3
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e8:	4641      	mov	r1, r8
 80047ea:	1851      	adds	r1, r2, r1
 80047ec:	6039      	str	r1, [r7, #0]
 80047ee:	4649      	mov	r1, r9
 80047f0:	414b      	adcs	r3, r1
 80047f2:	607b      	str	r3, [r7, #4]
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004800:	4659      	mov	r1, fp
 8004802:	00cb      	lsls	r3, r1, #3
 8004804:	4651      	mov	r1, sl
 8004806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800480a:	4651      	mov	r1, sl
 800480c:	00ca      	lsls	r2, r1, #3
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	4603      	mov	r3, r0
 8004814:	4642      	mov	r2, r8
 8004816:	189b      	adds	r3, r3, r2
 8004818:	66bb      	str	r3, [r7, #104]	; 0x68
 800481a:	464b      	mov	r3, r9
 800481c:	460a      	mov	r2, r1
 800481e:	eb42 0303 	adc.w	r3, r2, r3
 8004822:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	663b      	str	r3, [r7, #96]	; 0x60
 800482e:	667a      	str	r2, [r7, #100]	; 0x64
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800483c:	4649      	mov	r1, r9
 800483e:	008b      	lsls	r3, r1, #2
 8004840:	4641      	mov	r1, r8
 8004842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004846:	4641      	mov	r1, r8
 8004848:	008a      	lsls	r2, r1, #2
 800484a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800484e:	f7fc fa3b 	bl	8000cc8 <__aeabi_uldivmod>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <UART_SetConfig+0x4e4>)
 8004858:	fba3 1302 	umull	r1, r3, r3, r2
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	2164      	movs	r1, #100	; 0x64
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	3332      	adds	r3, #50	; 0x32
 800486a:	4a08      	ldr	r2, [pc, #32]	; (800488c <UART_SetConfig+0x4e4>)
 800486c:	fba2 2303 	umull	r2, r3, r2, r3
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	f003 020f 	and.w	r2, r3, #15
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4422      	add	r2, r4
 800487e:	609a      	str	r2, [r3, #8]
}
 8004880:	bf00      	nop
 8004882:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004886:	46bd      	mov	sp, r7
 8004888:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800488c:	51eb851f 	.word	0x51eb851f

08004890 <__cvt>:
 8004890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004894:	ec55 4b10 	vmov	r4, r5, d0
 8004898:	2d00      	cmp	r5, #0
 800489a:	460e      	mov	r6, r1
 800489c:	4619      	mov	r1, r3
 800489e:	462b      	mov	r3, r5
 80048a0:	bfbb      	ittet	lt
 80048a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048a6:	461d      	movlt	r5, r3
 80048a8:	2300      	movge	r3, #0
 80048aa:	232d      	movlt	r3, #45	; 0x2d
 80048ac:	700b      	strb	r3, [r1, #0]
 80048ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048b4:	4691      	mov	r9, r2
 80048b6:	f023 0820 	bic.w	r8, r3, #32
 80048ba:	bfbc      	itt	lt
 80048bc:	4622      	movlt	r2, r4
 80048be:	4614      	movlt	r4, r2
 80048c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048c4:	d005      	beq.n	80048d2 <__cvt+0x42>
 80048c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048ca:	d100      	bne.n	80048ce <__cvt+0x3e>
 80048cc:	3601      	adds	r6, #1
 80048ce:	2102      	movs	r1, #2
 80048d0:	e000      	b.n	80048d4 <__cvt+0x44>
 80048d2:	2103      	movs	r1, #3
 80048d4:	ab03      	add	r3, sp, #12
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	ab02      	add	r3, sp, #8
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	ec45 4b10 	vmov	d0, r4, r5
 80048e0:	4653      	mov	r3, sl
 80048e2:	4632      	mov	r2, r6
 80048e4:	f001 f880 	bl	80059e8 <_dtoa_r>
 80048e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048ec:	4607      	mov	r7, r0
 80048ee:	d102      	bne.n	80048f6 <__cvt+0x66>
 80048f0:	f019 0f01 	tst.w	r9, #1
 80048f4:	d022      	beq.n	800493c <__cvt+0xac>
 80048f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048fa:	eb07 0906 	add.w	r9, r7, r6
 80048fe:	d110      	bne.n	8004922 <__cvt+0x92>
 8004900:	783b      	ldrb	r3, [r7, #0]
 8004902:	2b30      	cmp	r3, #48	; 0x30
 8004904:	d10a      	bne.n	800491c <__cvt+0x8c>
 8004906:	2200      	movs	r2, #0
 8004908:	2300      	movs	r3, #0
 800490a:	4620      	mov	r0, r4
 800490c:	4629      	mov	r1, r5
 800490e:	f7fc f8fb 	bl	8000b08 <__aeabi_dcmpeq>
 8004912:	b918      	cbnz	r0, 800491c <__cvt+0x8c>
 8004914:	f1c6 0601 	rsb	r6, r6, #1
 8004918:	f8ca 6000 	str.w	r6, [sl]
 800491c:	f8da 3000 	ldr.w	r3, [sl]
 8004920:	4499      	add	r9, r3
 8004922:	2200      	movs	r2, #0
 8004924:	2300      	movs	r3, #0
 8004926:	4620      	mov	r0, r4
 8004928:	4629      	mov	r1, r5
 800492a:	f7fc f8ed 	bl	8000b08 <__aeabi_dcmpeq>
 800492e:	b108      	cbz	r0, 8004934 <__cvt+0xa4>
 8004930:	f8cd 900c 	str.w	r9, [sp, #12]
 8004934:	2230      	movs	r2, #48	; 0x30
 8004936:	9b03      	ldr	r3, [sp, #12]
 8004938:	454b      	cmp	r3, r9
 800493a:	d307      	bcc.n	800494c <__cvt+0xbc>
 800493c:	9b03      	ldr	r3, [sp, #12]
 800493e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004940:	1bdb      	subs	r3, r3, r7
 8004942:	4638      	mov	r0, r7
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	b004      	add	sp, #16
 8004948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494c:	1c59      	adds	r1, r3, #1
 800494e:	9103      	str	r1, [sp, #12]
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e7f0      	b.n	8004936 <__cvt+0xa6>

08004954 <__exponent>:
 8004954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004956:	4603      	mov	r3, r0
 8004958:	2900      	cmp	r1, #0
 800495a:	bfb8      	it	lt
 800495c:	4249      	neglt	r1, r1
 800495e:	f803 2b02 	strb.w	r2, [r3], #2
 8004962:	bfb4      	ite	lt
 8004964:	222d      	movlt	r2, #45	; 0x2d
 8004966:	222b      	movge	r2, #43	; 0x2b
 8004968:	2909      	cmp	r1, #9
 800496a:	7042      	strb	r2, [r0, #1]
 800496c:	dd2a      	ble.n	80049c4 <__exponent+0x70>
 800496e:	f10d 0207 	add.w	r2, sp, #7
 8004972:	4617      	mov	r7, r2
 8004974:	260a      	movs	r6, #10
 8004976:	4694      	mov	ip, r2
 8004978:	fb91 f5f6 	sdiv	r5, r1, r6
 800497c:	fb06 1415 	mls	r4, r6, r5, r1
 8004980:	3430      	adds	r4, #48	; 0x30
 8004982:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004986:	460c      	mov	r4, r1
 8004988:	2c63      	cmp	r4, #99	; 0x63
 800498a:	f102 32ff 	add.w	r2, r2, #4294967295
 800498e:	4629      	mov	r1, r5
 8004990:	dcf1      	bgt.n	8004976 <__exponent+0x22>
 8004992:	3130      	adds	r1, #48	; 0x30
 8004994:	f1ac 0402 	sub.w	r4, ip, #2
 8004998:	f802 1c01 	strb.w	r1, [r2, #-1]
 800499c:	1c41      	adds	r1, r0, #1
 800499e:	4622      	mov	r2, r4
 80049a0:	42ba      	cmp	r2, r7
 80049a2:	d30a      	bcc.n	80049ba <__exponent+0x66>
 80049a4:	f10d 0209 	add.w	r2, sp, #9
 80049a8:	eba2 020c 	sub.w	r2, r2, ip
 80049ac:	42bc      	cmp	r4, r7
 80049ae:	bf88      	it	hi
 80049b0:	2200      	movhi	r2, #0
 80049b2:	4413      	add	r3, r2
 80049b4:	1a18      	subs	r0, r3, r0
 80049b6:	b003      	add	sp, #12
 80049b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80049be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80049c2:	e7ed      	b.n	80049a0 <__exponent+0x4c>
 80049c4:	2330      	movs	r3, #48	; 0x30
 80049c6:	3130      	adds	r1, #48	; 0x30
 80049c8:	7083      	strb	r3, [r0, #2]
 80049ca:	70c1      	strb	r1, [r0, #3]
 80049cc:	1d03      	adds	r3, r0, #4
 80049ce:	e7f1      	b.n	80049b4 <__exponent+0x60>

080049d0 <_printf_float>:
 80049d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d4:	ed2d 8b02 	vpush	{d8}
 80049d8:	b08d      	sub	sp, #52	; 0x34
 80049da:	460c      	mov	r4, r1
 80049dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80049e0:	4616      	mov	r6, r2
 80049e2:	461f      	mov	r7, r3
 80049e4:	4605      	mov	r5, r0
 80049e6:	f000 fef7 	bl	80057d8 <_localeconv_r>
 80049ea:	f8d0 a000 	ldr.w	sl, [r0]
 80049ee:	4650      	mov	r0, sl
 80049f0:	f7fb fc5e 	bl	80002b0 <strlen>
 80049f4:	2300      	movs	r3, #0
 80049f6:	930a      	str	r3, [sp, #40]	; 0x28
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	9305      	str	r3, [sp, #20]
 80049fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004a00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a04:	3307      	adds	r3, #7
 8004a06:	f023 0307 	bic.w	r3, r3, #7
 8004a0a:	f103 0208 	add.w	r2, r3, #8
 8004a0e:	f8c8 2000 	str.w	r2, [r8]
 8004a12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a1a:	9307      	str	r3, [sp, #28]
 8004a1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a20:	ee08 0a10 	vmov	s16, r0
 8004a24:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004a28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a2c:	4b9e      	ldr	r3, [pc, #632]	; (8004ca8 <_printf_float+0x2d8>)
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a32:	f7fc f89b 	bl	8000b6c <__aeabi_dcmpun>
 8004a36:	bb88      	cbnz	r0, 8004a9c <_printf_float+0xcc>
 8004a38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a3c:	4b9a      	ldr	r3, [pc, #616]	; (8004ca8 <_printf_float+0x2d8>)
 8004a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a42:	f7fc f875 	bl	8000b30 <__aeabi_dcmple>
 8004a46:	bb48      	cbnz	r0, 8004a9c <_printf_float+0xcc>
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	4649      	mov	r1, r9
 8004a50:	f7fc f864 	bl	8000b1c <__aeabi_dcmplt>
 8004a54:	b110      	cbz	r0, 8004a5c <_printf_float+0x8c>
 8004a56:	232d      	movs	r3, #45	; 0x2d
 8004a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a5c:	4a93      	ldr	r2, [pc, #588]	; (8004cac <_printf_float+0x2dc>)
 8004a5e:	4b94      	ldr	r3, [pc, #592]	; (8004cb0 <_printf_float+0x2e0>)
 8004a60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a64:	bf94      	ite	ls
 8004a66:	4690      	movls	r8, r2
 8004a68:	4698      	movhi	r8, r3
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	6123      	str	r3, [r4, #16]
 8004a6e:	9b05      	ldr	r3, [sp, #20]
 8004a70:	f023 0304 	bic.w	r3, r3, #4
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	f04f 0900 	mov.w	r9, #0
 8004a7a:	9700      	str	r7, [sp, #0]
 8004a7c:	4633      	mov	r3, r6
 8004a7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a80:	4621      	mov	r1, r4
 8004a82:	4628      	mov	r0, r5
 8004a84:	f000 f9da 	bl	8004e3c <_printf_common>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	f040 8090 	bne.w	8004bae <_printf_float+0x1de>
 8004a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a92:	b00d      	add	sp, #52	; 0x34
 8004a94:	ecbd 8b02 	vpop	{d8}
 8004a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	464b      	mov	r3, r9
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	f7fc f862 	bl	8000b6c <__aeabi_dcmpun>
 8004aa8:	b140      	cbz	r0, 8004abc <_printf_float+0xec>
 8004aaa:	464b      	mov	r3, r9
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bfbc      	itt	lt
 8004ab0:	232d      	movlt	r3, #45	; 0x2d
 8004ab2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ab6:	4a7f      	ldr	r2, [pc, #508]	; (8004cb4 <_printf_float+0x2e4>)
 8004ab8:	4b7f      	ldr	r3, [pc, #508]	; (8004cb8 <_printf_float+0x2e8>)
 8004aba:	e7d1      	b.n	8004a60 <_printf_float+0x90>
 8004abc:	6863      	ldr	r3, [r4, #4]
 8004abe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004ac2:	9206      	str	r2, [sp, #24]
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	d13f      	bne.n	8004b48 <_printf_float+0x178>
 8004ac8:	2306      	movs	r3, #6
 8004aca:	6063      	str	r3, [r4, #4]
 8004acc:	9b05      	ldr	r3, [sp, #20]
 8004ace:	6861      	ldr	r1, [r4, #4]
 8004ad0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9303      	str	r3, [sp, #12]
 8004ad8:	ab0a      	add	r3, sp, #40	; 0x28
 8004ada:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004ade:	ab09      	add	r3, sp, #36	; 0x24
 8004ae0:	ec49 8b10 	vmov	d0, r8, r9
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004aec:	4628      	mov	r0, r5
 8004aee:	f7ff fecf 	bl	8004890 <__cvt>
 8004af2:	9b06      	ldr	r3, [sp, #24]
 8004af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004af6:	2b47      	cmp	r3, #71	; 0x47
 8004af8:	4680      	mov	r8, r0
 8004afa:	d108      	bne.n	8004b0e <_printf_float+0x13e>
 8004afc:	1cc8      	adds	r0, r1, #3
 8004afe:	db02      	blt.n	8004b06 <_printf_float+0x136>
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	4299      	cmp	r1, r3
 8004b04:	dd41      	ble.n	8004b8a <_printf_float+0x1ba>
 8004b06:	f1ab 0302 	sub.w	r3, fp, #2
 8004b0a:	fa5f fb83 	uxtb.w	fp, r3
 8004b0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b12:	d820      	bhi.n	8004b56 <_printf_float+0x186>
 8004b14:	3901      	subs	r1, #1
 8004b16:	465a      	mov	r2, fp
 8004b18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b1c:	9109      	str	r1, [sp, #36]	; 0x24
 8004b1e:	f7ff ff19 	bl	8004954 <__exponent>
 8004b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b24:	1813      	adds	r3, r2, r0
 8004b26:	2a01      	cmp	r2, #1
 8004b28:	4681      	mov	r9, r0
 8004b2a:	6123      	str	r3, [r4, #16]
 8004b2c:	dc02      	bgt.n	8004b34 <_printf_float+0x164>
 8004b2e:	6822      	ldr	r2, [r4, #0]
 8004b30:	07d2      	lsls	r2, r2, #31
 8004b32:	d501      	bpl.n	8004b38 <_printf_float+0x168>
 8004b34:	3301      	adds	r3, #1
 8004b36:	6123      	str	r3, [r4, #16]
 8004b38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d09c      	beq.n	8004a7a <_printf_float+0xaa>
 8004b40:	232d      	movs	r3, #45	; 0x2d
 8004b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b46:	e798      	b.n	8004a7a <_printf_float+0xaa>
 8004b48:	9a06      	ldr	r2, [sp, #24]
 8004b4a:	2a47      	cmp	r2, #71	; 0x47
 8004b4c:	d1be      	bne.n	8004acc <_printf_float+0xfc>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1bc      	bne.n	8004acc <_printf_float+0xfc>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e7b9      	b.n	8004aca <_printf_float+0xfa>
 8004b56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b5a:	d118      	bne.n	8004b8e <_printf_float+0x1be>
 8004b5c:	2900      	cmp	r1, #0
 8004b5e:	6863      	ldr	r3, [r4, #4]
 8004b60:	dd0b      	ble.n	8004b7a <_printf_float+0x1aa>
 8004b62:	6121      	str	r1, [r4, #16]
 8004b64:	b913      	cbnz	r3, 8004b6c <_printf_float+0x19c>
 8004b66:	6822      	ldr	r2, [r4, #0]
 8004b68:	07d0      	lsls	r0, r2, #31
 8004b6a:	d502      	bpl.n	8004b72 <_printf_float+0x1a2>
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	440b      	add	r3, r1
 8004b70:	6123      	str	r3, [r4, #16]
 8004b72:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b74:	f04f 0900 	mov.w	r9, #0
 8004b78:	e7de      	b.n	8004b38 <_printf_float+0x168>
 8004b7a:	b913      	cbnz	r3, 8004b82 <_printf_float+0x1b2>
 8004b7c:	6822      	ldr	r2, [r4, #0]
 8004b7e:	07d2      	lsls	r2, r2, #31
 8004b80:	d501      	bpl.n	8004b86 <_printf_float+0x1b6>
 8004b82:	3302      	adds	r3, #2
 8004b84:	e7f4      	b.n	8004b70 <_printf_float+0x1a0>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e7f2      	b.n	8004b70 <_printf_float+0x1a0>
 8004b8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b90:	4299      	cmp	r1, r3
 8004b92:	db05      	blt.n	8004ba0 <_printf_float+0x1d0>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	6121      	str	r1, [r4, #16]
 8004b98:	07d8      	lsls	r0, r3, #31
 8004b9a:	d5ea      	bpl.n	8004b72 <_printf_float+0x1a2>
 8004b9c:	1c4b      	adds	r3, r1, #1
 8004b9e:	e7e7      	b.n	8004b70 <_printf_float+0x1a0>
 8004ba0:	2900      	cmp	r1, #0
 8004ba2:	bfd4      	ite	le
 8004ba4:	f1c1 0202 	rsble	r2, r1, #2
 8004ba8:	2201      	movgt	r2, #1
 8004baa:	4413      	add	r3, r2
 8004bac:	e7e0      	b.n	8004b70 <_printf_float+0x1a0>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	055a      	lsls	r2, r3, #21
 8004bb2:	d407      	bmi.n	8004bc4 <_printf_float+0x1f4>
 8004bb4:	6923      	ldr	r3, [r4, #16]
 8004bb6:	4642      	mov	r2, r8
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4628      	mov	r0, r5
 8004bbc:	47b8      	blx	r7
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d12c      	bne.n	8004c1c <_printf_float+0x24c>
 8004bc2:	e764      	b.n	8004a8e <_printf_float+0xbe>
 8004bc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bc8:	f240 80e0 	bls.w	8004d8c <_printf_float+0x3bc>
 8004bcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f7fb ff98 	bl	8000b08 <__aeabi_dcmpeq>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d034      	beq.n	8004c46 <_printf_float+0x276>
 8004bdc:	4a37      	ldr	r2, [pc, #220]	; (8004cbc <_printf_float+0x2ec>)
 8004bde:	2301      	movs	r3, #1
 8004be0:	4631      	mov	r1, r6
 8004be2:	4628      	mov	r0, r5
 8004be4:	47b8      	blx	r7
 8004be6:	3001      	adds	r0, #1
 8004be8:	f43f af51 	beq.w	8004a8e <_printf_float+0xbe>
 8004bec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	db02      	blt.n	8004bfa <_printf_float+0x22a>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	07d8      	lsls	r0, r3, #31
 8004bf8:	d510      	bpl.n	8004c1c <_printf_float+0x24c>
 8004bfa:	ee18 3a10 	vmov	r3, s16
 8004bfe:	4652      	mov	r2, sl
 8004c00:	4631      	mov	r1, r6
 8004c02:	4628      	mov	r0, r5
 8004c04:	47b8      	blx	r7
 8004c06:	3001      	adds	r0, #1
 8004c08:	f43f af41 	beq.w	8004a8e <_printf_float+0xbe>
 8004c0c:	f04f 0800 	mov.w	r8, #0
 8004c10:	f104 091a 	add.w	r9, r4, #26
 8004c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c16:	3b01      	subs	r3, #1
 8004c18:	4543      	cmp	r3, r8
 8004c1a:	dc09      	bgt.n	8004c30 <_printf_float+0x260>
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	079b      	lsls	r3, r3, #30
 8004c20:	f100 8107 	bmi.w	8004e32 <_printf_float+0x462>
 8004c24:	68e0      	ldr	r0, [r4, #12]
 8004c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c28:	4298      	cmp	r0, r3
 8004c2a:	bfb8      	it	lt
 8004c2c:	4618      	movlt	r0, r3
 8004c2e:	e730      	b.n	8004a92 <_printf_float+0xc2>
 8004c30:	2301      	movs	r3, #1
 8004c32:	464a      	mov	r2, r9
 8004c34:	4631      	mov	r1, r6
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b8      	blx	r7
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	f43f af27 	beq.w	8004a8e <_printf_float+0xbe>
 8004c40:	f108 0801 	add.w	r8, r8, #1
 8004c44:	e7e6      	b.n	8004c14 <_printf_float+0x244>
 8004c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	dc39      	bgt.n	8004cc0 <_printf_float+0x2f0>
 8004c4c:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <_printf_float+0x2ec>)
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4631      	mov	r1, r6
 8004c52:	4628      	mov	r0, r5
 8004c54:	47b8      	blx	r7
 8004c56:	3001      	adds	r0, #1
 8004c58:	f43f af19 	beq.w	8004a8e <_printf_float+0xbe>
 8004c5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c60:	4313      	orrs	r3, r2
 8004c62:	d102      	bne.n	8004c6a <_printf_float+0x29a>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	07d9      	lsls	r1, r3, #31
 8004c68:	d5d8      	bpl.n	8004c1c <_printf_float+0x24c>
 8004c6a:	ee18 3a10 	vmov	r3, s16
 8004c6e:	4652      	mov	r2, sl
 8004c70:	4631      	mov	r1, r6
 8004c72:	4628      	mov	r0, r5
 8004c74:	47b8      	blx	r7
 8004c76:	3001      	adds	r0, #1
 8004c78:	f43f af09 	beq.w	8004a8e <_printf_float+0xbe>
 8004c7c:	f04f 0900 	mov.w	r9, #0
 8004c80:	f104 0a1a 	add.w	sl, r4, #26
 8004c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c86:	425b      	negs	r3, r3
 8004c88:	454b      	cmp	r3, r9
 8004c8a:	dc01      	bgt.n	8004c90 <_printf_float+0x2c0>
 8004c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c8e:	e792      	b.n	8004bb6 <_printf_float+0x1e6>
 8004c90:	2301      	movs	r3, #1
 8004c92:	4652      	mov	r2, sl
 8004c94:	4631      	mov	r1, r6
 8004c96:	4628      	mov	r0, r5
 8004c98:	47b8      	blx	r7
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	f43f aef7 	beq.w	8004a8e <_printf_float+0xbe>
 8004ca0:	f109 0901 	add.w	r9, r9, #1
 8004ca4:	e7ee      	b.n	8004c84 <_printf_float+0x2b4>
 8004ca6:	bf00      	nop
 8004ca8:	7fefffff 	.word	0x7fefffff
 8004cac:	0800a38c 	.word	0x0800a38c
 8004cb0:	0800a390 	.word	0x0800a390
 8004cb4:	0800a394 	.word	0x0800a394
 8004cb8:	0800a398 	.word	0x0800a398
 8004cbc:	0800a39c 	.word	0x0800a39c
 8004cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	bfa8      	it	ge
 8004cc8:	461a      	movge	r2, r3
 8004cca:	2a00      	cmp	r2, #0
 8004ccc:	4691      	mov	r9, r2
 8004cce:	dc37      	bgt.n	8004d40 <_printf_float+0x370>
 8004cd0:	f04f 0b00 	mov.w	fp, #0
 8004cd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cd8:	f104 021a 	add.w	r2, r4, #26
 8004cdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cde:	9305      	str	r3, [sp, #20]
 8004ce0:	eba3 0309 	sub.w	r3, r3, r9
 8004ce4:	455b      	cmp	r3, fp
 8004ce6:	dc33      	bgt.n	8004d50 <_printf_float+0x380>
 8004ce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cec:	429a      	cmp	r2, r3
 8004cee:	db3b      	blt.n	8004d68 <_printf_float+0x398>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	07da      	lsls	r2, r3, #31
 8004cf4:	d438      	bmi.n	8004d68 <_printf_float+0x398>
 8004cf6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004cfa:	eba2 0903 	sub.w	r9, r2, r3
 8004cfe:	9b05      	ldr	r3, [sp, #20]
 8004d00:	1ad2      	subs	r2, r2, r3
 8004d02:	4591      	cmp	r9, r2
 8004d04:	bfa8      	it	ge
 8004d06:	4691      	movge	r9, r2
 8004d08:	f1b9 0f00 	cmp.w	r9, #0
 8004d0c:	dc35      	bgt.n	8004d7a <_printf_float+0x3aa>
 8004d0e:	f04f 0800 	mov.w	r8, #0
 8004d12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d16:	f104 0a1a 	add.w	sl, r4, #26
 8004d1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	eba3 0309 	sub.w	r3, r3, r9
 8004d24:	4543      	cmp	r3, r8
 8004d26:	f77f af79 	ble.w	8004c1c <_printf_float+0x24c>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4652      	mov	r2, sl
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b8      	blx	r7
 8004d34:	3001      	adds	r0, #1
 8004d36:	f43f aeaa 	beq.w	8004a8e <_printf_float+0xbe>
 8004d3a:	f108 0801 	add.w	r8, r8, #1
 8004d3e:	e7ec      	b.n	8004d1a <_printf_float+0x34a>
 8004d40:	4613      	mov	r3, r2
 8004d42:	4631      	mov	r1, r6
 8004d44:	4642      	mov	r2, r8
 8004d46:	4628      	mov	r0, r5
 8004d48:	47b8      	blx	r7
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d1c0      	bne.n	8004cd0 <_printf_float+0x300>
 8004d4e:	e69e      	b.n	8004a8e <_printf_float+0xbe>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4631      	mov	r1, r6
 8004d54:	4628      	mov	r0, r5
 8004d56:	9205      	str	r2, [sp, #20]
 8004d58:	47b8      	blx	r7
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	f43f ae97 	beq.w	8004a8e <_printf_float+0xbe>
 8004d60:	9a05      	ldr	r2, [sp, #20]
 8004d62:	f10b 0b01 	add.w	fp, fp, #1
 8004d66:	e7b9      	b.n	8004cdc <_printf_float+0x30c>
 8004d68:	ee18 3a10 	vmov	r3, s16
 8004d6c:	4652      	mov	r2, sl
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	d1be      	bne.n	8004cf6 <_printf_float+0x326>
 8004d78:	e689      	b.n	8004a8e <_printf_float+0xbe>
 8004d7a:	9a05      	ldr	r2, [sp, #20]
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	4442      	add	r2, r8
 8004d80:	4631      	mov	r1, r6
 8004d82:	4628      	mov	r0, r5
 8004d84:	47b8      	blx	r7
 8004d86:	3001      	adds	r0, #1
 8004d88:	d1c1      	bne.n	8004d0e <_printf_float+0x33e>
 8004d8a:	e680      	b.n	8004a8e <_printf_float+0xbe>
 8004d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d8e:	2a01      	cmp	r2, #1
 8004d90:	dc01      	bgt.n	8004d96 <_printf_float+0x3c6>
 8004d92:	07db      	lsls	r3, r3, #31
 8004d94:	d53a      	bpl.n	8004e0c <_printf_float+0x43c>
 8004d96:	2301      	movs	r3, #1
 8004d98:	4642      	mov	r2, r8
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b8      	blx	r7
 8004da0:	3001      	adds	r0, #1
 8004da2:	f43f ae74 	beq.w	8004a8e <_printf_float+0xbe>
 8004da6:	ee18 3a10 	vmov	r3, s16
 8004daa:	4652      	mov	r2, sl
 8004dac:	4631      	mov	r1, r6
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	f43f ae6b 	beq.w	8004a8e <_printf_float+0xbe>
 8004db8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004dc4:	f7fb fea0 	bl	8000b08 <__aeabi_dcmpeq>
 8004dc8:	b9d8      	cbnz	r0, 8004e02 <_printf_float+0x432>
 8004dca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004dce:	f108 0201 	add.w	r2, r8, #1
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d10e      	bne.n	8004dfa <_printf_float+0x42a>
 8004ddc:	e657      	b.n	8004a8e <_printf_float+0xbe>
 8004dde:	2301      	movs	r3, #1
 8004de0:	4652      	mov	r2, sl
 8004de2:	4631      	mov	r1, r6
 8004de4:	4628      	mov	r0, r5
 8004de6:	47b8      	blx	r7
 8004de8:	3001      	adds	r0, #1
 8004dea:	f43f ae50 	beq.w	8004a8e <_printf_float+0xbe>
 8004dee:	f108 0801 	add.w	r8, r8, #1
 8004df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df4:	3b01      	subs	r3, #1
 8004df6:	4543      	cmp	r3, r8
 8004df8:	dcf1      	bgt.n	8004dde <_printf_float+0x40e>
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e00:	e6da      	b.n	8004bb8 <_printf_float+0x1e8>
 8004e02:	f04f 0800 	mov.w	r8, #0
 8004e06:	f104 0a1a 	add.w	sl, r4, #26
 8004e0a:	e7f2      	b.n	8004df2 <_printf_float+0x422>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	4642      	mov	r2, r8
 8004e10:	e7df      	b.n	8004dd2 <_printf_float+0x402>
 8004e12:	2301      	movs	r3, #1
 8004e14:	464a      	mov	r2, r9
 8004e16:	4631      	mov	r1, r6
 8004e18:	4628      	mov	r0, r5
 8004e1a:	47b8      	blx	r7
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	f43f ae36 	beq.w	8004a8e <_printf_float+0xbe>
 8004e22:	f108 0801 	add.w	r8, r8, #1
 8004e26:	68e3      	ldr	r3, [r4, #12]
 8004e28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e2a:	1a5b      	subs	r3, r3, r1
 8004e2c:	4543      	cmp	r3, r8
 8004e2e:	dcf0      	bgt.n	8004e12 <_printf_float+0x442>
 8004e30:	e6f8      	b.n	8004c24 <_printf_float+0x254>
 8004e32:	f04f 0800 	mov.w	r8, #0
 8004e36:	f104 0919 	add.w	r9, r4, #25
 8004e3a:	e7f4      	b.n	8004e26 <_printf_float+0x456>

08004e3c <_printf_common>:
 8004e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	4616      	mov	r6, r2
 8004e42:	4699      	mov	r9, r3
 8004e44:	688a      	ldr	r2, [r1, #8]
 8004e46:	690b      	ldr	r3, [r1, #16]
 8004e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	bfb8      	it	lt
 8004e50:	4613      	movlt	r3, r2
 8004e52:	6033      	str	r3, [r6, #0]
 8004e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e58:	4607      	mov	r7, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	b10a      	cbz	r2, 8004e62 <_printf_common+0x26>
 8004e5e:	3301      	adds	r3, #1
 8004e60:	6033      	str	r3, [r6, #0]
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	0699      	lsls	r1, r3, #26
 8004e66:	bf42      	ittt	mi
 8004e68:	6833      	ldrmi	r3, [r6, #0]
 8004e6a:	3302      	addmi	r3, #2
 8004e6c:	6033      	strmi	r3, [r6, #0]
 8004e6e:	6825      	ldr	r5, [r4, #0]
 8004e70:	f015 0506 	ands.w	r5, r5, #6
 8004e74:	d106      	bne.n	8004e84 <_printf_common+0x48>
 8004e76:	f104 0a19 	add.w	sl, r4, #25
 8004e7a:	68e3      	ldr	r3, [r4, #12]
 8004e7c:	6832      	ldr	r2, [r6, #0]
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	42ab      	cmp	r3, r5
 8004e82:	dc26      	bgt.n	8004ed2 <_printf_common+0x96>
 8004e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e88:	1e13      	subs	r3, r2, #0
 8004e8a:	6822      	ldr	r2, [r4, #0]
 8004e8c:	bf18      	it	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	0692      	lsls	r2, r2, #26
 8004e92:	d42b      	bmi.n	8004eec <_printf_common+0xb0>
 8004e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e98:	4649      	mov	r1, r9
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	47c0      	blx	r8
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d01e      	beq.n	8004ee0 <_printf_common+0xa4>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	6922      	ldr	r2, [r4, #16]
 8004ea6:	f003 0306 	and.w	r3, r3, #6
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	bf02      	ittt	eq
 8004eae:	68e5      	ldreq	r5, [r4, #12]
 8004eb0:	6833      	ldreq	r3, [r6, #0]
 8004eb2:	1aed      	subeq	r5, r5, r3
 8004eb4:	68a3      	ldr	r3, [r4, #8]
 8004eb6:	bf0c      	ite	eq
 8004eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ebc:	2500      	movne	r5, #0
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	bfc4      	itt	gt
 8004ec2:	1a9b      	subgt	r3, r3, r2
 8004ec4:	18ed      	addgt	r5, r5, r3
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	341a      	adds	r4, #26
 8004eca:	42b5      	cmp	r5, r6
 8004ecc:	d11a      	bne.n	8004f04 <_printf_common+0xc8>
 8004ece:	2000      	movs	r0, #0
 8004ed0:	e008      	b.n	8004ee4 <_printf_common+0xa8>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4652      	mov	r2, sl
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	4638      	mov	r0, r7
 8004eda:	47c0      	blx	r8
 8004edc:	3001      	adds	r0, #1
 8004ede:	d103      	bne.n	8004ee8 <_printf_common+0xac>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee8:	3501      	adds	r5, #1
 8004eea:	e7c6      	b.n	8004e7a <_printf_common+0x3e>
 8004eec:	18e1      	adds	r1, r4, r3
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	2030      	movs	r0, #48	; 0x30
 8004ef2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ef6:	4422      	add	r2, r4
 8004ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004efc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f00:	3302      	adds	r3, #2
 8004f02:	e7c7      	b.n	8004e94 <_printf_common+0x58>
 8004f04:	2301      	movs	r3, #1
 8004f06:	4622      	mov	r2, r4
 8004f08:	4649      	mov	r1, r9
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	47c0      	blx	r8
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d0e6      	beq.n	8004ee0 <_printf_common+0xa4>
 8004f12:	3601      	adds	r6, #1
 8004f14:	e7d9      	b.n	8004eca <_printf_common+0x8e>
	...

08004f18 <_printf_i>:
 8004f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1c:	7e0f      	ldrb	r7, [r1, #24]
 8004f1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f20:	2f78      	cmp	r7, #120	; 0x78
 8004f22:	4691      	mov	r9, r2
 8004f24:	4680      	mov	r8, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	469a      	mov	sl, r3
 8004f2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f2e:	d807      	bhi.n	8004f40 <_printf_i+0x28>
 8004f30:	2f62      	cmp	r7, #98	; 0x62
 8004f32:	d80a      	bhi.n	8004f4a <_printf_i+0x32>
 8004f34:	2f00      	cmp	r7, #0
 8004f36:	f000 80d4 	beq.w	80050e2 <_printf_i+0x1ca>
 8004f3a:	2f58      	cmp	r7, #88	; 0x58
 8004f3c:	f000 80c0 	beq.w	80050c0 <_printf_i+0x1a8>
 8004f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f48:	e03a      	b.n	8004fc0 <_printf_i+0xa8>
 8004f4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f4e:	2b15      	cmp	r3, #21
 8004f50:	d8f6      	bhi.n	8004f40 <_printf_i+0x28>
 8004f52:	a101      	add	r1, pc, #4	; (adr r1, 8004f58 <_printf_i+0x40>)
 8004f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f58:	08004fb1 	.word	0x08004fb1
 8004f5c:	08004fc5 	.word	0x08004fc5
 8004f60:	08004f41 	.word	0x08004f41
 8004f64:	08004f41 	.word	0x08004f41
 8004f68:	08004f41 	.word	0x08004f41
 8004f6c:	08004f41 	.word	0x08004f41
 8004f70:	08004fc5 	.word	0x08004fc5
 8004f74:	08004f41 	.word	0x08004f41
 8004f78:	08004f41 	.word	0x08004f41
 8004f7c:	08004f41 	.word	0x08004f41
 8004f80:	08004f41 	.word	0x08004f41
 8004f84:	080050c9 	.word	0x080050c9
 8004f88:	08004ff1 	.word	0x08004ff1
 8004f8c:	08005083 	.word	0x08005083
 8004f90:	08004f41 	.word	0x08004f41
 8004f94:	08004f41 	.word	0x08004f41
 8004f98:	080050eb 	.word	0x080050eb
 8004f9c:	08004f41 	.word	0x08004f41
 8004fa0:	08004ff1 	.word	0x08004ff1
 8004fa4:	08004f41 	.word	0x08004f41
 8004fa8:	08004f41 	.word	0x08004f41
 8004fac:	0800508b 	.word	0x0800508b
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	602a      	str	r2, [r5, #0]
 8004fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e09f      	b.n	8005104 <_printf_i+0x1ec>
 8004fc4:	6820      	ldr	r0, [r4, #0]
 8004fc6:	682b      	ldr	r3, [r5, #0]
 8004fc8:	0607      	lsls	r7, r0, #24
 8004fca:	f103 0104 	add.w	r1, r3, #4
 8004fce:	6029      	str	r1, [r5, #0]
 8004fd0:	d501      	bpl.n	8004fd6 <_printf_i+0xbe>
 8004fd2:	681e      	ldr	r6, [r3, #0]
 8004fd4:	e003      	b.n	8004fde <_printf_i+0xc6>
 8004fd6:	0646      	lsls	r6, r0, #25
 8004fd8:	d5fb      	bpl.n	8004fd2 <_printf_i+0xba>
 8004fda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004fde:	2e00      	cmp	r6, #0
 8004fe0:	da03      	bge.n	8004fea <_printf_i+0xd2>
 8004fe2:	232d      	movs	r3, #45	; 0x2d
 8004fe4:	4276      	negs	r6, r6
 8004fe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fea:	485a      	ldr	r0, [pc, #360]	; (8005154 <_printf_i+0x23c>)
 8004fec:	230a      	movs	r3, #10
 8004fee:	e012      	b.n	8005016 <_printf_i+0xfe>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	6820      	ldr	r0, [r4, #0]
 8004ff4:	1d19      	adds	r1, r3, #4
 8004ff6:	6029      	str	r1, [r5, #0]
 8004ff8:	0605      	lsls	r5, r0, #24
 8004ffa:	d501      	bpl.n	8005000 <_printf_i+0xe8>
 8004ffc:	681e      	ldr	r6, [r3, #0]
 8004ffe:	e002      	b.n	8005006 <_printf_i+0xee>
 8005000:	0641      	lsls	r1, r0, #25
 8005002:	d5fb      	bpl.n	8004ffc <_printf_i+0xe4>
 8005004:	881e      	ldrh	r6, [r3, #0]
 8005006:	4853      	ldr	r0, [pc, #332]	; (8005154 <_printf_i+0x23c>)
 8005008:	2f6f      	cmp	r7, #111	; 0x6f
 800500a:	bf0c      	ite	eq
 800500c:	2308      	moveq	r3, #8
 800500e:	230a      	movne	r3, #10
 8005010:	2100      	movs	r1, #0
 8005012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005016:	6865      	ldr	r5, [r4, #4]
 8005018:	60a5      	str	r5, [r4, #8]
 800501a:	2d00      	cmp	r5, #0
 800501c:	bfa2      	ittt	ge
 800501e:	6821      	ldrge	r1, [r4, #0]
 8005020:	f021 0104 	bicge.w	r1, r1, #4
 8005024:	6021      	strge	r1, [r4, #0]
 8005026:	b90e      	cbnz	r6, 800502c <_printf_i+0x114>
 8005028:	2d00      	cmp	r5, #0
 800502a:	d04b      	beq.n	80050c4 <_printf_i+0x1ac>
 800502c:	4615      	mov	r5, r2
 800502e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005032:	fb03 6711 	mls	r7, r3, r1, r6
 8005036:	5dc7      	ldrb	r7, [r0, r7]
 8005038:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800503c:	4637      	mov	r7, r6
 800503e:	42bb      	cmp	r3, r7
 8005040:	460e      	mov	r6, r1
 8005042:	d9f4      	bls.n	800502e <_printf_i+0x116>
 8005044:	2b08      	cmp	r3, #8
 8005046:	d10b      	bne.n	8005060 <_printf_i+0x148>
 8005048:	6823      	ldr	r3, [r4, #0]
 800504a:	07de      	lsls	r6, r3, #31
 800504c:	d508      	bpl.n	8005060 <_printf_i+0x148>
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	6861      	ldr	r1, [r4, #4]
 8005052:	4299      	cmp	r1, r3
 8005054:	bfde      	ittt	le
 8005056:	2330      	movle	r3, #48	; 0x30
 8005058:	f805 3c01 	strble.w	r3, [r5, #-1]
 800505c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005060:	1b52      	subs	r2, r2, r5
 8005062:	6122      	str	r2, [r4, #16]
 8005064:	f8cd a000 	str.w	sl, [sp]
 8005068:	464b      	mov	r3, r9
 800506a:	aa03      	add	r2, sp, #12
 800506c:	4621      	mov	r1, r4
 800506e:	4640      	mov	r0, r8
 8005070:	f7ff fee4 	bl	8004e3c <_printf_common>
 8005074:	3001      	adds	r0, #1
 8005076:	d14a      	bne.n	800510e <_printf_i+0x1f6>
 8005078:	f04f 30ff 	mov.w	r0, #4294967295
 800507c:	b004      	add	sp, #16
 800507e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	f043 0320 	orr.w	r3, r3, #32
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	4833      	ldr	r0, [pc, #204]	; (8005158 <_printf_i+0x240>)
 800508c:	2778      	movs	r7, #120	; 0x78
 800508e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	6829      	ldr	r1, [r5, #0]
 8005096:	061f      	lsls	r7, r3, #24
 8005098:	f851 6b04 	ldr.w	r6, [r1], #4
 800509c:	d402      	bmi.n	80050a4 <_printf_i+0x18c>
 800509e:	065f      	lsls	r7, r3, #25
 80050a0:	bf48      	it	mi
 80050a2:	b2b6      	uxthmi	r6, r6
 80050a4:	07df      	lsls	r7, r3, #31
 80050a6:	bf48      	it	mi
 80050a8:	f043 0320 	orrmi.w	r3, r3, #32
 80050ac:	6029      	str	r1, [r5, #0]
 80050ae:	bf48      	it	mi
 80050b0:	6023      	strmi	r3, [r4, #0]
 80050b2:	b91e      	cbnz	r6, 80050bc <_printf_i+0x1a4>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	f023 0320 	bic.w	r3, r3, #32
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	2310      	movs	r3, #16
 80050be:	e7a7      	b.n	8005010 <_printf_i+0xf8>
 80050c0:	4824      	ldr	r0, [pc, #144]	; (8005154 <_printf_i+0x23c>)
 80050c2:	e7e4      	b.n	800508e <_printf_i+0x176>
 80050c4:	4615      	mov	r5, r2
 80050c6:	e7bd      	b.n	8005044 <_printf_i+0x12c>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	6826      	ldr	r6, [r4, #0]
 80050cc:	6961      	ldr	r1, [r4, #20]
 80050ce:	1d18      	adds	r0, r3, #4
 80050d0:	6028      	str	r0, [r5, #0]
 80050d2:	0635      	lsls	r5, r6, #24
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	d501      	bpl.n	80050dc <_printf_i+0x1c4>
 80050d8:	6019      	str	r1, [r3, #0]
 80050da:	e002      	b.n	80050e2 <_printf_i+0x1ca>
 80050dc:	0670      	lsls	r0, r6, #25
 80050de:	d5fb      	bpl.n	80050d8 <_printf_i+0x1c0>
 80050e0:	8019      	strh	r1, [r3, #0]
 80050e2:	2300      	movs	r3, #0
 80050e4:	6123      	str	r3, [r4, #16]
 80050e6:	4615      	mov	r5, r2
 80050e8:	e7bc      	b.n	8005064 <_printf_i+0x14c>
 80050ea:	682b      	ldr	r3, [r5, #0]
 80050ec:	1d1a      	adds	r2, r3, #4
 80050ee:	602a      	str	r2, [r5, #0]
 80050f0:	681d      	ldr	r5, [r3, #0]
 80050f2:	6862      	ldr	r2, [r4, #4]
 80050f4:	2100      	movs	r1, #0
 80050f6:	4628      	mov	r0, r5
 80050f8:	f7fb f88a 	bl	8000210 <memchr>
 80050fc:	b108      	cbz	r0, 8005102 <_printf_i+0x1ea>
 80050fe:	1b40      	subs	r0, r0, r5
 8005100:	6060      	str	r0, [r4, #4]
 8005102:	6863      	ldr	r3, [r4, #4]
 8005104:	6123      	str	r3, [r4, #16]
 8005106:	2300      	movs	r3, #0
 8005108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510c:	e7aa      	b.n	8005064 <_printf_i+0x14c>
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	462a      	mov	r2, r5
 8005112:	4649      	mov	r1, r9
 8005114:	4640      	mov	r0, r8
 8005116:	47d0      	blx	sl
 8005118:	3001      	adds	r0, #1
 800511a:	d0ad      	beq.n	8005078 <_printf_i+0x160>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	079b      	lsls	r3, r3, #30
 8005120:	d413      	bmi.n	800514a <_printf_i+0x232>
 8005122:	68e0      	ldr	r0, [r4, #12]
 8005124:	9b03      	ldr	r3, [sp, #12]
 8005126:	4298      	cmp	r0, r3
 8005128:	bfb8      	it	lt
 800512a:	4618      	movlt	r0, r3
 800512c:	e7a6      	b.n	800507c <_printf_i+0x164>
 800512e:	2301      	movs	r3, #1
 8005130:	4632      	mov	r2, r6
 8005132:	4649      	mov	r1, r9
 8005134:	4640      	mov	r0, r8
 8005136:	47d0      	blx	sl
 8005138:	3001      	adds	r0, #1
 800513a:	d09d      	beq.n	8005078 <_printf_i+0x160>
 800513c:	3501      	adds	r5, #1
 800513e:	68e3      	ldr	r3, [r4, #12]
 8005140:	9903      	ldr	r1, [sp, #12]
 8005142:	1a5b      	subs	r3, r3, r1
 8005144:	42ab      	cmp	r3, r5
 8005146:	dcf2      	bgt.n	800512e <_printf_i+0x216>
 8005148:	e7eb      	b.n	8005122 <_printf_i+0x20a>
 800514a:	2500      	movs	r5, #0
 800514c:	f104 0619 	add.w	r6, r4, #25
 8005150:	e7f5      	b.n	800513e <_printf_i+0x226>
 8005152:	bf00      	nop
 8005154:	0800a39e 	.word	0x0800a39e
 8005158:	0800a3af 	.word	0x0800a3af

0800515c <_scanf_float>:
 800515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005160:	b087      	sub	sp, #28
 8005162:	4617      	mov	r7, r2
 8005164:	9303      	str	r3, [sp, #12]
 8005166:	688b      	ldr	r3, [r1, #8]
 8005168:	1e5a      	subs	r2, r3, #1
 800516a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800516e:	bf83      	ittte	hi
 8005170:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005174:	195b      	addhi	r3, r3, r5
 8005176:	9302      	strhi	r3, [sp, #8]
 8005178:	2300      	movls	r3, #0
 800517a:	bf86      	itte	hi
 800517c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005180:	608b      	strhi	r3, [r1, #8]
 8005182:	9302      	strls	r3, [sp, #8]
 8005184:	680b      	ldr	r3, [r1, #0]
 8005186:	468b      	mov	fp, r1
 8005188:	2500      	movs	r5, #0
 800518a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800518e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005192:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005196:	4680      	mov	r8, r0
 8005198:	460c      	mov	r4, r1
 800519a:	465e      	mov	r6, fp
 800519c:	46aa      	mov	sl, r5
 800519e:	46a9      	mov	r9, r5
 80051a0:	9501      	str	r5, [sp, #4]
 80051a2:	68a2      	ldr	r2, [r4, #8]
 80051a4:	b152      	cbz	r2, 80051bc <_scanf_float+0x60>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b4e      	cmp	r3, #78	; 0x4e
 80051ac:	d864      	bhi.n	8005278 <_scanf_float+0x11c>
 80051ae:	2b40      	cmp	r3, #64	; 0x40
 80051b0:	d83c      	bhi.n	800522c <_scanf_float+0xd0>
 80051b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80051b6:	b2c8      	uxtb	r0, r1
 80051b8:	280e      	cmp	r0, #14
 80051ba:	d93a      	bls.n	8005232 <_scanf_float+0xd6>
 80051bc:	f1b9 0f00 	cmp.w	r9, #0
 80051c0:	d003      	beq.n	80051ca <_scanf_float+0x6e>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051ce:	f1ba 0f01 	cmp.w	sl, #1
 80051d2:	f200 8113 	bhi.w	80053fc <_scanf_float+0x2a0>
 80051d6:	455e      	cmp	r6, fp
 80051d8:	f200 8105 	bhi.w	80053e6 <_scanf_float+0x28a>
 80051dc:	2501      	movs	r5, #1
 80051de:	4628      	mov	r0, r5
 80051e0:	b007      	add	sp, #28
 80051e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80051ea:	2a0d      	cmp	r2, #13
 80051ec:	d8e6      	bhi.n	80051bc <_scanf_float+0x60>
 80051ee:	a101      	add	r1, pc, #4	; (adr r1, 80051f4 <_scanf_float+0x98>)
 80051f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80051f4:	08005333 	.word	0x08005333
 80051f8:	080051bd 	.word	0x080051bd
 80051fc:	080051bd 	.word	0x080051bd
 8005200:	080051bd 	.word	0x080051bd
 8005204:	08005393 	.word	0x08005393
 8005208:	0800536b 	.word	0x0800536b
 800520c:	080051bd 	.word	0x080051bd
 8005210:	080051bd 	.word	0x080051bd
 8005214:	08005341 	.word	0x08005341
 8005218:	080051bd 	.word	0x080051bd
 800521c:	080051bd 	.word	0x080051bd
 8005220:	080051bd 	.word	0x080051bd
 8005224:	080051bd 	.word	0x080051bd
 8005228:	080052f9 	.word	0x080052f9
 800522c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005230:	e7db      	b.n	80051ea <_scanf_float+0x8e>
 8005232:	290e      	cmp	r1, #14
 8005234:	d8c2      	bhi.n	80051bc <_scanf_float+0x60>
 8005236:	a001      	add	r0, pc, #4	; (adr r0, 800523c <_scanf_float+0xe0>)
 8005238:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800523c:	080052eb 	.word	0x080052eb
 8005240:	080051bd 	.word	0x080051bd
 8005244:	080052eb 	.word	0x080052eb
 8005248:	0800537f 	.word	0x0800537f
 800524c:	080051bd 	.word	0x080051bd
 8005250:	08005299 	.word	0x08005299
 8005254:	080052d5 	.word	0x080052d5
 8005258:	080052d5 	.word	0x080052d5
 800525c:	080052d5 	.word	0x080052d5
 8005260:	080052d5 	.word	0x080052d5
 8005264:	080052d5 	.word	0x080052d5
 8005268:	080052d5 	.word	0x080052d5
 800526c:	080052d5 	.word	0x080052d5
 8005270:	080052d5 	.word	0x080052d5
 8005274:	080052d5 	.word	0x080052d5
 8005278:	2b6e      	cmp	r3, #110	; 0x6e
 800527a:	d809      	bhi.n	8005290 <_scanf_float+0x134>
 800527c:	2b60      	cmp	r3, #96	; 0x60
 800527e:	d8b2      	bhi.n	80051e6 <_scanf_float+0x8a>
 8005280:	2b54      	cmp	r3, #84	; 0x54
 8005282:	d077      	beq.n	8005374 <_scanf_float+0x218>
 8005284:	2b59      	cmp	r3, #89	; 0x59
 8005286:	d199      	bne.n	80051bc <_scanf_float+0x60>
 8005288:	2d07      	cmp	r5, #7
 800528a:	d197      	bne.n	80051bc <_scanf_float+0x60>
 800528c:	2508      	movs	r5, #8
 800528e:	e029      	b.n	80052e4 <_scanf_float+0x188>
 8005290:	2b74      	cmp	r3, #116	; 0x74
 8005292:	d06f      	beq.n	8005374 <_scanf_float+0x218>
 8005294:	2b79      	cmp	r3, #121	; 0x79
 8005296:	e7f6      	b.n	8005286 <_scanf_float+0x12a>
 8005298:	6821      	ldr	r1, [r4, #0]
 800529a:	05c8      	lsls	r0, r1, #23
 800529c:	d51a      	bpl.n	80052d4 <_scanf_float+0x178>
 800529e:	9b02      	ldr	r3, [sp, #8]
 80052a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80052a4:	6021      	str	r1, [r4, #0]
 80052a6:	f109 0901 	add.w	r9, r9, #1
 80052aa:	b11b      	cbz	r3, 80052b4 <_scanf_float+0x158>
 80052ac:	3b01      	subs	r3, #1
 80052ae:	3201      	adds	r2, #1
 80052b0:	9302      	str	r3, [sp, #8]
 80052b2:	60a2      	str	r2, [r4, #8]
 80052b4:	68a3      	ldr	r3, [r4, #8]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	60a3      	str	r3, [r4, #8]
 80052ba:	6923      	ldr	r3, [r4, #16]
 80052bc:	3301      	adds	r3, #1
 80052be:	6123      	str	r3, [r4, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	f340 8084 	ble.w	80053d4 <_scanf_float+0x278>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	3301      	adds	r3, #1
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	e766      	b.n	80051a2 <_scanf_float+0x46>
 80052d4:	eb1a 0f05 	cmn.w	sl, r5
 80052d8:	f47f af70 	bne.w	80051bc <_scanf_float+0x60>
 80052dc:	6822      	ldr	r2, [r4, #0]
 80052de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80052e2:	6022      	str	r2, [r4, #0]
 80052e4:	f806 3b01 	strb.w	r3, [r6], #1
 80052e8:	e7e4      	b.n	80052b4 <_scanf_float+0x158>
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	0610      	lsls	r0, r2, #24
 80052ee:	f57f af65 	bpl.w	80051bc <_scanf_float+0x60>
 80052f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052f6:	e7f4      	b.n	80052e2 <_scanf_float+0x186>
 80052f8:	f1ba 0f00 	cmp.w	sl, #0
 80052fc:	d10e      	bne.n	800531c <_scanf_float+0x1c0>
 80052fe:	f1b9 0f00 	cmp.w	r9, #0
 8005302:	d10e      	bne.n	8005322 <_scanf_float+0x1c6>
 8005304:	6822      	ldr	r2, [r4, #0]
 8005306:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800530a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800530e:	d108      	bne.n	8005322 <_scanf_float+0x1c6>
 8005310:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005314:	6022      	str	r2, [r4, #0]
 8005316:	f04f 0a01 	mov.w	sl, #1
 800531a:	e7e3      	b.n	80052e4 <_scanf_float+0x188>
 800531c:	f1ba 0f02 	cmp.w	sl, #2
 8005320:	d055      	beq.n	80053ce <_scanf_float+0x272>
 8005322:	2d01      	cmp	r5, #1
 8005324:	d002      	beq.n	800532c <_scanf_float+0x1d0>
 8005326:	2d04      	cmp	r5, #4
 8005328:	f47f af48 	bne.w	80051bc <_scanf_float+0x60>
 800532c:	3501      	adds	r5, #1
 800532e:	b2ed      	uxtb	r5, r5
 8005330:	e7d8      	b.n	80052e4 <_scanf_float+0x188>
 8005332:	f1ba 0f01 	cmp.w	sl, #1
 8005336:	f47f af41 	bne.w	80051bc <_scanf_float+0x60>
 800533a:	f04f 0a02 	mov.w	sl, #2
 800533e:	e7d1      	b.n	80052e4 <_scanf_float+0x188>
 8005340:	b97d      	cbnz	r5, 8005362 <_scanf_float+0x206>
 8005342:	f1b9 0f00 	cmp.w	r9, #0
 8005346:	f47f af3c 	bne.w	80051c2 <_scanf_float+0x66>
 800534a:	6822      	ldr	r2, [r4, #0]
 800534c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005350:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005354:	f47f af39 	bne.w	80051ca <_scanf_float+0x6e>
 8005358:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800535c:	6022      	str	r2, [r4, #0]
 800535e:	2501      	movs	r5, #1
 8005360:	e7c0      	b.n	80052e4 <_scanf_float+0x188>
 8005362:	2d03      	cmp	r5, #3
 8005364:	d0e2      	beq.n	800532c <_scanf_float+0x1d0>
 8005366:	2d05      	cmp	r5, #5
 8005368:	e7de      	b.n	8005328 <_scanf_float+0x1cc>
 800536a:	2d02      	cmp	r5, #2
 800536c:	f47f af26 	bne.w	80051bc <_scanf_float+0x60>
 8005370:	2503      	movs	r5, #3
 8005372:	e7b7      	b.n	80052e4 <_scanf_float+0x188>
 8005374:	2d06      	cmp	r5, #6
 8005376:	f47f af21 	bne.w	80051bc <_scanf_float+0x60>
 800537a:	2507      	movs	r5, #7
 800537c:	e7b2      	b.n	80052e4 <_scanf_float+0x188>
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	0591      	lsls	r1, r2, #22
 8005382:	f57f af1b 	bpl.w	80051bc <_scanf_float+0x60>
 8005386:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800538a:	6022      	str	r2, [r4, #0]
 800538c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005390:	e7a8      	b.n	80052e4 <_scanf_float+0x188>
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005398:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800539c:	d006      	beq.n	80053ac <_scanf_float+0x250>
 800539e:	0550      	lsls	r0, r2, #21
 80053a0:	f57f af0c 	bpl.w	80051bc <_scanf_float+0x60>
 80053a4:	f1b9 0f00 	cmp.w	r9, #0
 80053a8:	f43f af0f 	beq.w	80051ca <_scanf_float+0x6e>
 80053ac:	0591      	lsls	r1, r2, #22
 80053ae:	bf58      	it	pl
 80053b0:	9901      	ldrpl	r1, [sp, #4]
 80053b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053b6:	bf58      	it	pl
 80053b8:	eba9 0101 	subpl.w	r1, r9, r1
 80053bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80053c0:	bf58      	it	pl
 80053c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80053c6:	6022      	str	r2, [r4, #0]
 80053c8:	f04f 0900 	mov.w	r9, #0
 80053cc:	e78a      	b.n	80052e4 <_scanf_float+0x188>
 80053ce:	f04f 0a03 	mov.w	sl, #3
 80053d2:	e787      	b.n	80052e4 <_scanf_float+0x188>
 80053d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80053d8:	4639      	mov	r1, r7
 80053da:	4640      	mov	r0, r8
 80053dc:	4798      	blx	r3
 80053de:	2800      	cmp	r0, #0
 80053e0:	f43f aedf 	beq.w	80051a2 <_scanf_float+0x46>
 80053e4:	e6ea      	b.n	80051bc <_scanf_float+0x60>
 80053e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053ee:	463a      	mov	r2, r7
 80053f0:	4640      	mov	r0, r8
 80053f2:	4798      	blx	r3
 80053f4:	6923      	ldr	r3, [r4, #16]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	6123      	str	r3, [r4, #16]
 80053fa:	e6ec      	b.n	80051d6 <_scanf_float+0x7a>
 80053fc:	1e6b      	subs	r3, r5, #1
 80053fe:	2b06      	cmp	r3, #6
 8005400:	d825      	bhi.n	800544e <_scanf_float+0x2f2>
 8005402:	2d02      	cmp	r5, #2
 8005404:	d836      	bhi.n	8005474 <_scanf_float+0x318>
 8005406:	455e      	cmp	r6, fp
 8005408:	f67f aee8 	bls.w	80051dc <_scanf_float+0x80>
 800540c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005410:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005414:	463a      	mov	r2, r7
 8005416:	4640      	mov	r0, r8
 8005418:	4798      	blx	r3
 800541a:	6923      	ldr	r3, [r4, #16]
 800541c:	3b01      	subs	r3, #1
 800541e:	6123      	str	r3, [r4, #16]
 8005420:	e7f1      	b.n	8005406 <_scanf_float+0x2aa>
 8005422:	9802      	ldr	r0, [sp, #8]
 8005424:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005428:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800542c:	9002      	str	r0, [sp, #8]
 800542e:	463a      	mov	r2, r7
 8005430:	4640      	mov	r0, r8
 8005432:	4798      	blx	r3
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	3b01      	subs	r3, #1
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800543e:	fa5f fa8a 	uxtb.w	sl, sl
 8005442:	f1ba 0f02 	cmp.w	sl, #2
 8005446:	d1ec      	bne.n	8005422 <_scanf_float+0x2c6>
 8005448:	3d03      	subs	r5, #3
 800544a:	b2ed      	uxtb	r5, r5
 800544c:	1b76      	subs	r6, r6, r5
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	05da      	lsls	r2, r3, #23
 8005452:	d52f      	bpl.n	80054b4 <_scanf_float+0x358>
 8005454:	055b      	lsls	r3, r3, #21
 8005456:	d510      	bpl.n	800547a <_scanf_float+0x31e>
 8005458:	455e      	cmp	r6, fp
 800545a:	f67f aebf 	bls.w	80051dc <_scanf_float+0x80>
 800545e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005462:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005466:	463a      	mov	r2, r7
 8005468:	4640      	mov	r0, r8
 800546a:	4798      	blx	r3
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	3b01      	subs	r3, #1
 8005470:	6123      	str	r3, [r4, #16]
 8005472:	e7f1      	b.n	8005458 <_scanf_float+0x2fc>
 8005474:	46aa      	mov	sl, r5
 8005476:	9602      	str	r6, [sp, #8]
 8005478:	e7df      	b.n	800543a <_scanf_float+0x2de>
 800547a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800547e:	6923      	ldr	r3, [r4, #16]
 8005480:	2965      	cmp	r1, #101	; 0x65
 8005482:	f103 33ff 	add.w	r3, r3, #4294967295
 8005486:	f106 35ff 	add.w	r5, r6, #4294967295
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	d00c      	beq.n	80054a8 <_scanf_float+0x34c>
 800548e:	2945      	cmp	r1, #69	; 0x45
 8005490:	d00a      	beq.n	80054a8 <_scanf_float+0x34c>
 8005492:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005496:	463a      	mov	r2, r7
 8005498:	4640      	mov	r0, r8
 800549a:	4798      	blx	r3
 800549c:	6923      	ldr	r3, [r4, #16]
 800549e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	1eb5      	subs	r5, r6, #2
 80054a6:	6123      	str	r3, [r4, #16]
 80054a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054ac:	463a      	mov	r2, r7
 80054ae:	4640      	mov	r0, r8
 80054b0:	4798      	blx	r3
 80054b2:	462e      	mov	r6, r5
 80054b4:	6825      	ldr	r5, [r4, #0]
 80054b6:	f015 0510 	ands.w	r5, r5, #16
 80054ba:	d158      	bne.n	800556e <_scanf_float+0x412>
 80054bc:	7035      	strb	r5, [r6, #0]
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c8:	d11c      	bne.n	8005504 <_scanf_float+0x3a8>
 80054ca:	9b01      	ldr	r3, [sp, #4]
 80054cc:	454b      	cmp	r3, r9
 80054ce:	eba3 0209 	sub.w	r2, r3, r9
 80054d2:	d124      	bne.n	800551e <_scanf_float+0x3c2>
 80054d4:	2200      	movs	r2, #0
 80054d6:	4659      	mov	r1, fp
 80054d8:	4640      	mov	r0, r8
 80054da:	f002 fc31 	bl	8007d40 <_strtod_r>
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	6821      	ldr	r1, [r4, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f011 0f02 	tst.w	r1, #2
 80054e8:	ec57 6b10 	vmov	r6, r7, d0
 80054ec:	f103 0204 	add.w	r2, r3, #4
 80054f0:	d020      	beq.n	8005534 <_scanf_float+0x3d8>
 80054f2:	9903      	ldr	r1, [sp, #12]
 80054f4:	600a      	str	r2, [r1, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	e9c3 6700 	strd	r6, r7, [r3]
 80054fc:	68e3      	ldr	r3, [r4, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60e3      	str	r3, [r4, #12]
 8005502:	e66c      	b.n	80051de <_scanf_float+0x82>
 8005504:	9b04      	ldr	r3, [sp, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0e4      	beq.n	80054d4 <_scanf_float+0x378>
 800550a:	9905      	ldr	r1, [sp, #20]
 800550c:	230a      	movs	r3, #10
 800550e:	462a      	mov	r2, r5
 8005510:	3101      	adds	r1, #1
 8005512:	4640      	mov	r0, r8
 8005514:	f002 fc9c 	bl	8007e50 <_strtol_r>
 8005518:	9b04      	ldr	r3, [sp, #16]
 800551a:	9e05      	ldr	r6, [sp, #20]
 800551c:	1ac2      	subs	r2, r0, r3
 800551e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005522:	429e      	cmp	r6, r3
 8005524:	bf28      	it	cs
 8005526:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800552a:	4912      	ldr	r1, [pc, #72]	; (8005574 <_scanf_float+0x418>)
 800552c:	4630      	mov	r0, r6
 800552e:	f000 f8e7 	bl	8005700 <siprintf>
 8005532:	e7cf      	b.n	80054d4 <_scanf_float+0x378>
 8005534:	f011 0f04 	tst.w	r1, #4
 8005538:	9903      	ldr	r1, [sp, #12]
 800553a:	600a      	str	r2, [r1, #0]
 800553c:	d1db      	bne.n	80054f6 <_scanf_float+0x39a>
 800553e:	f8d3 8000 	ldr.w	r8, [r3]
 8005542:	ee10 2a10 	vmov	r2, s0
 8005546:	ee10 0a10 	vmov	r0, s0
 800554a:	463b      	mov	r3, r7
 800554c:	4639      	mov	r1, r7
 800554e:	f7fb fb0d 	bl	8000b6c <__aeabi_dcmpun>
 8005552:	b128      	cbz	r0, 8005560 <_scanf_float+0x404>
 8005554:	4808      	ldr	r0, [pc, #32]	; (8005578 <_scanf_float+0x41c>)
 8005556:	f000 f9b7 	bl	80058c8 <nanf>
 800555a:	ed88 0a00 	vstr	s0, [r8]
 800555e:	e7cd      	b.n	80054fc <_scanf_float+0x3a0>
 8005560:	4630      	mov	r0, r6
 8005562:	4639      	mov	r1, r7
 8005564:	f7fb fb60 	bl	8000c28 <__aeabi_d2f>
 8005568:	f8c8 0000 	str.w	r0, [r8]
 800556c:	e7c6      	b.n	80054fc <_scanf_float+0x3a0>
 800556e:	2500      	movs	r5, #0
 8005570:	e635      	b.n	80051de <_scanf_float+0x82>
 8005572:	bf00      	nop
 8005574:	0800a3c0 	.word	0x0800a3c0
 8005578:	0800a755 	.word	0x0800a755

0800557c <std>:
 800557c:	2300      	movs	r3, #0
 800557e:	b510      	push	{r4, lr}
 8005580:	4604      	mov	r4, r0
 8005582:	e9c0 3300 	strd	r3, r3, [r0]
 8005586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800558a:	6083      	str	r3, [r0, #8]
 800558c:	8181      	strh	r1, [r0, #12]
 800558e:	6643      	str	r3, [r0, #100]	; 0x64
 8005590:	81c2      	strh	r2, [r0, #14]
 8005592:	6183      	str	r3, [r0, #24]
 8005594:	4619      	mov	r1, r3
 8005596:	2208      	movs	r2, #8
 8005598:	305c      	adds	r0, #92	; 0x5c
 800559a:	f000 f914 	bl	80057c6 <memset>
 800559e:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <std+0x58>)
 80055a0:	6263      	str	r3, [r4, #36]	; 0x24
 80055a2:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <std+0x5c>)
 80055a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80055a6:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <std+0x60>)
 80055a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055aa:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <std+0x64>)
 80055ac:	6323      	str	r3, [r4, #48]	; 0x30
 80055ae:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <std+0x68>)
 80055b0:	6224      	str	r4, [r4, #32]
 80055b2:	429c      	cmp	r4, r3
 80055b4:	d006      	beq.n	80055c4 <std+0x48>
 80055b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055ba:	4294      	cmp	r4, r2
 80055bc:	d002      	beq.n	80055c4 <std+0x48>
 80055be:	33d0      	adds	r3, #208	; 0xd0
 80055c0:	429c      	cmp	r4, r3
 80055c2:	d105      	bne.n	80055d0 <std+0x54>
 80055c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055cc:	f000 b978 	b.w	80058c0 <__retarget_lock_init_recursive>
 80055d0:	bd10      	pop	{r4, pc}
 80055d2:	bf00      	nop
 80055d4:	08005741 	.word	0x08005741
 80055d8:	08005763 	.word	0x08005763
 80055dc:	0800579b 	.word	0x0800579b
 80055e0:	080057bf 	.word	0x080057bf
 80055e4:	20001310 	.word	0x20001310

080055e8 <stdio_exit_handler>:
 80055e8:	4a02      	ldr	r2, [pc, #8]	; (80055f4 <stdio_exit_handler+0xc>)
 80055ea:	4903      	ldr	r1, [pc, #12]	; (80055f8 <stdio_exit_handler+0x10>)
 80055ec:	4803      	ldr	r0, [pc, #12]	; (80055fc <stdio_exit_handler+0x14>)
 80055ee:	f000 b869 	b.w	80056c4 <_fwalk_sglue>
 80055f2:	bf00      	nop
 80055f4:	2000000c 	.word	0x2000000c
 80055f8:	08008211 	.word	0x08008211
 80055fc:	20000018 	.word	0x20000018

08005600 <cleanup_stdio>:
 8005600:	6841      	ldr	r1, [r0, #4]
 8005602:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <cleanup_stdio+0x34>)
 8005604:	4299      	cmp	r1, r3
 8005606:	b510      	push	{r4, lr}
 8005608:	4604      	mov	r4, r0
 800560a:	d001      	beq.n	8005610 <cleanup_stdio+0x10>
 800560c:	f002 fe00 	bl	8008210 <_fflush_r>
 8005610:	68a1      	ldr	r1, [r4, #8]
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <cleanup_stdio+0x38>)
 8005614:	4299      	cmp	r1, r3
 8005616:	d002      	beq.n	800561e <cleanup_stdio+0x1e>
 8005618:	4620      	mov	r0, r4
 800561a:	f002 fdf9 	bl	8008210 <_fflush_r>
 800561e:	68e1      	ldr	r1, [r4, #12]
 8005620:	4b06      	ldr	r3, [pc, #24]	; (800563c <cleanup_stdio+0x3c>)
 8005622:	4299      	cmp	r1, r3
 8005624:	d004      	beq.n	8005630 <cleanup_stdio+0x30>
 8005626:	4620      	mov	r0, r4
 8005628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800562c:	f002 bdf0 	b.w	8008210 <_fflush_r>
 8005630:	bd10      	pop	{r4, pc}
 8005632:	bf00      	nop
 8005634:	20001310 	.word	0x20001310
 8005638:	20001378 	.word	0x20001378
 800563c:	200013e0 	.word	0x200013e0

08005640 <global_stdio_init.part.0>:
 8005640:	b510      	push	{r4, lr}
 8005642:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <global_stdio_init.part.0+0x30>)
 8005644:	4c0b      	ldr	r4, [pc, #44]	; (8005674 <global_stdio_init.part.0+0x34>)
 8005646:	4a0c      	ldr	r2, [pc, #48]	; (8005678 <global_stdio_init.part.0+0x38>)
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	4620      	mov	r0, r4
 800564c:	2200      	movs	r2, #0
 800564e:	2104      	movs	r1, #4
 8005650:	f7ff ff94 	bl	800557c <std>
 8005654:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005658:	2201      	movs	r2, #1
 800565a:	2109      	movs	r1, #9
 800565c:	f7ff ff8e 	bl	800557c <std>
 8005660:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005664:	2202      	movs	r2, #2
 8005666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800566a:	2112      	movs	r1, #18
 800566c:	f7ff bf86 	b.w	800557c <std>
 8005670:	20001448 	.word	0x20001448
 8005674:	20001310 	.word	0x20001310
 8005678:	080055e9 	.word	0x080055e9

0800567c <__sfp_lock_acquire>:
 800567c:	4801      	ldr	r0, [pc, #4]	; (8005684 <__sfp_lock_acquire+0x8>)
 800567e:	f000 b920 	b.w	80058c2 <__retarget_lock_acquire_recursive>
 8005682:	bf00      	nop
 8005684:	20001451 	.word	0x20001451

08005688 <__sfp_lock_release>:
 8005688:	4801      	ldr	r0, [pc, #4]	; (8005690 <__sfp_lock_release+0x8>)
 800568a:	f000 b91b 	b.w	80058c4 <__retarget_lock_release_recursive>
 800568e:	bf00      	nop
 8005690:	20001451 	.word	0x20001451

08005694 <__sinit>:
 8005694:	b510      	push	{r4, lr}
 8005696:	4604      	mov	r4, r0
 8005698:	f7ff fff0 	bl	800567c <__sfp_lock_acquire>
 800569c:	6a23      	ldr	r3, [r4, #32]
 800569e:	b11b      	cbz	r3, 80056a8 <__sinit+0x14>
 80056a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a4:	f7ff bff0 	b.w	8005688 <__sfp_lock_release>
 80056a8:	4b04      	ldr	r3, [pc, #16]	; (80056bc <__sinit+0x28>)
 80056aa:	6223      	str	r3, [r4, #32]
 80056ac:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <__sinit+0x2c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f5      	bne.n	80056a0 <__sinit+0xc>
 80056b4:	f7ff ffc4 	bl	8005640 <global_stdio_init.part.0>
 80056b8:	e7f2      	b.n	80056a0 <__sinit+0xc>
 80056ba:	bf00      	nop
 80056bc:	08005601 	.word	0x08005601
 80056c0:	20001448 	.word	0x20001448

080056c4 <_fwalk_sglue>:
 80056c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c8:	4607      	mov	r7, r0
 80056ca:	4688      	mov	r8, r1
 80056cc:	4614      	mov	r4, r2
 80056ce:	2600      	movs	r6, #0
 80056d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056d4:	f1b9 0901 	subs.w	r9, r9, #1
 80056d8:	d505      	bpl.n	80056e6 <_fwalk_sglue+0x22>
 80056da:	6824      	ldr	r4, [r4, #0]
 80056dc:	2c00      	cmp	r4, #0
 80056de:	d1f7      	bne.n	80056d0 <_fwalk_sglue+0xc>
 80056e0:	4630      	mov	r0, r6
 80056e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e6:	89ab      	ldrh	r3, [r5, #12]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d907      	bls.n	80056fc <_fwalk_sglue+0x38>
 80056ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056f0:	3301      	adds	r3, #1
 80056f2:	d003      	beq.n	80056fc <_fwalk_sglue+0x38>
 80056f4:	4629      	mov	r1, r5
 80056f6:	4638      	mov	r0, r7
 80056f8:	47c0      	blx	r8
 80056fa:	4306      	orrs	r6, r0
 80056fc:	3568      	adds	r5, #104	; 0x68
 80056fe:	e7e9      	b.n	80056d4 <_fwalk_sglue+0x10>

08005700 <siprintf>:
 8005700:	b40e      	push	{r1, r2, r3}
 8005702:	b500      	push	{lr}
 8005704:	b09c      	sub	sp, #112	; 0x70
 8005706:	ab1d      	add	r3, sp, #116	; 0x74
 8005708:	9002      	str	r0, [sp, #8]
 800570a:	9006      	str	r0, [sp, #24]
 800570c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005710:	4809      	ldr	r0, [pc, #36]	; (8005738 <siprintf+0x38>)
 8005712:	9107      	str	r1, [sp, #28]
 8005714:	9104      	str	r1, [sp, #16]
 8005716:	4909      	ldr	r1, [pc, #36]	; (800573c <siprintf+0x3c>)
 8005718:	f853 2b04 	ldr.w	r2, [r3], #4
 800571c:	9105      	str	r1, [sp, #20]
 800571e:	6800      	ldr	r0, [r0, #0]
 8005720:	9301      	str	r3, [sp, #4]
 8005722:	a902      	add	r1, sp, #8
 8005724:	f002 fbf0 	bl	8007f08 <_svfiprintf_r>
 8005728:	9b02      	ldr	r3, [sp, #8]
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	b01c      	add	sp, #112	; 0x70
 8005730:	f85d eb04 	ldr.w	lr, [sp], #4
 8005734:	b003      	add	sp, #12
 8005736:	4770      	bx	lr
 8005738:	20000064 	.word	0x20000064
 800573c:	ffff0208 	.word	0xffff0208

08005740 <__sread>:
 8005740:	b510      	push	{r4, lr}
 8005742:	460c      	mov	r4, r1
 8005744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005748:	f000 f86c 	bl	8005824 <_read_r>
 800574c:	2800      	cmp	r0, #0
 800574e:	bfab      	itete	ge
 8005750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005752:	89a3      	ldrhlt	r3, [r4, #12]
 8005754:	181b      	addge	r3, r3, r0
 8005756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800575a:	bfac      	ite	ge
 800575c:	6563      	strge	r3, [r4, #84]	; 0x54
 800575e:	81a3      	strhlt	r3, [r4, #12]
 8005760:	bd10      	pop	{r4, pc}

08005762 <__swrite>:
 8005762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005766:	461f      	mov	r7, r3
 8005768:	898b      	ldrh	r3, [r1, #12]
 800576a:	05db      	lsls	r3, r3, #23
 800576c:	4605      	mov	r5, r0
 800576e:	460c      	mov	r4, r1
 8005770:	4616      	mov	r6, r2
 8005772:	d505      	bpl.n	8005780 <__swrite+0x1e>
 8005774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005778:	2302      	movs	r3, #2
 800577a:	2200      	movs	r2, #0
 800577c:	f000 f840 	bl	8005800 <_lseek_r>
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800578a:	81a3      	strh	r3, [r4, #12]
 800578c:	4632      	mov	r2, r6
 800578e:	463b      	mov	r3, r7
 8005790:	4628      	mov	r0, r5
 8005792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005796:	f000 b857 	b.w	8005848 <_write_r>

0800579a <__sseek>:
 800579a:	b510      	push	{r4, lr}
 800579c:	460c      	mov	r4, r1
 800579e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a2:	f000 f82d 	bl	8005800 <_lseek_r>
 80057a6:	1c43      	adds	r3, r0, #1
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	bf15      	itete	ne
 80057ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80057ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057b6:	81a3      	strheq	r3, [r4, #12]
 80057b8:	bf18      	it	ne
 80057ba:	81a3      	strhne	r3, [r4, #12]
 80057bc:	bd10      	pop	{r4, pc}

080057be <__sclose>:
 80057be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c2:	f000 b80d 	b.w	80057e0 <_close_r>

080057c6 <memset>:
 80057c6:	4402      	add	r2, r0
 80057c8:	4603      	mov	r3, r0
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d100      	bne.n	80057d0 <memset+0xa>
 80057ce:	4770      	bx	lr
 80057d0:	f803 1b01 	strb.w	r1, [r3], #1
 80057d4:	e7f9      	b.n	80057ca <memset+0x4>
	...

080057d8 <_localeconv_r>:
 80057d8:	4800      	ldr	r0, [pc, #0]	; (80057dc <_localeconv_r+0x4>)
 80057da:	4770      	bx	lr
 80057dc:	20000158 	.word	0x20000158

080057e0 <_close_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	4d06      	ldr	r5, [pc, #24]	; (80057fc <_close_r+0x1c>)
 80057e4:	2300      	movs	r3, #0
 80057e6:	4604      	mov	r4, r0
 80057e8:	4608      	mov	r0, r1
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	f7fc fa5d 	bl	8001caa <_close>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d102      	bne.n	80057fa <_close_r+0x1a>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	b103      	cbz	r3, 80057fa <_close_r+0x1a>
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	2000144c 	.word	0x2000144c

08005800 <_lseek_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4d07      	ldr	r5, [pc, #28]	; (8005820 <_lseek_r+0x20>)
 8005804:	4604      	mov	r4, r0
 8005806:	4608      	mov	r0, r1
 8005808:	4611      	mov	r1, r2
 800580a:	2200      	movs	r2, #0
 800580c:	602a      	str	r2, [r5, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	f7fc fa72 	bl	8001cf8 <_lseek>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_lseek_r+0x1e>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	b103      	cbz	r3, 800581e <_lseek_r+0x1e>
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	2000144c 	.word	0x2000144c

08005824 <_read_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4d07      	ldr	r5, [pc, #28]	; (8005844 <_read_r+0x20>)
 8005828:	4604      	mov	r4, r0
 800582a:	4608      	mov	r0, r1
 800582c:	4611      	mov	r1, r2
 800582e:	2200      	movs	r2, #0
 8005830:	602a      	str	r2, [r5, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	f7fc fa00 	bl	8001c38 <_read>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d102      	bne.n	8005842 <_read_r+0x1e>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b103      	cbz	r3, 8005842 <_read_r+0x1e>
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	2000144c 	.word	0x2000144c

08005848 <_write_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4d07      	ldr	r5, [pc, #28]	; (8005868 <_write_r+0x20>)
 800584c:	4604      	mov	r4, r0
 800584e:	4608      	mov	r0, r1
 8005850:	4611      	mov	r1, r2
 8005852:	2200      	movs	r2, #0
 8005854:	602a      	str	r2, [r5, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	f7fc fa0b 	bl	8001c72 <_write>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_write_r+0x1e>
 8005860:	682b      	ldr	r3, [r5, #0]
 8005862:	b103      	cbz	r3, 8005866 <_write_r+0x1e>
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	2000144c 	.word	0x2000144c

0800586c <__errno>:
 800586c:	4b01      	ldr	r3, [pc, #4]	; (8005874 <__errno+0x8>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000064 	.word	0x20000064

08005878 <__libc_init_array>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	4d0d      	ldr	r5, [pc, #52]	; (80058b0 <__libc_init_array+0x38>)
 800587c:	4c0d      	ldr	r4, [pc, #52]	; (80058b4 <__libc_init_array+0x3c>)
 800587e:	1b64      	subs	r4, r4, r5
 8005880:	10a4      	asrs	r4, r4, #2
 8005882:	2600      	movs	r6, #0
 8005884:	42a6      	cmp	r6, r4
 8005886:	d109      	bne.n	800589c <__libc_init_array+0x24>
 8005888:	4d0b      	ldr	r5, [pc, #44]	; (80058b8 <__libc_init_array+0x40>)
 800588a:	4c0c      	ldr	r4, [pc, #48]	; (80058bc <__libc_init_array+0x44>)
 800588c:	f004 fd0c 	bl	800a2a8 <_init>
 8005890:	1b64      	subs	r4, r4, r5
 8005892:	10a4      	asrs	r4, r4, #2
 8005894:	2600      	movs	r6, #0
 8005896:	42a6      	cmp	r6, r4
 8005898:	d105      	bne.n	80058a6 <__libc_init_array+0x2e>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a0:	4798      	blx	r3
 80058a2:	3601      	adds	r6, #1
 80058a4:	e7ee      	b.n	8005884 <__libc_init_array+0xc>
 80058a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058aa:	4798      	blx	r3
 80058ac:	3601      	adds	r6, #1
 80058ae:	e7f2      	b.n	8005896 <__libc_init_array+0x1e>
 80058b0:	0800a7f0 	.word	0x0800a7f0
 80058b4:	0800a7f0 	.word	0x0800a7f0
 80058b8:	0800a7f0 	.word	0x0800a7f0
 80058bc:	0800a7f4 	.word	0x0800a7f4

080058c0 <__retarget_lock_init_recursive>:
 80058c0:	4770      	bx	lr

080058c2 <__retarget_lock_acquire_recursive>:
 80058c2:	4770      	bx	lr

080058c4 <__retarget_lock_release_recursive>:
 80058c4:	4770      	bx	lr
	...

080058c8 <nanf>:
 80058c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80058d0 <nanf+0x8>
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	7fc00000 	.word	0x7fc00000

080058d4 <quorem>:
 80058d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d8:	6903      	ldr	r3, [r0, #16]
 80058da:	690c      	ldr	r4, [r1, #16]
 80058dc:	42a3      	cmp	r3, r4
 80058de:	4607      	mov	r7, r0
 80058e0:	db7e      	blt.n	80059e0 <quorem+0x10c>
 80058e2:	3c01      	subs	r4, #1
 80058e4:	f101 0814 	add.w	r8, r1, #20
 80058e8:	f100 0514 	add.w	r5, r0, #20
 80058ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80058f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058fa:	3301      	adds	r3, #1
 80058fc:	429a      	cmp	r2, r3
 80058fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005902:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005906:	fbb2 f6f3 	udiv	r6, r2, r3
 800590a:	d331      	bcc.n	8005970 <quorem+0x9c>
 800590c:	f04f 0e00 	mov.w	lr, #0
 8005910:	4640      	mov	r0, r8
 8005912:	46ac      	mov	ip, r5
 8005914:	46f2      	mov	sl, lr
 8005916:	f850 2b04 	ldr.w	r2, [r0], #4
 800591a:	b293      	uxth	r3, r2
 800591c:	fb06 e303 	mla	r3, r6, r3, lr
 8005920:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005924:	0c1a      	lsrs	r2, r3, #16
 8005926:	b29b      	uxth	r3, r3
 8005928:	ebaa 0303 	sub.w	r3, sl, r3
 800592c:	f8dc a000 	ldr.w	sl, [ip]
 8005930:	fa13 f38a 	uxtah	r3, r3, sl
 8005934:	fb06 220e 	mla	r2, r6, lr, r2
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	9b00      	ldr	r3, [sp, #0]
 800593c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005940:	b292      	uxth	r2, r2
 8005942:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005946:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800594a:	f8bd 3000 	ldrh.w	r3, [sp]
 800594e:	4581      	cmp	r9, r0
 8005950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005954:	f84c 3b04 	str.w	r3, [ip], #4
 8005958:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800595c:	d2db      	bcs.n	8005916 <quorem+0x42>
 800595e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005962:	b92b      	cbnz	r3, 8005970 <quorem+0x9c>
 8005964:	9b01      	ldr	r3, [sp, #4]
 8005966:	3b04      	subs	r3, #4
 8005968:	429d      	cmp	r5, r3
 800596a:	461a      	mov	r2, r3
 800596c:	d32c      	bcc.n	80059c8 <quorem+0xf4>
 800596e:	613c      	str	r4, [r7, #16]
 8005970:	4638      	mov	r0, r7
 8005972:	f001 f9f1 	bl	8006d58 <__mcmp>
 8005976:	2800      	cmp	r0, #0
 8005978:	db22      	blt.n	80059c0 <quorem+0xec>
 800597a:	3601      	adds	r6, #1
 800597c:	4629      	mov	r1, r5
 800597e:	2000      	movs	r0, #0
 8005980:	f858 2b04 	ldr.w	r2, [r8], #4
 8005984:	f8d1 c000 	ldr.w	ip, [r1]
 8005988:	b293      	uxth	r3, r2
 800598a:	1ac3      	subs	r3, r0, r3
 800598c:	0c12      	lsrs	r2, r2, #16
 800598e:	fa13 f38c 	uxtah	r3, r3, ip
 8005992:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005996:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800599a:	b29b      	uxth	r3, r3
 800599c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059a0:	45c1      	cmp	r9, r8
 80059a2:	f841 3b04 	str.w	r3, [r1], #4
 80059a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059aa:	d2e9      	bcs.n	8005980 <quorem+0xac>
 80059ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059b4:	b922      	cbnz	r2, 80059c0 <quorem+0xec>
 80059b6:	3b04      	subs	r3, #4
 80059b8:	429d      	cmp	r5, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	d30a      	bcc.n	80059d4 <quorem+0x100>
 80059be:	613c      	str	r4, [r7, #16]
 80059c0:	4630      	mov	r0, r6
 80059c2:	b003      	add	sp, #12
 80059c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c8:	6812      	ldr	r2, [r2, #0]
 80059ca:	3b04      	subs	r3, #4
 80059cc:	2a00      	cmp	r2, #0
 80059ce:	d1ce      	bne.n	800596e <quorem+0x9a>
 80059d0:	3c01      	subs	r4, #1
 80059d2:	e7c9      	b.n	8005968 <quorem+0x94>
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	3b04      	subs	r3, #4
 80059d8:	2a00      	cmp	r2, #0
 80059da:	d1f0      	bne.n	80059be <quorem+0xea>
 80059dc:	3c01      	subs	r4, #1
 80059de:	e7eb      	b.n	80059b8 <quorem+0xe4>
 80059e0:	2000      	movs	r0, #0
 80059e2:	e7ee      	b.n	80059c2 <quorem+0xee>
 80059e4:	0000      	movs	r0, r0
	...

080059e8 <_dtoa_r>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	ed2d 8b04 	vpush	{d8-d9}
 80059f0:	69c5      	ldr	r5, [r0, #28]
 80059f2:	b093      	sub	sp, #76	; 0x4c
 80059f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80059f8:	ec57 6b10 	vmov	r6, r7, d0
 80059fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a00:	9107      	str	r1, [sp, #28]
 8005a02:	4604      	mov	r4, r0
 8005a04:	920a      	str	r2, [sp, #40]	; 0x28
 8005a06:	930d      	str	r3, [sp, #52]	; 0x34
 8005a08:	b975      	cbnz	r5, 8005a28 <_dtoa_r+0x40>
 8005a0a:	2010      	movs	r0, #16
 8005a0c:	f000 fe2a 	bl	8006664 <malloc>
 8005a10:	4602      	mov	r2, r0
 8005a12:	61e0      	str	r0, [r4, #28]
 8005a14:	b920      	cbnz	r0, 8005a20 <_dtoa_r+0x38>
 8005a16:	4bae      	ldr	r3, [pc, #696]	; (8005cd0 <_dtoa_r+0x2e8>)
 8005a18:	21ef      	movs	r1, #239	; 0xef
 8005a1a:	48ae      	ldr	r0, [pc, #696]	; (8005cd4 <_dtoa_r+0x2ec>)
 8005a1c:	f002 fc74 	bl	8008308 <__assert_func>
 8005a20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a24:	6005      	str	r5, [r0, #0]
 8005a26:	60c5      	str	r5, [r0, #12]
 8005a28:	69e3      	ldr	r3, [r4, #28]
 8005a2a:	6819      	ldr	r1, [r3, #0]
 8005a2c:	b151      	cbz	r1, 8005a44 <_dtoa_r+0x5c>
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	604a      	str	r2, [r1, #4]
 8005a32:	2301      	movs	r3, #1
 8005a34:	4093      	lsls	r3, r2
 8005a36:	608b      	str	r3, [r1, #8]
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 ff07 	bl	800684c <_Bfree>
 8005a3e:	69e3      	ldr	r3, [r4, #28]
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	1e3b      	subs	r3, r7, #0
 8005a46:	bfbb      	ittet	lt
 8005a48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a4c:	9303      	strlt	r3, [sp, #12]
 8005a4e:	2300      	movge	r3, #0
 8005a50:	2201      	movlt	r2, #1
 8005a52:	bfac      	ite	ge
 8005a54:	f8c8 3000 	strge.w	r3, [r8]
 8005a58:	f8c8 2000 	strlt.w	r2, [r8]
 8005a5c:	4b9e      	ldr	r3, [pc, #632]	; (8005cd8 <_dtoa_r+0x2f0>)
 8005a5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a62:	ea33 0308 	bics.w	r3, r3, r8
 8005a66:	d11b      	bne.n	8005aa0 <_dtoa_r+0xb8>
 8005a68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005a74:	4333      	orrs	r3, r6
 8005a76:	f000 8593 	beq.w	80065a0 <_dtoa_r+0xbb8>
 8005a7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a7c:	b963      	cbnz	r3, 8005a98 <_dtoa_r+0xb0>
 8005a7e:	4b97      	ldr	r3, [pc, #604]	; (8005cdc <_dtoa_r+0x2f4>)
 8005a80:	e027      	b.n	8005ad2 <_dtoa_r+0xea>
 8005a82:	4b97      	ldr	r3, [pc, #604]	; (8005ce0 <_dtoa_r+0x2f8>)
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	9800      	ldr	r0, [sp, #0]
 8005a8e:	b013      	add	sp, #76	; 0x4c
 8005a90:	ecbd 8b04 	vpop	{d8-d9}
 8005a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a98:	4b90      	ldr	r3, [pc, #576]	; (8005cdc <_dtoa_r+0x2f4>)
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	3303      	adds	r3, #3
 8005a9e:	e7f3      	b.n	8005a88 <_dtoa_r+0xa0>
 8005aa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	ec51 0b17 	vmov	r0, r1, d7
 8005aaa:	eeb0 8a47 	vmov.f32	s16, s14
 8005aae:	eef0 8a67 	vmov.f32	s17, s15
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f7fb f828 	bl	8000b08 <__aeabi_dcmpeq>
 8005ab8:	4681      	mov	r9, r0
 8005aba:	b160      	cbz	r0, 8005ad6 <_dtoa_r+0xee>
 8005abc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005abe:	2301      	movs	r3, #1
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8568 	beq.w	800659a <_dtoa_r+0xbb2>
 8005aca:	4b86      	ldr	r3, [pc, #536]	; (8005ce4 <_dtoa_r+0x2fc>)
 8005acc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	e7da      	b.n	8005a8c <_dtoa_r+0xa4>
 8005ad6:	aa10      	add	r2, sp, #64	; 0x40
 8005ad8:	a911      	add	r1, sp, #68	; 0x44
 8005ada:	4620      	mov	r0, r4
 8005adc:	eeb0 0a48 	vmov.f32	s0, s16
 8005ae0:	eef0 0a68 	vmov.f32	s1, s17
 8005ae4:	f001 fa4e 	bl	8006f84 <__d2b>
 8005ae8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005aec:	4682      	mov	sl, r0
 8005aee:	2d00      	cmp	r5, #0
 8005af0:	d07f      	beq.n	8005bf2 <_dtoa_r+0x20a>
 8005af2:	ee18 3a90 	vmov	r3, s17
 8005af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005afa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005afe:	ec51 0b18 	vmov	r0, r1, d8
 8005b02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b0a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005b0e:	4619      	mov	r1, r3
 8005b10:	2200      	movs	r2, #0
 8005b12:	4b75      	ldr	r3, [pc, #468]	; (8005ce8 <_dtoa_r+0x300>)
 8005b14:	f7fa fbd8 	bl	80002c8 <__aeabi_dsub>
 8005b18:	a367      	add	r3, pc, #412	; (adr r3, 8005cb8 <_dtoa_r+0x2d0>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	f7fa fd8b 	bl	8000638 <__aeabi_dmul>
 8005b22:	a367      	add	r3, pc, #412	; (adr r3, 8005cc0 <_dtoa_r+0x2d8>)
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa fbd0 	bl	80002cc <__adddf3>
 8005b2c:	4606      	mov	r6, r0
 8005b2e:	4628      	mov	r0, r5
 8005b30:	460f      	mov	r7, r1
 8005b32:	f7fa fd17 	bl	8000564 <__aeabi_i2d>
 8005b36:	a364      	add	r3, pc, #400	; (adr r3, 8005cc8 <_dtoa_r+0x2e0>)
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f7fa fd7c 	bl	8000638 <__aeabi_dmul>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa fbc0 	bl	80002cc <__adddf3>
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	460f      	mov	r7, r1
 8005b50:	f7fb f822 	bl	8000b98 <__aeabi_d2iz>
 8005b54:	2200      	movs	r2, #0
 8005b56:	4683      	mov	fp, r0
 8005b58:	2300      	movs	r3, #0
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	f7fa ffdd 	bl	8000b1c <__aeabi_dcmplt>
 8005b62:	b148      	cbz	r0, 8005b78 <_dtoa_r+0x190>
 8005b64:	4658      	mov	r0, fp
 8005b66:	f7fa fcfd 	bl	8000564 <__aeabi_i2d>
 8005b6a:	4632      	mov	r2, r6
 8005b6c:	463b      	mov	r3, r7
 8005b6e:	f7fa ffcb 	bl	8000b08 <__aeabi_dcmpeq>
 8005b72:	b908      	cbnz	r0, 8005b78 <_dtoa_r+0x190>
 8005b74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b78:	f1bb 0f16 	cmp.w	fp, #22
 8005b7c:	d857      	bhi.n	8005c2e <_dtoa_r+0x246>
 8005b7e:	4b5b      	ldr	r3, [pc, #364]	; (8005cec <_dtoa_r+0x304>)
 8005b80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	ec51 0b18 	vmov	r0, r1, d8
 8005b8c:	f7fa ffc6 	bl	8000b1c <__aeabi_dcmplt>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d04e      	beq.n	8005c32 <_dtoa_r+0x24a>
 8005b94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b98:	2300      	movs	r3, #0
 8005b9a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b9e:	1b5b      	subs	r3, r3, r5
 8005ba0:	1e5a      	subs	r2, r3, #1
 8005ba2:	bf45      	ittet	mi
 8005ba4:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ba8:	9305      	strmi	r3, [sp, #20]
 8005baa:	2300      	movpl	r3, #0
 8005bac:	2300      	movmi	r3, #0
 8005bae:	9206      	str	r2, [sp, #24]
 8005bb0:	bf54      	ite	pl
 8005bb2:	9305      	strpl	r3, [sp, #20]
 8005bb4:	9306      	strmi	r3, [sp, #24]
 8005bb6:	f1bb 0f00 	cmp.w	fp, #0
 8005bba:	db3c      	blt.n	8005c36 <_dtoa_r+0x24e>
 8005bbc:	9b06      	ldr	r3, [sp, #24]
 8005bbe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005bc2:	445b      	add	r3, fp
 8005bc4:	9306      	str	r3, [sp, #24]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	9308      	str	r3, [sp, #32]
 8005bca:	9b07      	ldr	r3, [sp, #28]
 8005bcc:	2b09      	cmp	r3, #9
 8005bce:	d868      	bhi.n	8005ca2 <_dtoa_r+0x2ba>
 8005bd0:	2b05      	cmp	r3, #5
 8005bd2:	bfc4      	itt	gt
 8005bd4:	3b04      	subgt	r3, #4
 8005bd6:	9307      	strgt	r3, [sp, #28]
 8005bd8:	9b07      	ldr	r3, [sp, #28]
 8005bda:	f1a3 0302 	sub.w	r3, r3, #2
 8005bde:	bfcc      	ite	gt
 8005be0:	2500      	movgt	r5, #0
 8005be2:	2501      	movle	r5, #1
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	f200 8085 	bhi.w	8005cf4 <_dtoa_r+0x30c>
 8005bea:	e8df f003 	tbb	[pc, r3]
 8005bee:	3b2e      	.short	0x3b2e
 8005bf0:	5839      	.short	0x5839
 8005bf2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005bf6:	441d      	add	r5, r3
 8005bf8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005bfc:	2b20      	cmp	r3, #32
 8005bfe:	bfc1      	itttt	gt
 8005c00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c04:	fa08 f803 	lslgt.w	r8, r8, r3
 8005c08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005c0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005c10:	bfd6      	itet	le
 8005c12:	f1c3 0320 	rsble	r3, r3, #32
 8005c16:	ea48 0003 	orrgt.w	r0, r8, r3
 8005c1a:	fa06 f003 	lslle.w	r0, r6, r3
 8005c1e:	f7fa fc91 	bl	8000544 <__aeabi_ui2d>
 8005c22:	2201      	movs	r2, #1
 8005c24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005c28:	3d01      	subs	r5, #1
 8005c2a:	920e      	str	r2, [sp, #56]	; 0x38
 8005c2c:	e76f      	b.n	8005b0e <_dtoa_r+0x126>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e7b3      	b.n	8005b9a <_dtoa_r+0x1b2>
 8005c32:	900c      	str	r0, [sp, #48]	; 0x30
 8005c34:	e7b2      	b.n	8005b9c <_dtoa_r+0x1b4>
 8005c36:	9b05      	ldr	r3, [sp, #20]
 8005c38:	eba3 030b 	sub.w	r3, r3, fp
 8005c3c:	9305      	str	r3, [sp, #20]
 8005c3e:	f1cb 0300 	rsb	r3, fp, #0
 8005c42:	9308      	str	r3, [sp, #32]
 8005c44:	2300      	movs	r3, #0
 8005c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c48:	e7bf      	b.n	8005bca <_dtoa_r+0x1e2>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	dc52      	bgt.n	8005cfa <_dtoa_r+0x312>
 8005c54:	2301      	movs	r3, #1
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	920a      	str	r2, [sp, #40]	; 0x28
 8005c5e:	e00b      	b.n	8005c78 <_dtoa_r+0x290>
 8005c60:	2301      	movs	r3, #1
 8005c62:	e7f3      	b.n	8005c4c <_dtoa_r+0x264>
 8005c64:	2300      	movs	r3, #0
 8005c66:	9309      	str	r3, [sp, #36]	; 0x24
 8005c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c6a:	445b      	add	r3, fp
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	bfb8      	it	lt
 8005c76:	2301      	movlt	r3, #1
 8005c78:	69e0      	ldr	r0, [r4, #28]
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	f102 0614 	add.w	r6, r2, #20
 8005c82:	429e      	cmp	r6, r3
 8005c84:	d93d      	bls.n	8005d02 <_dtoa_r+0x31a>
 8005c86:	6041      	str	r1, [r0, #4]
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 fd9f 	bl	80067cc <_Balloc>
 8005c8e:	9000      	str	r0, [sp, #0]
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d139      	bne.n	8005d08 <_dtoa_r+0x320>
 8005c94:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <_dtoa_r+0x308>)
 8005c96:	4602      	mov	r2, r0
 8005c98:	f240 11af 	movw	r1, #431	; 0x1af
 8005c9c:	e6bd      	b.n	8005a1a <_dtoa_r+0x32>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e7e1      	b.n	8005c66 <_dtoa_r+0x27e>
 8005ca2:	2501      	movs	r5, #1
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	9307      	str	r3, [sp, #28]
 8005ca8:	9509      	str	r5, [sp, #36]	; 0x24
 8005caa:	f04f 33ff 	mov.w	r3, #4294967295
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	9304      	str	r3, [sp, #16]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2312      	movs	r3, #18
 8005cb6:	e7d1      	b.n	8005c5c <_dtoa_r+0x274>
 8005cb8:	636f4361 	.word	0x636f4361
 8005cbc:	3fd287a7 	.word	0x3fd287a7
 8005cc0:	8b60c8b3 	.word	0x8b60c8b3
 8005cc4:	3fc68a28 	.word	0x3fc68a28
 8005cc8:	509f79fb 	.word	0x509f79fb
 8005ccc:	3fd34413 	.word	0x3fd34413
 8005cd0:	0800a3d2 	.word	0x0800a3d2
 8005cd4:	0800a3e9 	.word	0x0800a3e9
 8005cd8:	7ff00000 	.word	0x7ff00000
 8005cdc:	0800a3ce 	.word	0x0800a3ce
 8005ce0:	0800a3c5 	.word	0x0800a3c5
 8005ce4:	0800a39d 	.word	0x0800a39d
 8005ce8:	3ff80000 	.word	0x3ff80000
 8005cec:	0800a4d8 	.word	0x0800a4d8
 8005cf0:	0800a441 	.word	0x0800a441
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf8:	e7d7      	b.n	8005caa <_dtoa_r+0x2c2>
 8005cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	9304      	str	r3, [sp, #16]
 8005d00:	e7ba      	b.n	8005c78 <_dtoa_r+0x290>
 8005d02:	3101      	adds	r1, #1
 8005d04:	0052      	lsls	r2, r2, #1
 8005d06:	e7ba      	b.n	8005c7e <_dtoa_r+0x296>
 8005d08:	69e3      	ldr	r3, [r4, #28]
 8005d0a:	9a00      	ldr	r2, [sp, #0]
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	9b04      	ldr	r3, [sp, #16]
 8005d10:	2b0e      	cmp	r3, #14
 8005d12:	f200 80a8 	bhi.w	8005e66 <_dtoa_r+0x47e>
 8005d16:	2d00      	cmp	r5, #0
 8005d18:	f000 80a5 	beq.w	8005e66 <_dtoa_r+0x47e>
 8005d1c:	f1bb 0f00 	cmp.w	fp, #0
 8005d20:	dd38      	ble.n	8005d94 <_dtoa_r+0x3ac>
 8005d22:	4bc0      	ldr	r3, [pc, #768]	; (8006024 <_dtoa_r+0x63c>)
 8005d24:	f00b 020f 	and.w	r2, fp, #15
 8005d28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005d34:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005d38:	d019      	beq.n	8005d6e <_dtoa_r+0x386>
 8005d3a:	4bbb      	ldr	r3, [pc, #748]	; (8006028 <_dtoa_r+0x640>)
 8005d3c:	ec51 0b18 	vmov	r0, r1, d8
 8005d40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d44:	f7fa fda2 	bl	800088c <__aeabi_ddiv>
 8005d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d4c:	f008 080f 	and.w	r8, r8, #15
 8005d50:	2503      	movs	r5, #3
 8005d52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006028 <_dtoa_r+0x640>
 8005d56:	f1b8 0f00 	cmp.w	r8, #0
 8005d5a:	d10a      	bne.n	8005d72 <_dtoa_r+0x38a>
 8005d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d60:	4632      	mov	r2, r6
 8005d62:	463b      	mov	r3, r7
 8005d64:	f7fa fd92 	bl	800088c <__aeabi_ddiv>
 8005d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d6c:	e02b      	b.n	8005dc6 <_dtoa_r+0x3de>
 8005d6e:	2502      	movs	r5, #2
 8005d70:	e7ef      	b.n	8005d52 <_dtoa_r+0x36a>
 8005d72:	f018 0f01 	tst.w	r8, #1
 8005d76:	d008      	beq.n	8005d8a <_dtoa_r+0x3a2>
 8005d78:	4630      	mov	r0, r6
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005d80:	f7fa fc5a 	bl	8000638 <__aeabi_dmul>
 8005d84:	3501      	adds	r5, #1
 8005d86:	4606      	mov	r6, r0
 8005d88:	460f      	mov	r7, r1
 8005d8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005d8e:	f109 0908 	add.w	r9, r9, #8
 8005d92:	e7e0      	b.n	8005d56 <_dtoa_r+0x36e>
 8005d94:	f000 809f 	beq.w	8005ed6 <_dtoa_r+0x4ee>
 8005d98:	f1cb 0600 	rsb	r6, fp, #0
 8005d9c:	4ba1      	ldr	r3, [pc, #644]	; (8006024 <_dtoa_r+0x63c>)
 8005d9e:	4fa2      	ldr	r7, [pc, #648]	; (8006028 <_dtoa_r+0x640>)
 8005da0:	f006 020f 	and.w	r2, r6, #15
 8005da4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	ec51 0b18 	vmov	r0, r1, d8
 8005db0:	f7fa fc42 	bl	8000638 <__aeabi_dmul>
 8005db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005db8:	1136      	asrs	r6, r6, #4
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2502      	movs	r5, #2
 8005dbe:	2e00      	cmp	r6, #0
 8005dc0:	d17e      	bne.n	8005ec0 <_dtoa_r+0x4d8>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1d0      	bne.n	8005d68 <_dtoa_r+0x380>
 8005dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dc8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8084 	beq.w	8005eda <_dtoa_r+0x4f2>
 8005dd2:	4b96      	ldr	r3, [pc, #600]	; (800602c <_dtoa_r+0x644>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	4649      	mov	r1, r9
 8005dda:	f7fa fe9f 	bl	8000b1c <__aeabi_dcmplt>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d07b      	beq.n	8005eda <_dtoa_r+0x4f2>
 8005de2:	9b04      	ldr	r3, [sp, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d078      	beq.n	8005eda <_dtoa_r+0x4f2>
 8005de8:	9b01      	ldr	r3, [sp, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dd39      	ble.n	8005e62 <_dtoa_r+0x47a>
 8005dee:	4b90      	ldr	r3, [pc, #576]	; (8006030 <_dtoa_r+0x648>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	4640      	mov	r0, r8
 8005df4:	4649      	mov	r1, r9
 8005df6:	f7fa fc1f 	bl	8000638 <__aeabi_dmul>
 8005dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dfe:	9e01      	ldr	r6, [sp, #4]
 8005e00:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005e04:	3501      	adds	r5, #1
 8005e06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f7fa fbaa 	bl	8000564 <__aeabi_i2d>
 8005e10:	4642      	mov	r2, r8
 8005e12:	464b      	mov	r3, r9
 8005e14:	f7fa fc10 	bl	8000638 <__aeabi_dmul>
 8005e18:	4b86      	ldr	r3, [pc, #536]	; (8006034 <_dtoa_r+0x64c>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f7fa fa56 	bl	80002cc <__adddf3>
 8005e20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e28:	9303      	str	r3, [sp, #12]
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	d158      	bne.n	8005ee0 <_dtoa_r+0x4f8>
 8005e2e:	4b82      	ldr	r3, [pc, #520]	; (8006038 <_dtoa_r+0x650>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	4640      	mov	r0, r8
 8005e34:	4649      	mov	r1, r9
 8005e36:	f7fa fa47 	bl	80002c8 <__aeabi_dsub>
 8005e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e3e:	4680      	mov	r8, r0
 8005e40:	4689      	mov	r9, r1
 8005e42:	f7fa fe89 	bl	8000b58 <__aeabi_dcmpgt>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	f040 8296 	bne.w	8006378 <_dtoa_r+0x990>
 8005e4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005e50:	4640      	mov	r0, r8
 8005e52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e56:	4649      	mov	r1, r9
 8005e58:	f7fa fe60 	bl	8000b1c <__aeabi_dcmplt>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	f040 8289 	bne.w	8006374 <_dtoa_r+0x98c>
 8005e62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005e66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f2c0 814e 	blt.w	800610a <_dtoa_r+0x722>
 8005e6e:	f1bb 0f0e 	cmp.w	fp, #14
 8005e72:	f300 814a 	bgt.w	800610a <_dtoa_r+0x722>
 8005e76:	4b6b      	ldr	r3, [pc, #428]	; (8006024 <_dtoa_r+0x63c>)
 8005e78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f280 80dc 	bge.w	8006040 <_dtoa_r+0x658>
 8005e88:	9b04      	ldr	r3, [sp, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f300 80d8 	bgt.w	8006040 <_dtoa_r+0x658>
 8005e90:	f040 826f 	bne.w	8006372 <_dtoa_r+0x98a>
 8005e94:	4b68      	ldr	r3, [pc, #416]	; (8006038 <_dtoa_r+0x650>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	4640      	mov	r0, r8
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	f7fa fbcc 	bl	8000638 <__aeabi_dmul>
 8005ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ea4:	f7fa fe4e 	bl	8000b44 <__aeabi_dcmpge>
 8005ea8:	9e04      	ldr	r6, [sp, #16]
 8005eaa:	4637      	mov	r7, r6
 8005eac:	2800      	cmp	r0, #0
 8005eae:	f040 8245 	bne.w	800633c <_dtoa_r+0x954>
 8005eb2:	9d00      	ldr	r5, [sp, #0]
 8005eb4:	2331      	movs	r3, #49	; 0x31
 8005eb6:	f805 3b01 	strb.w	r3, [r5], #1
 8005eba:	f10b 0b01 	add.w	fp, fp, #1
 8005ebe:	e241      	b.n	8006344 <_dtoa_r+0x95c>
 8005ec0:	07f2      	lsls	r2, r6, #31
 8005ec2:	d505      	bpl.n	8005ed0 <_dtoa_r+0x4e8>
 8005ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ec8:	f7fa fbb6 	bl	8000638 <__aeabi_dmul>
 8005ecc:	3501      	adds	r5, #1
 8005ece:	2301      	movs	r3, #1
 8005ed0:	1076      	asrs	r6, r6, #1
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	e773      	b.n	8005dbe <_dtoa_r+0x3d6>
 8005ed6:	2502      	movs	r5, #2
 8005ed8:	e775      	b.n	8005dc6 <_dtoa_r+0x3de>
 8005eda:	9e04      	ldr	r6, [sp, #16]
 8005edc:	465f      	mov	r7, fp
 8005ede:	e792      	b.n	8005e06 <_dtoa_r+0x41e>
 8005ee0:	9900      	ldr	r1, [sp, #0]
 8005ee2:	4b50      	ldr	r3, [pc, #320]	; (8006024 <_dtoa_r+0x63c>)
 8005ee4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ee8:	4431      	add	r1, r6
 8005eea:	9102      	str	r1, [sp, #8]
 8005eec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eee:	eeb0 9a47 	vmov.f32	s18, s14
 8005ef2:	eef0 9a67 	vmov.f32	s19, s15
 8005ef6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005efa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005efe:	2900      	cmp	r1, #0
 8005f00:	d044      	beq.n	8005f8c <_dtoa_r+0x5a4>
 8005f02:	494e      	ldr	r1, [pc, #312]	; (800603c <_dtoa_r+0x654>)
 8005f04:	2000      	movs	r0, #0
 8005f06:	f7fa fcc1 	bl	800088c <__aeabi_ddiv>
 8005f0a:	ec53 2b19 	vmov	r2, r3, d9
 8005f0e:	f7fa f9db 	bl	80002c8 <__aeabi_dsub>
 8005f12:	9d00      	ldr	r5, [sp, #0]
 8005f14:	ec41 0b19 	vmov	d9, r0, r1
 8005f18:	4649      	mov	r1, r9
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	f7fa fe3c 	bl	8000b98 <__aeabi_d2iz>
 8005f20:	4606      	mov	r6, r0
 8005f22:	f7fa fb1f 	bl	8000564 <__aeabi_i2d>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	f7fa f9cb 	bl	80002c8 <__aeabi_dsub>
 8005f32:	3630      	adds	r6, #48	; 0x30
 8005f34:	f805 6b01 	strb.w	r6, [r5], #1
 8005f38:	ec53 2b19 	vmov	r2, r3, d9
 8005f3c:	4680      	mov	r8, r0
 8005f3e:	4689      	mov	r9, r1
 8005f40:	f7fa fdec 	bl	8000b1c <__aeabi_dcmplt>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d164      	bne.n	8006012 <_dtoa_r+0x62a>
 8005f48:	4642      	mov	r2, r8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	4937      	ldr	r1, [pc, #220]	; (800602c <_dtoa_r+0x644>)
 8005f4e:	2000      	movs	r0, #0
 8005f50:	f7fa f9ba 	bl	80002c8 <__aeabi_dsub>
 8005f54:	ec53 2b19 	vmov	r2, r3, d9
 8005f58:	f7fa fde0 	bl	8000b1c <__aeabi_dcmplt>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	f040 80b6 	bne.w	80060ce <_dtoa_r+0x6e6>
 8005f62:	9b02      	ldr	r3, [sp, #8]
 8005f64:	429d      	cmp	r5, r3
 8005f66:	f43f af7c 	beq.w	8005e62 <_dtoa_r+0x47a>
 8005f6a:	4b31      	ldr	r3, [pc, #196]	; (8006030 <_dtoa_r+0x648>)
 8005f6c:	ec51 0b19 	vmov	r0, r1, d9
 8005f70:	2200      	movs	r2, #0
 8005f72:	f7fa fb61 	bl	8000638 <__aeabi_dmul>
 8005f76:	4b2e      	ldr	r3, [pc, #184]	; (8006030 <_dtoa_r+0x648>)
 8005f78:	ec41 0b19 	vmov	d9, r0, r1
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	4640      	mov	r0, r8
 8005f80:	4649      	mov	r1, r9
 8005f82:	f7fa fb59 	bl	8000638 <__aeabi_dmul>
 8005f86:	4680      	mov	r8, r0
 8005f88:	4689      	mov	r9, r1
 8005f8a:	e7c5      	b.n	8005f18 <_dtoa_r+0x530>
 8005f8c:	ec51 0b17 	vmov	r0, r1, d7
 8005f90:	f7fa fb52 	bl	8000638 <__aeabi_dmul>
 8005f94:	9b02      	ldr	r3, [sp, #8]
 8005f96:	9d00      	ldr	r5, [sp, #0]
 8005f98:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f9a:	ec41 0b19 	vmov	d9, r0, r1
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	4640      	mov	r0, r8
 8005fa2:	f7fa fdf9 	bl	8000b98 <__aeabi_d2iz>
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	f7fa fadc 	bl	8000564 <__aeabi_i2d>
 8005fac:	3630      	adds	r6, #48	; 0x30
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	f7fa f987 	bl	80002c8 <__aeabi_dsub>
 8005fba:	f805 6b01 	strb.w	r6, [r5], #1
 8005fbe:	9b02      	ldr	r3, [sp, #8]
 8005fc0:	429d      	cmp	r5, r3
 8005fc2:	4680      	mov	r8, r0
 8005fc4:	4689      	mov	r9, r1
 8005fc6:	f04f 0200 	mov.w	r2, #0
 8005fca:	d124      	bne.n	8006016 <_dtoa_r+0x62e>
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	; (800603c <_dtoa_r+0x654>)
 8005fce:	ec51 0b19 	vmov	r0, r1, d9
 8005fd2:	f7fa f97b 	bl	80002cc <__adddf3>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4640      	mov	r0, r8
 8005fdc:	4649      	mov	r1, r9
 8005fde:	f7fa fdbb 	bl	8000b58 <__aeabi_dcmpgt>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d173      	bne.n	80060ce <_dtoa_r+0x6e6>
 8005fe6:	ec53 2b19 	vmov	r2, r3, d9
 8005fea:	4914      	ldr	r1, [pc, #80]	; (800603c <_dtoa_r+0x654>)
 8005fec:	2000      	movs	r0, #0
 8005fee:	f7fa f96b 	bl	80002c8 <__aeabi_dsub>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	4649      	mov	r1, r9
 8005ffa:	f7fa fd8f 	bl	8000b1c <__aeabi_dcmplt>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f43f af2f 	beq.w	8005e62 <_dtoa_r+0x47a>
 8006004:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006006:	1e6b      	subs	r3, r5, #1
 8006008:	930f      	str	r3, [sp, #60]	; 0x3c
 800600a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800600e:	2b30      	cmp	r3, #48	; 0x30
 8006010:	d0f8      	beq.n	8006004 <_dtoa_r+0x61c>
 8006012:	46bb      	mov	fp, r7
 8006014:	e04a      	b.n	80060ac <_dtoa_r+0x6c4>
 8006016:	4b06      	ldr	r3, [pc, #24]	; (8006030 <_dtoa_r+0x648>)
 8006018:	f7fa fb0e 	bl	8000638 <__aeabi_dmul>
 800601c:	4680      	mov	r8, r0
 800601e:	4689      	mov	r9, r1
 8006020:	e7bd      	b.n	8005f9e <_dtoa_r+0x5b6>
 8006022:	bf00      	nop
 8006024:	0800a4d8 	.word	0x0800a4d8
 8006028:	0800a4b0 	.word	0x0800a4b0
 800602c:	3ff00000 	.word	0x3ff00000
 8006030:	40240000 	.word	0x40240000
 8006034:	401c0000 	.word	0x401c0000
 8006038:	40140000 	.word	0x40140000
 800603c:	3fe00000 	.word	0x3fe00000
 8006040:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006044:	9d00      	ldr	r5, [sp, #0]
 8006046:	4642      	mov	r2, r8
 8006048:	464b      	mov	r3, r9
 800604a:	4630      	mov	r0, r6
 800604c:	4639      	mov	r1, r7
 800604e:	f7fa fc1d 	bl	800088c <__aeabi_ddiv>
 8006052:	f7fa fda1 	bl	8000b98 <__aeabi_d2iz>
 8006056:	9001      	str	r0, [sp, #4]
 8006058:	f7fa fa84 	bl	8000564 <__aeabi_i2d>
 800605c:	4642      	mov	r2, r8
 800605e:	464b      	mov	r3, r9
 8006060:	f7fa faea 	bl	8000638 <__aeabi_dmul>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4630      	mov	r0, r6
 800606a:	4639      	mov	r1, r7
 800606c:	f7fa f92c 	bl	80002c8 <__aeabi_dsub>
 8006070:	9e01      	ldr	r6, [sp, #4]
 8006072:	9f04      	ldr	r7, [sp, #16]
 8006074:	3630      	adds	r6, #48	; 0x30
 8006076:	f805 6b01 	strb.w	r6, [r5], #1
 800607a:	9e00      	ldr	r6, [sp, #0]
 800607c:	1bae      	subs	r6, r5, r6
 800607e:	42b7      	cmp	r7, r6
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	d134      	bne.n	80060f0 <_dtoa_r+0x708>
 8006086:	f7fa f921 	bl	80002cc <__adddf3>
 800608a:	4642      	mov	r2, r8
 800608c:	464b      	mov	r3, r9
 800608e:	4606      	mov	r6, r0
 8006090:	460f      	mov	r7, r1
 8006092:	f7fa fd61 	bl	8000b58 <__aeabi_dcmpgt>
 8006096:	b9c8      	cbnz	r0, 80060cc <_dtoa_r+0x6e4>
 8006098:	4642      	mov	r2, r8
 800609a:	464b      	mov	r3, r9
 800609c:	4630      	mov	r0, r6
 800609e:	4639      	mov	r1, r7
 80060a0:	f7fa fd32 	bl	8000b08 <__aeabi_dcmpeq>
 80060a4:	b110      	cbz	r0, 80060ac <_dtoa_r+0x6c4>
 80060a6:	9b01      	ldr	r3, [sp, #4]
 80060a8:	07db      	lsls	r3, r3, #31
 80060aa:	d40f      	bmi.n	80060cc <_dtoa_r+0x6e4>
 80060ac:	4651      	mov	r1, sl
 80060ae:	4620      	mov	r0, r4
 80060b0:	f000 fbcc 	bl	800684c <_Bfree>
 80060b4:	2300      	movs	r3, #0
 80060b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060b8:	702b      	strb	r3, [r5, #0]
 80060ba:	f10b 0301 	add.w	r3, fp, #1
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f43f ace2 	beq.w	8005a8c <_dtoa_r+0xa4>
 80060c8:	601d      	str	r5, [r3, #0]
 80060ca:	e4df      	b.n	8005a8c <_dtoa_r+0xa4>
 80060cc:	465f      	mov	r7, fp
 80060ce:	462b      	mov	r3, r5
 80060d0:	461d      	mov	r5, r3
 80060d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060d6:	2a39      	cmp	r2, #57	; 0x39
 80060d8:	d106      	bne.n	80060e8 <_dtoa_r+0x700>
 80060da:	9a00      	ldr	r2, [sp, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d1f7      	bne.n	80060d0 <_dtoa_r+0x6e8>
 80060e0:	9900      	ldr	r1, [sp, #0]
 80060e2:	2230      	movs	r2, #48	; 0x30
 80060e4:	3701      	adds	r7, #1
 80060e6:	700a      	strb	r2, [r1, #0]
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	3201      	adds	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	e790      	b.n	8006012 <_dtoa_r+0x62a>
 80060f0:	4ba3      	ldr	r3, [pc, #652]	; (8006380 <_dtoa_r+0x998>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	f7fa faa0 	bl	8000638 <__aeabi_dmul>
 80060f8:	2200      	movs	r2, #0
 80060fa:	2300      	movs	r3, #0
 80060fc:	4606      	mov	r6, r0
 80060fe:	460f      	mov	r7, r1
 8006100:	f7fa fd02 	bl	8000b08 <__aeabi_dcmpeq>
 8006104:	2800      	cmp	r0, #0
 8006106:	d09e      	beq.n	8006046 <_dtoa_r+0x65e>
 8006108:	e7d0      	b.n	80060ac <_dtoa_r+0x6c4>
 800610a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800610c:	2a00      	cmp	r2, #0
 800610e:	f000 80ca 	beq.w	80062a6 <_dtoa_r+0x8be>
 8006112:	9a07      	ldr	r2, [sp, #28]
 8006114:	2a01      	cmp	r2, #1
 8006116:	f300 80ad 	bgt.w	8006274 <_dtoa_r+0x88c>
 800611a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800611c:	2a00      	cmp	r2, #0
 800611e:	f000 80a5 	beq.w	800626c <_dtoa_r+0x884>
 8006122:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006126:	9e08      	ldr	r6, [sp, #32]
 8006128:	9d05      	ldr	r5, [sp, #20]
 800612a:	9a05      	ldr	r2, [sp, #20]
 800612c:	441a      	add	r2, r3
 800612e:	9205      	str	r2, [sp, #20]
 8006130:	9a06      	ldr	r2, [sp, #24]
 8006132:	2101      	movs	r1, #1
 8006134:	441a      	add	r2, r3
 8006136:	4620      	mov	r0, r4
 8006138:	9206      	str	r2, [sp, #24]
 800613a:	f000 fc87 	bl	8006a4c <__i2b>
 800613e:	4607      	mov	r7, r0
 8006140:	b165      	cbz	r5, 800615c <_dtoa_r+0x774>
 8006142:	9b06      	ldr	r3, [sp, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	dd09      	ble.n	800615c <_dtoa_r+0x774>
 8006148:	42ab      	cmp	r3, r5
 800614a:	9a05      	ldr	r2, [sp, #20]
 800614c:	bfa8      	it	ge
 800614e:	462b      	movge	r3, r5
 8006150:	1ad2      	subs	r2, r2, r3
 8006152:	9205      	str	r2, [sp, #20]
 8006154:	9a06      	ldr	r2, [sp, #24]
 8006156:	1aed      	subs	r5, r5, r3
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	9306      	str	r3, [sp, #24]
 800615c:	9b08      	ldr	r3, [sp, #32]
 800615e:	b1f3      	cbz	r3, 800619e <_dtoa_r+0x7b6>
 8006160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 80a3 	beq.w	80062ae <_dtoa_r+0x8c6>
 8006168:	2e00      	cmp	r6, #0
 800616a:	dd10      	ble.n	800618e <_dtoa_r+0x7a6>
 800616c:	4639      	mov	r1, r7
 800616e:	4632      	mov	r2, r6
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fd2b 	bl	8006bcc <__pow5mult>
 8006176:	4652      	mov	r2, sl
 8006178:	4601      	mov	r1, r0
 800617a:	4607      	mov	r7, r0
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fc7b 	bl	8006a78 <__multiply>
 8006182:	4651      	mov	r1, sl
 8006184:	4680      	mov	r8, r0
 8006186:	4620      	mov	r0, r4
 8006188:	f000 fb60 	bl	800684c <_Bfree>
 800618c:	46c2      	mov	sl, r8
 800618e:	9b08      	ldr	r3, [sp, #32]
 8006190:	1b9a      	subs	r2, r3, r6
 8006192:	d004      	beq.n	800619e <_dtoa_r+0x7b6>
 8006194:	4651      	mov	r1, sl
 8006196:	4620      	mov	r0, r4
 8006198:	f000 fd18 	bl	8006bcc <__pow5mult>
 800619c:	4682      	mov	sl, r0
 800619e:	2101      	movs	r1, #1
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 fc53 	bl	8006a4c <__i2b>
 80061a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	4606      	mov	r6, r0
 80061ac:	f340 8081 	ble.w	80062b2 <_dtoa_r+0x8ca>
 80061b0:	461a      	mov	r2, r3
 80061b2:	4601      	mov	r1, r0
 80061b4:	4620      	mov	r0, r4
 80061b6:	f000 fd09 	bl	8006bcc <__pow5mult>
 80061ba:	9b07      	ldr	r3, [sp, #28]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	4606      	mov	r6, r0
 80061c0:	dd7a      	ble.n	80062b8 <_dtoa_r+0x8d0>
 80061c2:	f04f 0800 	mov.w	r8, #0
 80061c6:	6933      	ldr	r3, [r6, #16]
 80061c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061cc:	6918      	ldr	r0, [r3, #16]
 80061ce:	f000 fbef 	bl	80069b0 <__hi0bits>
 80061d2:	f1c0 0020 	rsb	r0, r0, #32
 80061d6:	9b06      	ldr	r3, [sp, #24]
 80061d8:	4418      	add	r0, r3
 80061da:	f010 001f 	ands.w	r0, r0, #31
 80061de:	f000 8094 	beq.w	800630a <_dtoa_r+0x922>
 80061e2:	f1c0 0320 	rsb	r3, r0, #32
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	f340 8085 	ble.w	80062f6 <_dtoa_r+0x90e>
 80061ec:	9b05      	ldr	r3, [sp, #20]
 80061ee:	f1c0 001c 	rsb	r0, r0, #28
 80061f2:	4403      	add	r3, r0
 80061f4:	9305      	str	r3, [sp, #20]
 80061f6:	9b06      	ldr	r3, [sp, #24]
 80061f8:	4403      	add	r3, r0
 80061fa:	4405      	add	r5, r0
 80061fc:	9306      	str	r3, [sp, #24]
 80061fe:	9b05      	ldr	r3, [sp, #20]
 8006200:	2b00      	cmp	r3, #0
 8006202:	dd05      	ble.n	8006210 <_dtoa_r+0x828>
 8006204:	4651      	mov	r1, sl
 8006206:	461a      	mov	r2, r3
 8006208:	4620      	mov	r0, r4
 800620a:	f000 fd39 	bl	8006c80 <__lshift>
 800620e:	4682      	mov	sl, r0
 8006210:	9b06      	ldr	r3, [sp, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	dd05      	ble.n	8006222 <_dtoa_r+0x83a>
 8006216:	4631      	mov	r1, r6
 8006218:	461a      	mov	r2, r3
 800621a:	4620      	mov	r0, r4
 800621c:	f000 fd30 	bl	8006c80 <__lshift>
 8006220:	4606      	mov	r6, r0
 8006222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006224:	2b00      	cmp	r3, #0
 8006226:	d072      	beq.n	800630e <_dtoa_r+0x926>
 8006228:	4631      	mov	r1, r6
 800622a:	4650      	mov	r0, sl
 800622c:	f000 fd94 	bl	8006d58 <__mcmp>
 8006230:	2800      	cmp	r0, #0
 8006232:	da6c      	bge.n	800630e <_dtoa_r+0x926>
 8006234:	2300      	movs	r3, #0
 8006236:	4651      	mov	r1, sl
 8006238:	220a      	movs	r2, #10
 800623a:	4620      	mov	r0, r4
 800623c:	f000 fb28 	bl	8006890 <__multadd>
 8006240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006242:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006246:	4682      	mov	sl, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 81b0 	beq.w	80065ae <_dtoa_r+0xbc6>
 800624e:	2300      	movs	r3, #0
 8006250:	4639      	mov	r1, r7
 8006252:	220a      	movs	r2, #10
 8006254:	4620      	mov	r0, r4
 8006256:	f000 fb1b 	bl	8006890 <__multadd>
 800625a:	9b01      	ldr	r3, [sp, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	4607      	mov	r7, r0
 8006260:	f300 8096 	bgt.w	8006390 <_dtoa_r+0x9a8>
 8006264:	9b07      	ldr	r3, [sp, #28]
 8006266:	2b02      	cmp	r3, #2
 8006268:	dc59      	bgt.n	800631e <_dtoa_r+0x936>
 800626a:	e091      	b.n	8006390 <_dtoa_r+0x9a8>
 800626c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800626e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006272:	e758      	b.n	8006126 <_dtoa_r+0x73e>
 8006274:	9b04      	ldr	r3, [sp, #16]
 8006276:	1e5e      	subs	r6, r3, #1
 8006278:	9b08      	ldr	r3, [sp, #32]
 800627a:	42b3      	cmp	r3, r6
 800627c:	bfbf      	itttt	lt
 800627e:	9b08      	ldrlt	r3, [sp, #32]
 8006280:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006282:	9608      	strlt	r6, [sp, #32]
 8006284:	1af3      	sublt	r3, r6, r3
 8006286:	bfb4      	ite	lt
 8006288:	18d2      	addlt	r2, r2, r3
 800628a:	1b9e      	subge	r6, r3, r6
 800628c:	9b04      	ldr	r3, [sp, #16]
 800628e:	bfbc      	itt	lt
 8006290:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006292:	2600      	movlt	r6, #0
 8006294:	2b00      	cmp	r3, #0
 8006296:	bfb7      	itett	lt
 8006298:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800629c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80062a0:	1a9d      	sublt	r5, r3, r2
 80062a2:	2300      	movlt	r3, #0
 80062a4:	e741      	b.n	800612a <_dtoa_r+0x742>
 80062a6:	9e08      	ldr	r6, [sp, #32]
 80062a8:	9d05      	ldr	r5, [sp, #20]
 80062aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80062ac:	e748      	b.n	8006140 <_dtoa_r+0x758>
 80062ae:	9a08      	ldr	r2, [sp, #32]
 80062b0:	e770      	b.n	8006194 <_dtoa_r+0x7ac>
 80062b2:	9b07      	ldr	r3, [sp, #28]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	dc19      	bgt.n	80062ec <_dtoa_r+0x904>
 80062b8:	9b02      	ldr	r3, [sp, #8]
 80062ba:	b9bb      	cbnz	r3, 80062ec <_dtoa_r+0x904>
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062c2:	b99b      	cbnz	r3, 80062ec <_dtoa_r+0x904>
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062ca:	0d1b      	lsrs	r3, r3, #20
 80062cc:	051b      	lsls	r3, r3, #20
 80062ce:	b183      	cbz	r3, 80062f2 <_dtoa_r+0x90a>
 80062d0:	9b05      	ldr	r3, [sp, #20]
 80062d2:	3301      	adds	r3, #1
 80062d4:	9305      	str	r3, [sp, #20]
 80062d6:	9b06      	ldr	r3, [sp, #24]
 80062d8:	3301      	adds	r3, #1
 80062da:	9306      	str	r3, [sp, #24]
 80062dc:	f04f 0801 	mov.w	r8, #1
 80062e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f47f af6f 	bne.w	80061c6 <_dtoa_r+0x7de>
 80062e8:	2001      	movs	r0, #1
 80062ea:	e774      	b.n	80061d6 <_dtoa_r+0x7ee>
 80062ec:	f04f 0800 	mov.w	r8, #0
 80062f0:	e7f6      	b.n	80062e0 <_dtoa_r+0x8f8>
 80062f2:	4698      	mov	r8, r3
 80062f4:	e7f4      	b.n	80062e0 <_dtoa_r+0x8f8>
 80062f6:	d082      	beq.n	80061fe <_dtoa_r+0x816>
 80062f8:	9a05      	ldr	r2, [sp, #20]
 80062fa:	331c      	adds	r3, #28
 80062fc:	441a      	add	r2, r3
 80062fe:	9205      	str	r2, [sp, #20]
 8006300:	9a06      	ldr	r2, [sp, #24]
 8006302:	441a      	add	r2, r3
 8006304:	441d      	add	r5, r3
 8006306:	9206      	str	r2, [sp, #24]
 8006308:	e779      	b.n	80061fe <_dtoa_r+0x816>
 800630a:	4603      	mov	r3, r0
 800630c:	e7f4      	b.n	80062f8 <_dtoa_r+0x910>
 800630e:	9b04      	ldr	r3, [sp, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	dc37      	bgt.n	8006384 <_dtoa_r+0x99c>
 8006314:	9b07      	ldr	r3, [sp, #28]
 8006316:	2b02      	cmp	r3, #2
 8006318:	dd34      	ble.n	8006384 <_dtoa_r+0x99c>
 800631a:	9b04      	ldr	r3, [sp, #16]
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	9b01      	ldr	r3, [sp, #4]
 8006320:	b963      	cbnz	r3, 800633c <_dtoa_r+0x954>
 8006322:	4631      	mov	r1, r6
 8006324:	2205      	movs	r2, #5
 8006326:	4620      	mov	r0, r4
 8006328:	f000 fab2 	bl	8006890 <__multadd>
 800632c:	4601      	mov	r1, r0
 800632e:	4606      	mov	r6, r0
 8006330:	4650      	mov	r0, sl
 8006332:	f000 fd11 	bl	8006d58 <__mcmp>
 8006336:	2800      	cmp	r0, #0
 8006338:	f73f adbb 	bgt.w	8005eb2 <_dtoa_r+0x4ca>
 800633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633e:	9d00      	ldr	r5, [sp, #0]
 8006340:	ea6f 0b03 	mvn.w	fp, r3
 8006344:	f04f 0800 	mov.w	r8, #0
 8006348:	4631      	mov	r1, r6
 800634a:	4620      	mov	r0, r4
 800634c:	f000 fa7e 	bl	800684c <_Bfree>
 8006350:	2f00      	cmp	r7, #0
 8006352:	f43f aeab 	beq.w	80060ac <_dtoa_r+0x6c4>
 8006356:	f1b8 0f00 	cmp.w	r8, #0
 800635a:	d005      	beq.n	8006368 <_dtoa_r+0x980>
 800635c:	45b8      	cmp	r8, r7
 800635e:	d003      	beq.n	8006368 <_dtoa_r+0x980>
 8006360:	4641      	mov	r1, r8
 8006362:	4620      	mov	r0, r4
 8006364:	f000 fa72 	bl	800684c <_Bfree>
 8006368:	4639      	mov	r1, r7
 800636a:	4620      	mov	r0, r4
 800636c:	f000 fa6e 	bl	800684c <_Bfree>
 8006370:	e69c      	b.n	80060ac <_dtoa_r+0x6c4>
 8006372:	2600      	movs	r6, #0
 8006374:	4637      	mov	r7, r6
 8006376:	e7e1      	b.n	800633c <_dtoa_r+0x954>
 8006378:	46bb      	mov	fp, r7
 800637a:	4637      	mov	r7, r6
 800637c:	e599      	b.n	8005eb2 <_dtoa_r+0x4ca>
 800637e:	bf00      	nop
 8006380:	40240000 	.word	0x40240000
 8006384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 80c8 	beq.w	800651c <_dtoa_r+0xb34>
 800638c:	9b04      	ldr	r3, [sp, #16]
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	2d00      	cmp	r5, #0
 8006392:	dd05      	ble.n	80063a0 <_dtoa_r+0x9b8>
 8006394:	4639      	mov	r1, r7
 8006396:	462a      	mov	r2, r5
 8006398:	4620      	mov	r0, r4
 800639a:	f000 fc71 	bl	8006c80 <__lshift>
 800639e:	4607      	mov	r7, r0
 80063a0:	f1b8 0f00 	cmp.w	r8, #0
 80063a4:	d05b      	beq.n	800645e <_dtoa_r+0xa76>
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 fa0f 	bl	80067cc <_Balloc>
 80063ae:	4605      	mov	r5, r0
 80063b0:	b928      	cbnz	r0, 80063be <_dtoa_r+0x9d6>
 80063b2:	4b83      	ldr	r3, [pc, #524]	; (80065c0 <_dtoa_r+0xbd8>)
 80063b4:	4602      	mov	r2, r0
 80063b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80063ba:	f7ff bb2e 	b.w	8005a1a <_dtoa_r+0x32>
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	3202      	adds	r2, #2
 80063c2:	0092      	lsls	r2, r2, #2
 80063c4:	f107 010c 	add.w	r1, r7, #12
 80063c8:	300c      	adds	r0, #12
 80063ca:	f001 ff85 	bl	80082d8 <memcpy>
 80063ce:	2201      	movs	r2, #1
 80063d0:	4629      	mov	r1, r5
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 fc54 	bl	8006c80 <__lshift>
 80063d8:	9b00      	ldr	r3, [sp, #0]
 80063da:	3301      	adds	r3, #1
 80063dc:	9304      	str	r3, [sp, #16]
 80063de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063e2:	4413      	add	r3, r2
 80063e4:	9308      	str	r3, [sp, #32]
 80063e6:	9b02      	ldr	r3, [sp, #8]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	46b8      	mov	r8, r7
 80063ee:	9306      	str	r3, [sp, #24]
 80063f0:	4607      	mov	r7, r0
 80063f2:	9b04      	ldr	r3, [sp, #16]
 80063f4:	4631      	mov	r1, r6
 80063f6:	3b01      	subs	r3, #1
 80063f8:	4650      	mov	r0, sl
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	f7ff fa6a 	bl	80058d4 <quorem>
 8006400:	4641      	mov	r1, r8
 8006402:	9002      	str	r0, [sp, #8]
 8006404:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006408:	4650      	mov	r0, sl
 800640a:	f000 fca5 	bl	8006d58 <__mcmp>
 800640e:	463a      	mov	r2, r7
 8006410:	9005      	str	r0, [sp, #20]
 8006412:	4631      	mov	r1, r6
 8006414:	4620      	mov	r0, r4
 8006416:	f000 fcbb 	bl	8006d90 <__mdiff>
 800641a:	68c2      	ldr	r2, [r0, #12]
 800641c:	4605      	mov	r5, r0
 800641e:	bb02      	cbnz	r2, 8006462 <_dtoa_r+0xa7a>
 8006420:	4601      	mov	r1, r0
 8006422:	4650      	mov	r0, sl
 8006424:	f000 fc98 	bl	8006d58 <__mcmp>
 8006428:	4602      	mov	r2, r0
 800642a:	4629      	mov	r1, r5
 800642c:	4620      	mov	r0, r4
 800642e:	9209      	str	r2, [sp, #36]	; 0x24
 8006430:	f000 fa0c 	bl	800684c <_Bfree>
 8006434:	9b07      	ldr	r3, [sp, #28]
 8006436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006438:	9d04      	ldr	r5, [sp, #16]
 800643a:	ea43 0102 	orr.w	r1, r3, r2
 800643e:	9b06      	ldr	r3, [sp, #24]
 8006440:	4319      	orrs	r1, r3
 8006442:	d110      	bne.n	8006466 <_dtoa_r+0xa7e>
 8006444:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006448:	d029      	beq.n	800649e <_dtoa_r+0xab6>
 800644a:	9b05      	ldr	r3, [sp, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	dd02      	ble.n	8006456 <_dtoa_r+0xa6e>
 8006450:	9b02      	ldr	r3, [sp, #8]
 8006452:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	f883 9000 	strb.w	r9, [r3]
 800645c:	e774      	b.n	8006348 <_dtoa_r+0x960>
 800645e:	4638      	mov	r0, r7
 8006460:	e7ba      	b.n	80063d8 <_dtoa_r+0x9f0>
 8006462:	2201      	movs	r2, #1
 8006464:	e7e1      	b.n	800642a <_dtoa_r+0xa42>
 8006466:	9b05      	ldr	r3, [sp, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	db04      	blt.n	8006476 <_dtoa_r+0xa8e>
 800646c:	9907      	ldr	r1, [sp, #28]
 800646e:	430b      	orrs	r3, r1
 8006470:	9906      	ldr	r1, [sp, #24]
 8006472:	430b      	orrs	r3, r1
 8006474:	d120      	bne.n	80064b8 <_dtoa_r+0xad0>
 8006476:	2a00      	cmp	r2, #0
 8006478:	dded      	ble.n	8006456 <_dtoa_r+0xa6e>
 800647a:	4651      	mov	r1, sl
 800647c:	2201      	movs	r2, #1
 800647e:	4620      	mov	r0, r4
 8006480:	f000 fbfe 	bl	8006c80 <__lshift>
 8006484:	4631      	mov	r1, r6
 8006486:	4682      	mov	sl, r0
 8006488:	f000 fc66 	bl	8006d58 <__mcmp>
 800648c:	2800      	cmp	r0, #0
 800648e:	dc03      	bgt.n	8006498 <_dtoa_r+0xab0>
 8006490:	d1e1      	bne.n	8006456 <_dtoa_r+0xa6e>
 8006492:	f019 0f01 	tst.w	r9, #1
 8006496:	d0de      	beq.n	8006456 <_dtoa_r+0xa6e>
 8006498:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800649c:	d1d8      	bne.n	8006450 <_dtoa_r+0xa68>
 800649e:	9a01      	ldr	r2, [sp, #4]
 80064a0:	2339      	movs	r3, #57	; 0x39
 80064a2:	7013      	strb	r3, [r2, #0]
 80064a4:	462b      	mov	r3, r5
 80064a6:	461d      	mov	r5, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064ae:	2a39      	cmp	r2, #57	; 0x39
 80064b0:	d06c      	beq.n	800658c <_dtoa_r+0xba4>
 80064b2:	3201      	adds	r2, #1
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	e747      	b.n	8006348 <_dtoa_r+0x960>
 80064b8:	2a00      	cmp	r2, #0
 80064ba:	dd07      	ble.n	80064cc <_dtoa_r+0xae4>
 80064bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064c0:	d0ed      	beq.n	800649e <_dtoa_r+0xab6>
 80064c2:	9a01      	ldr	r2, [sp, #4]
 80064c4:	f109 0301 	add.w	r3, r9, #1
 80064c8:	7013      	strb	r3, [r2, #0]
 80064ca:	e73d      	b.n	8006348 <_dtoa_r+0x960>
 80064cc:	9b04      	ldr	r3, [sp, #16]
 80064ce:	9a08      	ldr	r2, [sp, #32]
 80064d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d043      	beq.n	8006560 <_dtoa_r+0xb78>
 80064d8:	4651      	mov	r1, sl
 80064da:	2300      	movs	r3, #0
 80064dc:	220a      	movs	r2, #10
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 f9d6 	bl	8006890 <__multadd>
 80064e4:	45b8      	cmp	r8, r7
 80064e6:	4682      	mov	sl, r0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	f04f 020a 	mov.w	r2, #10
 80064f0:	4641      	mov	r1, r8
 80064f2:	4620      	mov	r0, r4
 80064f4:	d107      	bne.n	8006506 <_dtoa_r+0xb1e>
 80064f6:	f000 f9cb 	bl	8006890 <__multadd>
 80064fa:	4680      	mov	r8, r0
 80064fc:	4607      	mov	r7, r0
 80064fe:	9b04      	ldr	r3, [sp, #16]
 8006500:	3301      	adds	r3, #1
 8006502:	9304      	str	r3, [sp, #16]
 8006504:	e775      	b.n	80063f2 <_dtoa_r+0xa0a>
 8006506:	f000 f9c3 	bl	8006890 <__multadd>
 800650a:	4639      	mov	r1, r7
 800650c:	4680      	mov	r8, r0
 800650e:	2300      	movs	r3, #0
 8006510:	220a      	movs	r2, #10
 8006512:	4620      	mov	r0, r4
 8006514:	f000 f9bc 	bl	8006890 <__multadd>
 8006518:	4607      	mov	r7, r0
 800651a:	e7f0      	b.n	80064fe <_dtoa_r+0xb16>
 800651c:	9b04      	ldr	r3, [sp, #16]
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	9d00      	ldr	r5, [sp, #0]
 8006522:	4631      	mov	r1, r6
 8006524:	4650      	mov	r0, sl
 8006526:	f7ff f9d5 	bl	80058d4 <quorem>
 800652a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800652e:	9b00      	ldr	r3, [sp, #0]
 8006530:	f805 9b01 	strb.w	r9, [r5], #1
 8006534:	1aea      	subs	r2, r5, r3
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	4293      	cmp	r3, r2
 800653a:	dd07      	ble.n	800654c <_dtoa_r+0xb64>
 800653c:	4651      	mov	r1, sl
 800653e:	2300      	movs	r3, #0
 8006540:	220a      	movs	r2, #10
 8006542:	4620      	mov	r0, r4
 8006544:	f000 f9a4 	bl	8006890 <__multadd>
 8006548:	4682      	mov	sl, r0
 800654a:	e7ea      	b.n	8006522 <_dtoa_r+0xb3a>
 800654c:	9b01      	ldr	r3, [sp, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	bfc8      	it	gt
 8006552:	461d      	movgt	r5, r3
 8006554:	9b00      	ldr	r3, [sp, #0]
 8006556:	bfd8      	it	le
 8006558:	2501      	movle	r5, #1
 800655a:	441d      	add	r5, r3
 800655c:	f04f 0800 	mov.w	r8, #0
 8006560:	4651      	mov	r1, sl
 8006562:	2201      	movs	r2, #1
 8006564:	4620      	mov	r0, r4
 8006566:	f000 fb8b 	bl	8006c80 <__lshift>
 800656a:	4631      	mov	r1, r6
 800656c:	4682      	mov	sl, r0
 800656e:	f000 fbf3 	bl	8006d58 <__mcmp>
 8006572:	2800      	cmp	r0, #0
 8006574:	dc96      	bgt.n	80064a4 <_dtoa_r+0xabc>
 8006576:	d102      	bne.n	800657e <_dtoa_r+0xb96>
 8006578:	f019 0f01 	tst.w	r9, #1
 800657c:	d192      	bne.n	80064a4 <_dtoa_r+0xabc>
 800657e:	462b      	mov	r3, r5
 8006580:	461d      	mov	r5, r3
 8006582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006586:	2a30      	cmp	r2, #48	; 0x30
 8006588:	d0fa      	beq.n	8006580 <_dtoa_r+0xb98>
 800658a:	e6dd      	b.n	8006348 <_dtoa_r+0x960>
 800658c:	9a00      	ldr	r2, [sp, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d189      	bne.n	80064a6 <_dtoa_r+0xabe>
 8006592:	f10b 0b01 	add.w	fp, fp, #1
 8006596:	2331      	movs	r3, #49	; 0x31
 8006598:	e796      	b.n	80064c8 <_dtoa_r+0xae0>
 800659a:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <_dtoa_r+0xbdc>)
 800659c:	f7ff ba99 	b.w	8005ad2 <_dtoa_r+0xea>
 80065a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f47f aa6d 	bne.w	8005a82 <_dtoa_r+0x9a>
 80065a8:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <_dtoa_r+0xbe0>)
 80065aa:	f7ff ba92 	b.w	8005ad2 <_dtoa_r+0xea>
 80065ae:	9b01      	ldr	r3, [sp, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	dcb5      	bgt.n	8006520 <_dtoa_r+0xb38>
 80065b4:	9b07      	ldr	r3, [sp, #28]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	f73f aeb1 	bgt.w	800631e <_dtoa_r+0x936>
 80065bc:	e7b0      	b.n	8006520 <_dtoa_r+0xb38>
 80065be:	bf00      	nop
 80065c0:	0800a441 	.word	0x0800a441
 80065c4:	0800a39c 	.word	0x0800a39c
 80065c8:	0800a3c5 	.word	0x0800a3c5

080065cc <_free_r>:
 80065cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065ce:	2900      	cmp	r1, #0
 80065d0:	d044      	beq.n	800665c <_free_r+0x90>
 80065d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d6:	9001      	str	r0, [sp, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f1a1 0404 	sub.w	r4, r1, #4
 80065de:	bfb8      	it	lt
 80065e0:	18e4      	addlt	r4, r4, r3
 80065e2:	f000 f8e7 	bl	80067b4 <__malloc_lock>
 80065e6:	4a1e      	ldr	r2, [pc, #120]	; (8006660 <_free_r+0x94>)
 80065e8:	9801      	ldr	r0, [sp, #4]
 80065ea:	6813      	ldr	r3, [r2, #0]
 80065ec:	b933      	cbnz	r3, 80065fc <_free_r+0x30>
 80065ee:	6063      	str	r3, [r4, #4]
 80065f0:	6014      	str	r4, [r2, #0]
 80065f2:	b003      	add	sp, #12
 80065f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065f8:	f000 b8e2 	b.w	80067c0 <__malloc_unlock>
 80065fc:	42a3      	cmp	r3, r4
 80065fe:	d908      	bls.n	8006612 <_free_r+0x46>
 8006600:	6825      	ldr	r5, [r4, #0]
 8006602:	1961      	adds	r1, r4, r5
 8006604:	428b      	cmp	r3, r1
 8006606:	bf01      	itttt	eq
 8006608:	6819      	ldreq	r1, [r3, #0]
 800660a:	685b      	ldreq	r3, [r3, #4]
 800660c:	1949      	addeq	r1, r1, r5
 800660e:	6021      	streq	r1, [r4, #0]
 8006610:	e7ed      	b.n	80065ee <_free_r+0x22>
 8006612:	461a      	mov	r2, r3
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	b10b      	cbz	r3, 800661c <_free_r+0x50>
 8006618:	42a3      	cmp	r3, r4
 800661a:	d9fa      	bls.n	8006612 <_free_r+0x46>
 800661c:	6811      	ldr	r1, [r2, #0]
 800661e:	1855      	adds	r5, r2, r1
 8006620:	42a5      	cmp	r5, r4
 8006622:	d10b      	bne.n	800663c <_free_r+0x70>
 8006624:	6824      	ldr	r4, [r4, #0]
 8006626:	4421      	add	r1, r4
 8006628:	1854      	adds	r4, r2, r1
 800662a:	42a3      	cmp	r3, r4
 800662c:	6011      	str	r1, [r2, #0]
 800662e:	d1e0      	bne.n	80065f2 <_free_r+0x26>
 8006630:	681c      	ldr	r4, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	6053      	str	r3, [r2, #4]
 8006636:	440c      	add	r4, r1
 8006638:	6014      	str	r4, [r2, #0]
 800663a:	e7da      	b.n	80065f2 <_free_r+0x26>
 800663c:	d902      	bls.n	8006644 <_free_r+0x78>
 800663e:	230c      	movs	r3, #12
 8006640:	6003      	str	r3, [r0, #0]
 8006642:	e7d6      	b.n	80065f2 <_free_r+0x26>
 8006644:	6825      	ldr	r5, [r4, #0]
 8006646:	1961      	adds	r1, r4, r5
 8006648:	428b      	cmp	r3, r1
 800664a:	bf04      	itt	eq
 800664c:	6819      	ldreq	r1, [r3, #0]
 800664e:	685b      	ldreq	r3, [r3, #4]
 8006650:	6063      	str	r3, [r4, #4]
 8006652:	bf04      	itt	eq
 8006654:	1949      	addeq	r1, r1, r5
 8006656:	6021      	streq	r1, [r4, #0]
 8006658:	6054      	str	r4, [r2, #4]
 800665a:	e7ca      	b.n	80065f2 <_free_r+0x26>
 800665c:	b003      	add	sp, #12
 800665e:	bd30      	pop	{r4, r5, pc}
 8006660:	20001454 	.word	0x20001454

08006664 <malloc>:
 8006664:	4b02      	ldr	r3, [pc, #8]	; (8006670 <malloc+0xc>)
 8006666:	4601      	mov	r1, r0
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	f000 b823 	b.w	80066b4 <_malloc_r>
 800666e:	bf00      	nop
 8006670:	20000064 	.word	0x20000064

08006674 <sbrk_aligned>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	4e0e      	ldr	r6, [pc, #56]	; (80066b0 <sbrk_aligned+0x3c>)
 8006678:	460c      	mov	r4, r1
 800667a:	6831      	ldr	r1, [r6, #0]
 800667c:	4605      	mov	r5, r0
 800667e:	b911      	cbnz	r1, 8006686 <sbrk_aligned+0x12>
 8006680:	f001 fe1a 	bl	80082b8 <_sbrk_r>
 8006684:	6030      	str	r0, [r6, #0]
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f001 fe15 	bl	80082b8 <_sbrk_r>
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	d00a      	beq.n	80066a8 <sbrk_aligned+0x34>
 8006692:	1cc4      	adds	r4, r0, #3
 8006694:	f024 0403 	bic.w	r4, r4, #3
 8006698:	42a0      	cmp	r0, r4
 800669a:	d007      	beq.n	80066ac <sbrk_aligned+0x38>
 800669c:	1a21      	subs	r1, r4, r0
 800669e:	4628      	mov	r0, r5
 80066a0:	f001 fe0a 	bl	80082b8 <_sbrk_r>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d101      	bne.n	80066ac <sbrk_aligned+0x38>
 80066a8:	f04f 34ff 	mov.w	r4, #4294967295
 80066ac:	4620      	mov	r0, r4
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	20001458 	.word	0x20001458

080066b4 <_malloc_r>:
 80066b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b8:	1ccd      	adds	r5, r1, #3
 80066ba:	f025 0503 	bic.w	r5, r5, #3
 80066be:	3508      	adds	r5, #8
 80066c0:	2d0c      	cmp	r5, #12
 80066c2:	bf38      	it	cc
 80066c4:	250c      	movcc	r5, #12
 80066c6:	2d00      	cmp	r5, #0
 80066c8:	4607      	mov	r7, r0
 80066ca:	db01      	blt.n	80066d0 <_malloc_r+0x1c>
 80066cc:	42a9      	cmp	r1, r5
 80066ce:	d905      	bls.n	80066dc <_malloc_r+0x28>
 80066d0:	230c      	movs	r3, #12
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	2600      	movs	r6, #0
 80066d6:	4630      	mov	r0, r6
 80066d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067b0 <_malloc_r+0xfc>
 80066e0:	f000 f868 	bl	80067b4 <__malloc_lock>
 80066e4:	f8d8 3000 	ldr.w	r3, [r8]
 80066e8:	461c      	mov	r4, r3
 80066ea:	bb5c      	cbnz	r4, 8006744 <_malloc_r+0x90>
 80066ec:	4629      	mov	r1, r5
 80066ee:	4638      	mov	r0, r7
 80066f0:	f7ff ffc0 	bl	8006674 <sbrk_aligned>
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	4604      	mov	r4, r0
 80066f8:	d155      	bne.n	80067a6 <_malloc_r+0xf2>
 80066fa:	f8d8 4000 	ldr.w	r4, [r8]
 80066fe:	4626      	mov	r6, r4
 8006700:	2e00      	cmp	r6, #0
 8006702:	d145      	bne.n	8006790 <_malloc_r+0xdc>
 8006704:	2c00      	cmp	r4, #0
 8006706:	d048      	beq.n	800679a <_malloc_r+0xe6>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	4631      	mov	r1, r6
 800670c:	4638      	mov	r0, r7
 800670e:	eb04 0903 	add.w	r9, r4, r3
 8006712:	f001 fdd1 	bl	80082b8 <_sbrk_r>
 8006716:	4581      	cmp	r9, r0
 8006718:	d13f      	bne.n	800679a <_malloc_r+0xe6>
 800671a:	6821      	ldr	r1, [r4, #0]
 800671c:	1a6d      	subs	r5, r5, r1
 800671e:	4629      	mov	r1, r5
 8006720:	4638      	mov	r0, r7
 8006722:	f7ff ffa7 	bl	8006674 <sbrk_aligned>
 8006726:	3001      	adds	r0, #1
 8006728:	d037      	beq.n	800679a <_malloc_r+0xe6>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	442b      	add	r3, r5
 800672e:	6023      	str	r3, [r4, #0]
 8006730:	f8d8 3000 	ldr.w	r3, [r8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d038      	beq.n	80067aa <_malloc_r+0xf6>
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	42a2      	cmp	r2, r4
 800673c:	d12b      	bne.n	8006796 <_malloc_r+0xe2>
 800673e:	2200      	movs	r2, #0
 8006740:	605a      	str	r2, [r3, #4]
 8006742:	e00f      	b.n	8006764 <_malloc_r+0xb0>
 8006744:	6822      	ldr	r2, [r4, #0]
 8006746:	1b52      	subs	r2, r2, r5
 8006748:	d41f      	bmi.n	800678a <_malloc_r+0xd6>
 800674a:	2a0b      	cmp	r2, #11
 800674c:	d917      	bls.n	800677e <_malloc_r+0xca>
 800674e:	1961      	adds	r1, r4, r5
 8006750:	42a3      	cmp	r3, r4
 8006752:	6025      	str	r5, [r4, #0]
 8006754:	bf18      	it	ne
 8006756:	6059      	strne	r1, [r3, #4]
 8006758:	6863      	ldr	r3, [r4, #4]
 800675a:	bf08      	it	eq
 800675c:	f8c8 1000 	streq.w	r1, [r8]
 8006760:	5162      	str	r2, [r4, r5]
 8006762:	604b      	str	r3, [r1, #4]
 8006764:	4638      	mov	r0, r7
 8006766:	f104 060b 	add.w	r6, r4, #11
 800676a:	f000 f829 	bl	80067c0 <__malloc_unlock>
 800676e:	f026 0607 	bic.w	r6, r6, #7
 8006772:	1d23      	adds	r3, r4, #4
 8006774:	1af2      	subs	r2, r6, r3
 8006776:	d0ae      	beq.n	80066d6 <_malloc_r+0x22>
 8006778:	1b9b      	subs	r3, r3, r6
 800677a:	50a3      	str	r3, [r4, r2]
 800677c:	e7ab      	b.n	80066d6 <_malloc_r+0x22>
 800677e:	42a3      	cmp	r3, r4
 8006780:	6862      	ldr	r2, [r4, #4]
 8006782:	d1dd      	bne.n	8006740 <_malloc_r+0x8c>
 8006784:	f8c8 2000 	str.w	r2, [r8]
 8006788:	e7ec      	b.n	8006764 <_malloc_r+0xb0>
 800678a:	4623      	mov	r3, r4
 800678c:	6864      	ldr	r4, [r4, #4]
 800678e:	e7ac      	b.n	80066ea <_malloc_r+0x36>
 8006790:	4634      	mov	r4, r6
 8006792:	6876      	ldr	r6, [r6, #4]
 8006794:	e7b4      	b.n	8006700 <_malloc_r+0x4c>
 8006796:	4613      	mov	r3, r2
 8006798:	e7cc      	b.n	8006734 <_malloc_r+0x80>
 800679a:	230c      	movs	r3, #12
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	4638      	mov	r0, r7
 80067a0:	f000 f80e 	bl	80067c0 <__malloc_unlock>
 80067a4:	e797      	b.n	80066d6 <_malloc_r+0x22>
 80067a6:	6025      	str	r5, [r4, #0]
 80067a8:	e7dc      	b.n	8006764 <_malloc_r+0xb0>
 80067aa:	605b      	str	r3, [r3, #4]
 80067ac:	deff      	udf	#255	; 0xff
 80067ae:	bf00      	nop
 80067b0:	20001454 	.word	0x20001454

080067b4 <__malloc_lock>:
 80067b4:	4801      	ldr	r0, [pc, #4]	; (80067bc <__malloc_lock+0x8>)
 80067b6:	f7ff b884 	b.w	80058c2 <__retarget_lock_acquire_recursive>
 80067ba:	bf00      	nop
 80067bc:	20001450 	.word	0x20001450

080067c0 <__malloc_unlock>:
 80067c0:	4801      	ldr	r0, [pc, #4]	; (80067c8 <__malloc_unlock+0x8>)
 80067c2:	f7ff b87f 	b.w	80058c4 <__retarget_lock_release_recursive>
 80067c6:	bf00      	nop
 80067c8:	20001450 	.word	0x20001450

080067cc <_Balloc>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	69c6      	ldr	r6, [r0, #28]
 80067d0:	4604      	mov	r4, r0
 80067d2:	460d      	mov	r5, r1
 80067d4:	b976      	cbnz	r6, 80067f4 <_Balloc+0x28>
 80067d6:	2010      	movs	r0, #16
 80067d8:	f7ff ff44 	bl	8006664 <malloc>
 80067dc:	4602      	mov	r2, r0
 80067de:	61e0      	str	r0, [r4, #28]
 80067e0:	b920      	cbnz	r0, 80067ec <_Balloc+0x20>
 80067e2:	4b18      	ldr	r3, [pc, #96]	; (8006844 <_Balloc+0x78>)
 80067e4:	4818      	ldr	r0, [pc, #96]	; (8006848 <_Balloc+0x7c>)
 80067e6:	216b      	movs	r1, #107	; 0x6b
 80067e8:	f001 fd8e 	bl	8008308 <__assert_func>
 80067ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067f0:	6006      	str	r6, [r0, #0]
 80067f2:	60c6      	str	r6, [r0, #12]
 80067f4:	69e6      	ldr	r6, [r4, #28]
 80067f6:	68f3      	ldr	r3, [r6, #12]
 80067f8:	b183      	cbz	r3, 800681c <_Balloc+0x50>
 80067fa:	69e3      	ldr	r3, [r4, #28]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006802:	b9b8      	cbnz	r0, 8006834 <_Balloc+0x68>
 8006804:	2101      	movs	r1, #1
 8006806:	fa01 f605 	lsl.w	r6, r1, r5
 800680a:	1d72      	adds	r2, r6, #5
 800680c:	0092      	lsls	r2, r2, #2
 800680e:	4620      	mov	r0, r4
 8006810:	f001 fd98 	bl	8008344 <_calloc_r>
 8006814:	b160      	cbz	r0, 8006830 <_Balloc+0x64>
 8006816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800681a:	e00e      	b.n	800683a <_Balloc+0x6e>
 800681c:	2221      	movs	r2, #33	; 0x21
 800681e:	2104      	movs	r1, #4
 8006820:	4620      	mov	r0, r4
 8006822:	f001 fd8f 	bl	8008344 <_calloc_r>
 8006826:	69e3      	ldr	r3, [r4, #28]
 8006828:	60f0      	str	r0, [r6, #12]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e4      	bne.n	80067fa <_Balloc+0x2e>
 8006830:	2000      	movs	r0, #0
 8006832:	bd70      	pop	{r4, r5, r6, pc}
 8006834:	6802      	ldr	r2, [r0, #0]
 8006836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800683a:	2300      	movs	r3, #0
 800683c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006840:	e7f7      	b.n	8006832 <_Balloc+0x66>
 8006842:	bf00      	nop
 8006844:	0800a3d2 	.word	0x0800a3d2
 8006848:	0800a452 	.word	0x0800a452

0800684c <_Bfree>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	69c6      	ldr	r6, [r0, #28]
 8006850:	4605      	mov	r5, r0
 8006852:	460c      	mov	r4, r1
 8006854:	b976      	cbnz	r6, 8006874 <_Bfree+0x28>
 8006856:	2010      	movs	r0, #16
 8006858:	f7ff ff04 	bl	8006664 <malloc>
 800685c:	4602      	mov	r2, r0
 800685e:	61e8      	str	r0, [r5, #28]
 8006860:	b920      	cbnz	r0, 800686c <_Bfree+0x20>
 8006862:	4b09      	ldr	r3, [pc, #36]	; (8006888 <_Bfree+0x3c>)
 8006864:	4809      	ldr	r0, [pc, #36]	; (800688c <_Bfree+0x40>)
 8006866:	218f      	movs	r1, #143	; 0x8f
 8006868:	f001 fd4e 	bl	8008308 <__assert_func>
 800686c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006870:	6006      	str	r6, [r0, #0]
 8006872:	60c6      	str	r6, [r0, #12]
 8006874:	b13c      	cbz	r4, 8006886 <_Bfree+0x3a>
 8006876:	69eb      	ldr	r3, [r5, #28]
 8006878:	6862      	ldr	r2, [r4, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006880:	6021      	str	r1, [r4, #0]
 8006882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006886:	bd70      	pop	{r4, r5, r6, pc}
 8006888:	0800a3d2 	.word	0x0800a3d2
 800688c:	0800a452 	.word	0x0800a452

08006890 <__multadd>:
 8006890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006894:	690d      	ldr	r5, [r1, #16]
 8006896:	4607      	mov	r7, r0
 8006898:	460c      	mov	r4, r1
 800689a:	461e      	mov	r6, r3
 800689c:	f101 0c14 	add.w	ip, r1, #20
 80068a0:	2000      	movs	r0, #0
 80068a2:	f8dc 3000 	ldr.w	r3, [ip]
 80068a6:	b299      	uxth	r1, r3
 80068a8:	fb02 6101 	mla	r1, r2, r1, r6
 80068ac:	0c1e      	lsrs	r6, r3, #16
 80068ae:	0c0b      	lsrs	r3, r1, #16
 80068b0:	fb02 3306 	mla	r3, r2, r6, r3
 80068b4:	b289      	uxth	r1, r1
 80068b6:	3001      	adds	r0, #1
 80068b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068bc:	4285      	cmp	r5, r0
 80068be:	f84c 1b04 	str.w	r1, [ip], #4
 80068c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068c6:	dcec      	bgt.n	80068a2 <__multadd+0x12>
 80068c8:	b30e      	cbz	r6, 800690e <__multadd+0x7e>
 80068ca:	68a3      	ldr	r3, [r4, #8]
 80068cc:	42ab      	cmp	r3, r5
 80068ce:	dc19      	bgt.n	8006904 <__multadd+0x74>
 80068d0:	6861      	ldr	r1, [r4, #4]
 80068d2:	4638      	mov	r0, r7
 80068d4:	3101      	adds	r1, #1
 80068d6:	f7ff ff79 	bl	80067cc <_Balloc>
 80068da:	4680      	mov	r8, r0
 80068dc:	b928      	cbnz	r0, 80068ea <__multadd+0x5a>
 80068de:	4602      	mov	r2, r0
 80068e0:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <__multadd+0x84>)
 80068e2:	480d      	ldr	r0, [pc, #52]	; (8006918 <__multadd+0x88>)
 80068e4:	21ba      	movs	r1, #186	; 0xba
 80068e6:	f001 fd0f 	bl	8008308 <__assert_func>
 80068ea:	6922      	ldr	r2, [r4, #16]
 80068ec:	3202      	adds	r2, #2
 80068ee:	f104 010c 	add.w	r1, r4, #12
 80068f2:	0092      	lsls	r2, r2, #2
 80068f4:	300c      	adds	r0, #12
 80068f6:	f001 fcef 	bl	80082d8 <memcpy>
 80068fa:	4621      	mov	r1, r4
 80068fc:	4638      	mov	r0, r7
 80068fe:	f7ff ffa5 	bl	800684c <_Bfree>
 8006902:	4644      	mov	r4, r8
 8006904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006908:	3501      	adds	r5, #1
 800690a:	615e      	str	r6, [r3, #20]
 800690c:	6125      	str	r5, [r4, #16]
 800690e:	4620      	mov	r0, r4
 8006910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006914:	0800a441 	.word	0x0800a441
 8006918:	0800a452 	.word	0x0800a452

0800691c <__s2b>:
 800691c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006920:	460c      	mov	r4, r1
 8006922:	4615      	mov	r5, r2
 8006924:	461f      	mov	r7, r3
 8006926:	2209      	movs	r2, #9
 8006928:	3308      	adds	r3, #8
 800692a:	4606      	mov	r6, r0
 800692c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006930:	2100      	movs	r1, #0
 8006932:	2201      	movs	r2, #1
 8006934:	429a      	cmp	r2, r3
 8006936:	db09      	blt.n	800694c <__s2b+0x30>
 8006938:	4630      	mov	r0, r6
 800693a:	f7ff ff47 	bl	80067cc <_Balloc>
 800693e:	b940      	cbnz	r0, 8006952 <__s2b+0x36>
 8006940:	4602      	mov	r2, r0
 8006942:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <__s2b+0x8c>)
 8006944:	4819      	ldr	r0, [pc, #100]	; (80069ac <__s2b+0x90>)
 8006946:	21d3      	movs	r1, #211	; 0xd3
 8006948:	f001 fcde 	bl	8008308 <__assert_func>
 800694c:	0052      	lsls	r2, r2, #1
 800694e:	3101      	adds	r1, #1
 8006950:	e7f0      	b.n	8006934 <__s2b+0x18>
 8006952:	9b08      	ldr	r3, [sp, #32]
 8006954:	6143      	str	r3, [r0, #20]
 8006956:	2d09      	cmp	r5, #9
 8006958:	f04f 0301 	mov.w	r3, #1
 800695c:	6103      	str	r3, [r0, #16]
 800695e:	dd16      	ble.n	800698e <__s2b+0x72>
 8006960:	f104 0909 	add.w	r9, r4, #9
 8006964:	46c8      	mov	r8, r9
 8006966:	442c      	add	r4, r5
 8006968:	f818 3b01 	ldrb.w	r3, [r8], #1
 800696c:	4601      	mov	r1, r0
 800696e:	3b30      	subs	r3, #48	; 0x30
 8006970:	220a      	movs	r2, #10
 8006972:	4630      	mov	r0, r6
 8006974:	f7ff ff8c 	bl	8006890 <__multadd>
 8006978:	45a0      	cmp	r8, r4
 800697a:	d1f5      	bne.n	8006968 <__s2b+0x4c>
 800697c:	f1a5 0408 	sub.w	r4, r5, #8
 8006980:	444c      	add	r4, r9
 8006982:	1b2d      	subs	r5, r5, r4
 8006984:	1963      	adds	r3, r4, r5
 8006986:	42bb      	cmp	r3, r7
 8006988:	db04      	blt.n	8006994 <__s2b+0x78>
 800698a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800698e:	340a      	adds	r4, #10
 8006990:	2509      	movs	r5, #9
 8006992:	e7f6      	b.n	8006982 <__s2b+0x66>
 8006994:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006998:	4601      	mov	r1, r0
 800699a:	3b30      	subs	r3, #48	; 0x30
 800699c:	220a      	movs	r2, #10
 800699e:	4630      	mov	r0, r6
 80069a0:	f7ff ff76 	bl	8006890 <__multadd>
 80069a4:	e7ee      	b.n	8006984 <__s2b+0x68>
 80069a6:	bf00      	nop
 80069a8:	0800a441 	.word	0x0800a441
 80069ac:	0800a452 	.word	0x0800a452

080069b0 <__hi0bits>:
 80069b0:	0c03      	lsrs	r3, r0, #16
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	b9d3      	cbnz	r3, 80069ec <__hi0bits+0x3c>
 80069b6:	0400      	lsls	r0, r0, #16
 80069b8:	2310      	movs	r3, #16
 80069ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069be:	bf04      	itt	eq
 80069c0:	0200      	lsleq	r0, r0, #8
 80069c2:	3308      	addeq	r3, #8
 80069c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069c8:	bf04      	itt	eq
 80069ca:	0100      	lsleq	r0, r0, #4
 80069cc:	3304      	addeq	r3, #4
 80069ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069d2:	bf04      	itt	eq
 80069d4:	0080      	lsleq	r0, r0, #2
 80069d6:	3302      	addeq	r3, #2
 80069d8:	2800      	cmp	r0, #0
 80069da:	db05      	blt.n	80069e8 <__hi0bits+0x38>
 80069dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069e0:	f103 0301 	add.w	r3, r3, #1
 80069e4:	bf08      	it	eq
 80069e6:	2320      	moveq	r3, #32
 80069e8:	4618      	mov	r0, r3
 80069ea:	4770      	bx	lr
 80069ec:	2300      	movs	r3, #0
 80069ee:	e7e4      	b.n	80069ba <__hi0bits+0xa>

080069f0 <__lo0bits>:
 80069f0:	6803      	ldr	r3, [r0, #0]
 80069f2:	f013 0207 	ands.w	r2, r3, #7
 80069f6:	d00c      	beq.n	8006a12 <__lo0bits+0x22>
 80069f8:	07d9      	lsls	r1, r3, #31
 80069fa:	d422      	bmi.n	8006a42 <__lo0bits+0x52>
 80069fc:	079a      	lsls	r2, r3, #30
 80069fe:	bf49      	itett	mi
 8006a00:	085b      	lsrmi	r3, r3, #1
 8006a02:	089b      	lsrpl	r3, r3, #2
 8006a04:	6003      	strmi	r3, [r0, #0]
 8006a06:	2201      	movmi	r2, #1
 8006a08:	bf5c      	itt	pl
 8006a0a:	6003      	strpl	r3, [r0, #0]
 8006a0c:	2202      	movpl	r2, #2
 8006a0e:	4610      	mov	r0, r2
 8006a10:	4770      	bx	lr
 8006a12:	b299      	uxth	r1, r3
 8006a14:	b909      	cbnz	r1, 8006a1a <__lo0bits+0x2a>
 8006a16:	0c1b      	lsrs	r3, r3, #16
 8006a18:	2210      	movs	r2, #16
 8006a1a:	b2d9      	uxtb	r1, r3
 8006a1c:	b909      	cbnz	r1, 8006a22 <__lo0bits+0x32>
 8006a1e:	3208      	adds	r2, #8
 8006a20:	0a1b      	lsrs	r3, r3, #8
 8006a22:	0719      	lsls	r1, r3, #28
 8006a24:	bf04      	itt	eq
 8006a26:	091b      	lsreq	r3, r3, #4
 8006a28:	3204      	addeq	r2, #4
 8006a2a:	0799      	lsls	r1, r3, #30
 8006a2c:	bf04      	itt	eq
 8006a2e:	089b      	lsreq	r3, r3, #2
 8006a30:	3202      	addeq	r2, #2
 8006a32:	07d9      	lsls	r1, r3, #31
 8006a34:	d403      	bmi.n	8006a3e <__lo0bits+0x4e>
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	f102 0201 	add.w	r2, r2, #1
 8006a3c:	d003      	beq.n	8006a46 <__lo0bits+0x56>
 8006a3e:	6003      	str	r3, [r0, #0]
 8006a40:	e7e5      	b.n	8006a0e <__lo0bits+0x1e>
 8006a42:	2200      	movs	r2, #0
 8006a44:	e7e3      	b.n	8006a0e <__lo0bits+0x1e>
 8006a46:	2220      	movs	r2, #32
 8006a48:	e7e1      	b.n	8006a0e <__lo0bits+0x1e>
	...

08006a4c <__i2b>:
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	460c      	mov	r4, r1
 8006a50:	2101      	movs	r1, #1
 8006a52:	f7ff febb 	bl	80067cc <_Balloc>
 8006a56:	4602      	mov	r2, r0
 8006a58:	b928      	cbnz	r0, 8006a66 <__i2b+0x1a>
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <__i2b+0x24>)
 8006a5c:	4805      	ldr	r0, [pc, #20]	; (8006a74 <__i2b+0x28>)
 8006a5e:	f240 1145 	movw	r1, #325	; 0x145
 8006a62:	f001 fc51 	bl	8008308 <__assert_func>
 8006a66:	2301      	movs	r3, #1
 8006a68:	6144      	str	r4, [r0, #20]
 8006a6a:	6103      	str	r3, [r0, #16]
 8006a6c:	bd10      	pop	{r4, pc}
 8006a6e:	bf00      	nop
 8006a70:	0800a441 	.word	0x0800a441
 8006a74:	0800a452 	.word	0x0800a452

08006a78 <__multiply>:
 8006a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	4691      	mov	r9, r2
 8006a7e:	690a      	ldr	r2, [r1, #16]
 8006a80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	bfb8      	it	lt
 8006a88:	460b      	movlt	r3, r1
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	bfbc      	itt	lt
 8006a8e:	464c      	movlt	r4, r9
 8006a90:	4699      	movlt	r9, r3
 8006a92:	6927      	ldr	r7, [r4, #16]
 8006a94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a98:	68a3      	ldr	r3, [r4, #8]
 8006a9a:	6861      	ldr	r1, [r4, #4]
 8006a9c:	eb07 060a 	add.w	r6, r7, sl
 8006aa0:	42b3      	cmp	r3, r6
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	bfb8      	it	lt
 8006aa6:	3101      	addlt	r1, #1
 8006aa8:	f7ff fe90 	bl	80067cc <_Balloc>
 8006aac:	b930      	cbnz	r0, 8006abc <__multiply+0x44>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	4b44      	ldr	r3, [pc, #272]	; (8006bc4 <__multiply+0x14c>)
 8006ab2:	4845      	ldr	r0, [pc, #276]	; (8006bc8 <__multiply+0x150>)
 8006ab4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ab8:	f001 fc26 	bl	8008308 <__assert_func>
 8006abc:	f100 0514 	add.w	r5, r0, #20
 8006ac0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ac4:	462b      	mov	r3, r5
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	4543      	cmp	r3, r8
 8006aca:	d321      	bcc.n	8006b10 <__multiply+0x98>
 8006acc:	f104 0314 	add.w	r3, r4, #20
 8006ad0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ad4:	f109 0314 	add.w	r3, r9, #20
 8006ad8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006adc:	9202      	str	r2, [sp, #8]
 8006ade:	1b3a      	subs	r2, r7, r4
 8006ae0:	3a15      	subs	r2, #21
 8006ae2:	f022 0203 	bic.w	r2, r2, #3
 8006ae6:	3204      	adds	r2, #4
 8006ae8:	f104 0115 	add.w	r1, r4, #21
 8006aec:	428f      	cmp	r7, r1
 8006aee:	bf38      	it	cc
 8006af0:	2204      	movcc	r2, #4
 8006af2:	9201      	str	r2, [sp, #4]
 8006af4:	9a02      	ldr	r2, [sp, #8]
 8006af6:	9303      	str	r3, [sp, #12]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d80c      	bhi.n	8006b16 <__multiply+0x9e>
 8006afc:	2e00      	cmp	r6, #0
 8006afe:	dd03      	ble.n	8006b08 <__multiply+0x90>
 8006b00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d05b      	beq.n	8006bc0 <__multiply+0x148>
 8006b08:	6106      	str	r6, [r0, #16]
 8006b0a:	b005      	add	sp, #20
 8006b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b10:	f843 2b04 	str.w	r2, [r3], #4
 8006b14:	e7d8      	b.n	8006ac8 <__multiply+0x50>
 8006b16:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b1a:	f1ba 0f00 	cmp.w	sl, #0
 8006b1e:	d024      	beq.n	8006b6a <__multiply+0xf2>
 8006b20:	f104 0e14 	add.w	lr, r4, #20
 8006b24:	46a9      	mov	r9, r5
 8006b26:	f04f 0c00 	mov.w	ip, #0
 8006b2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b2e:	f8d9 1000 	ldr.w	r1, [r9]
 8006b32:	fa1f fb82 	uxth.w	fp, r2
 8006b36:	b289      	uxth	r1, r1
 8006b38:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b40:	f8d9 2000 	ldr.w	r2, [r9]
 8006b44:	4461      	add	r1, ip
 8006b46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b4a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006b4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b52:	b289      	uxth	r1, r1
 8006b54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b58:	4577      	cmp	r7, lr
 8006b5a:	f849 1b04 	str.w	r1, [r9], #4
 8006b5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b62:	d8e2      	bhi.n	8006b2a <__multiply+0xb2>
 8006b64:	9a01      	ldr	r2, [sp, #4]
 8006b66:	f845 c002 	str.w	ip, [r5, r2]
 8006b6a:	9a03      	ldr	r2, [sp, #12]
 8006b6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b70:	3304      	adds	r3, #4
 8006b72:	f1b9 0f00 	cmp.w	r9, #0
 8006b76:	d021      	beq.n	8006bbc <__multiply+0x144>
 8006b78:	6829      	ldr	r1, [r5, #0]
 8006b7a:	f104 0c14 	add.w	ip, r4, #20
 8006b7e:	46ae      	mov	lr, r5
 8006b80:	f04f 0a00 	mov.w	sl, #0
 8006b84:	f8bc b000 	ldrh.w	fp, [ip]
 8006b88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b8c:	fb09 220b 	mla	r2, r9, fp, r2
 8006b90:	4452      	add	r2, sl
 8006b92:	b289      	uxth	r1, r1
 8006b94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b98:	f84e 1b04 	str.w	r1, [lr], #4
 8006b9c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006ba0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ba4:	f8be 1000 	ldrh.w	r1, [lr]
 8006ba8:	fb09 110a 	mla	r1, r9, sl, r1
 8006bac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006bb0:	4567      	cmp	r7, ip
 8006bb2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bb6:	d8e5      	bhi.n	8006b84 <__multiply+0x10c>
 8006bb8:	9a01      	ldr	r2, [sp, #4]
 8006bba:	50a9      	str	r1, [r5, r2]
 8006bbc:	3504      	adds	r5, #4
 8006bbe:	e799      	b.n	8006af4 <__multiply+0x7c>
 8006bc0:	3e01      	subs	r6, #1
 8006bc2:	e79b      	b.n	8006afc <__multiply+0x84>
 8006bc4:	0800a441 	.word	0x0800a441
 8006bc8:	0800a452 	.word	0x0800a452

08006bcc <__pow5mult>:
 8006bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	4615      	mov	r5, r2
 8006bd2:	f012 0203 	ands.w	r2, r2, #3
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460f      	mov	r7, r1
 8006bda:	d007      	beq.n	8006bec <__pow5mult+0x20>
 8006bdc:	4c25      	ldr	r4, [pc, #148]	; (8006c74 <__pow5mult+0xa8>)
 8006bde:	3a01      	subs	r2, #1
 8006be0:	2300      	movs	r3, #0
 8006be2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006be6:	f7ff fe53 	bl	8006890 <__multadd>
 8006bea:	4607      	mov	r7, r0
 8006bec:	10ad      	asrs	r5, r5, #2
 8006bee:	d03d      	beq.n	8006c6c <__pow5mult+0xa0>
 8006bf0:	69f4      	ldr	r4, [r6, #28]
 8006bf2:	b97c      	cbnz	r4, 8006c14 <__pow5mult+0x48>
 8006bf4:	2010      	movs	r0, #16
 8006bf6:	f7ff fd35 	bl	8006664 <malloc>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	61f0      	str	r0, [r6, #28]
 8006bfe:	b928      	cbnz	r0, 8006c0c <__pow5mult+0x40>
 8006c00:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <__pow5mult+0xac>)
 8006c02:	481e      	ldr	r0, [pc, #120]	; (8006c7c <__pow5mult+0xb0>)
 8006c04:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006c08:	f001 fb7e 	bl	8008308 <__assert_func>
 8006c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c10:	6004      	str	r4, [r0, #0]
 8006c12:	60c4      	str	r4, [r0, #12]
 8006c14:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006c18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c1c:	b94c      	cbnz	r4, 8006c32 <__pow5mult+0x66>
 8006c1e:	f240 2171 	movw	r1, #625	; 0x271
 8006c22:	4630      	mov	r0, r6
 8006c24:	f7ff ff12 	bl	8006a4c <__i2b>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c2e:	4604      	mov	r4, r0
 8006c30:	6003      	str	r3, [r0, #0]
 8006c32:	f04f 0900 	mov.w	r9, #0
 8006c36:	07eb      	lsls	r3, r5, #31
 8006c38:	d50a      	bpl.n	8006c50 <__pow5mult+0x84>
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f7ff ff1a 	bl	8006a78 <__multiply>
 8006c44:	4639      	mov	r1, r7
 8006c46:	4680      	mov	r8, r0
 8006c48:	4630      	mov	r0, r6
 8006c4a:	f7ff fdff 	bl	800684c <_Bfree>
 8006c4e:	4647      	mov	r7, r8
 8006c50:	106d      	asrs	r5, r5, #1
 8006c52:	d00b      	beq.n	8006c6c <__pow5mult+0xa0>
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	b938      	cbnz	r0, 8006c68 <__pow5mult+0x9c>
 8006c58:	4622      	mov	r2, r4
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f7ff ff0b 	bl	8006a78 <__multiply>
 8006c62:	6020      	str	r0, [r4, #0]
 8006c64:	f8c0 9000 	str.w	r9, [r0]
 8006c68:	4604      	mov	r4, r0
 8006c6a:	e7e4      	b.n	8006c36 <__pow5mult+0x6a>
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c72:	bf00      	nop
 8006c74:	0800a5a0 	.word	0x0800a5a0
 8006c78:	0800a3d2 	.word	0x0800a3d2
 8006c7c:	0800a452 	.word	0x0800a452

08006c80 <__lshift>:
 8006c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c84:	460c      	mov	r4, r1
 8006c86:	6849      	ldr	r1, [r1, #4]
 8006c88:	6923      	ldr	r3, [r4, #16]
 8006c8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c8e:	68a3      	ldr	r3, [r4, #8]
 8006c90:	4607      	mov	r7, r0
 8006c92:	4691      	mov	r9, r2
 8006c94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c98:	f108 0601 	add.w	r6, r8, #1
 8006c9c:	42b3      	cmp	r3, r6
 8006c9e:	db0b      	blt.n	8006cb8 <__lshift+0x38>
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f7ff fd93 	bl	80067cc <_Balloc>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	b948      	cbnz	r0, 8006cbe <__lshift+0x3e>
 8006caa:	4602      	mov	r2, r0
 8006cac:	4b28      	ldr	r3, [pc, #160]	; (8006d50 <__lshift+0xd0>)
 8006cae:	4829      	ldr	r0, [pc, #164]	; (8006d54 <__lshift+0xd4>)
 8006cb0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006cb4:	f001 fb28 	bl	8008308 <__assert_func>
 8006cb8:	3101      	adds	r1, #1
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	e7ee      	b.n	8006c9c <__lshift+0x1c>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f100 0114 	add.w	r1, r0, #20
 8006cc4:	f100 0210 	add.w	r2, r0, #16
 8006cc8:	4618      	mov	r0, r3
 8006cca:	4553      	cmp	r3, sl
 8006ccc:	db33      	blt.n	8006d36 <__lshift+0xb6>
 8006cce:	6920      	ldr	r0, [r4, #16]
 8006cd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cd4:	f104 0314 	add.w	r3, r4, #20
 8006cd8:	f019 091f 	ands.w	r9, r9, #31
 8006cdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ce0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ce4:	d02b      	beq.n	8006d3e <__lshift+0xbe>
 8006ce6:	f1c9 0e20 	rsb	lr, r9, #32
 8006cea:	468a      	mov	sl, r1
 8006cec:	2200      	movs	r2, #0
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	fa00 f009 	lsl.w	r0, r0, r9
 8006cf4:	4310      	orrs	r0, r2
 8006cf6:	f84a 0b04 	str.w	r0, [sl], #4
 8006cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cfe:	459c      	cmp	ip, r3
 8006d00:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d04:	d8f3      	bhi.n	8006cee <__lshift+0x6e>
 8006d06:	ebac 0304 	sub.w	r3, ip, r4
 8006d0a:	3b15      	subs	r3, #21
 8006d0c:	f023 0303 	bic.w	r3, r3, #3
 8006d10:	3304      	adds	r3, #4
 8006d12:	f104 0015 	add.w	r0, r4, #21
 8006d16:	4584      	cmp	ip, r0
 8006d18:	bf38      	it	cc
 8006d1a:	2304      	movcc	r3, #4
 8006d1c:	50ca      	str	r2, [r1, r3]
 8006d1e:	b10a      	cbz	r2, 8006d24 <__lshift+0xa4>
 8006d20:	f108 0602 	add.w	r6, r8, #2
 8006d24:	3e01      	subs	r6, #1
 8006d26:	4638      	mov	r0, r7
 8006d28:	612e      	str	r6, [r5, #16]
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	f7ff fd8e 	bl	800684c <_Bfree>
 8006d30:	4628      	mov	r0, r5
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	e7c5      	b.n	8006cca <__lshift+0x4a>
 8006d3e:	3904      	subs	r1, #4
 8006d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d44:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d48:	459c      	cmp	ip, r3
 8006d4a:	d8f9      	bhi.n	8006d40 <__lshift+0xc0>
 8006d4c:	e7ea      	b.n	8006d24 <__lshift+0xa4>
 8006d4e:	bf00      	nop
 8006d50:	0800a441 	.word	0x0800a441
 8006d54:	0800a452 	.word	0x0800a452

08006d58 <__mcmp>:
 8006d58:	b530      	push	{r4, r5, lr}
 8006d5a:	6902      	ldr	r2, [r0, #16]
 8006d5c:	690c      	ldr	r4, [r1, #16]
 8006d5e:	1b12      	subs	r2, r2, r4
 8006d60:	d10e      	bne.n	8006d80 <__mcmp+0x28>
 8006d62:	f100 0314 	add.w	r3, r0, #20
 8006d66:	3114      	adds	r1, #20
 8006d68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d78:	42a5      	cmp	r5, r4
 8006d7a:	d003      	beq.n	8006d84 <__mcmp+0x2c>
 8006d7c:	d305      	bcc.n	8006d8a <__mcmp+0x32>
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4610      	mov	r0, r2
 8006d82:	bd30      	pop	{r4, r5, pc}
 8006d84:	4283      	cmp	r3, r0
 8006d86:	d3f3      	bcc.n	8006d70 <__mcmp+0x18>
 8006d88:	e7fa      	b.n	8006d80 <__mcmp+0x28>
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8e:	e7f7      	b.n	8006d80 <__mcmp+0x28>

08006d90 <__mdiff>:
 8006d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	460c      	mov	r4, r1
 8006d96:	4606      	mov	r6, r0
 8006d98:	4611      	mov	r1, r2
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4690      	mov	r8, r2
 8006d9e:	f7ff ffdb 	bl	8006d58 <__mcmp>
 8006da2:	1e05      	subs	r5, r0, #0
 8006da4:	d110      	bne.n	8006dc8 <__mdiff+0x38>
 8006da6:	4629      	mov	r1, r5
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7ff fd0f 	bl	80067cc <_Balloc>
 8006dae:	b930      	cbnz	r0, 8006dbe <__mdiff+0x2e>
 8006db0:	4b3a      	ldr	r3, [pc, #232]	; (8006e9c <__mdiff+0x10c>)
 8006db2:	4602      	mov	r2, r0
 8006db4:	f240 2137 	movw	r1, #567	; 0x237
 8006db8:	4839      	ldr	r0, [pc, #228]	; (8006ea0 <__mdiff+0x110>)
 8006dba:	f001 faa5 	bl	8008308 <__assert_func>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006dc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc8:	bfa4      	itt	ge
 8006dca:	4643      	movge	r3, r8
 8006dcc:	46a0      	movge	r8, r4
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006dd4:	bfa6      	itte	ge
 8006dd6:	461c      	movge	r4, r3
 8006dd8:	2500      	movge	r5, #0
 8006dda:	2501      	movlt	r5, #1
 8006ddc:	f7ff fcf6 	bl	80067cc <_Balloc>
 8006de0:	b920      	cbnz	r0, 8006dec <__mdiff+0x5c>
 8006de2:	4b2e      	ldr	r3, [pc, #184]	; (8006e9c <__mdiff+0x10c>)
 8006de4:	4602      	mov	r2, r0
 8006de6:	f240 2145 	movw	r1, #581	; 0x245
 8006dea:	e7e5      	b.n	8006db8 <__mdiff+0x28>
 8006dec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006df0:	6926      	ldr	r6, [r4, #16]
 8006df2:	60c5      	str	r5, [r0, #12]
 8006df4:	f104 0914 	add.w	r9, r4, #20
 8006df8:	f108 0514 	add.w	r5, r8, #20
 8006dfc:	f100 0e14 	add.w	lr, r0, #20
 8006e00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e08:	f108 0210 	add.w	r2, r8, #16
 8006e0c:	46f2      	mov	sl, lr
 8006e0e:	2100      	movs	r1, #0
 8006e10:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e18:	fa11 f88b 	uxtah	r8, r1, fp
 8006e1c:	b299      	uxth	r1, r3
 8006e1e:	0c1b      	lsrs	r3, r3, #16
 8006e20:	eba8 0801 	sub.w	r8, r8, r1
 8006e24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e28:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e2c:	fa1f f888 	uxth.w	r8, r8
 8006e30:	1419      	asrs	r1, r3, #16
 8006e32:	454e      	cmp	r6, r9
 8006e34:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e38:	f84a 3b04 	str.w	r3, [sl], #4
 8006e3c:	d8e8      	bhi.n	8006e10 <__mdiff+0x80>
 8006e3e:	1b33      	subs	r3, r6, r4
 8006e40:	3b15      	subs	r3, #21
 8006e42:	f023 0303 	bic.w	r3, r3, #3
 8006e46:	3304      	adds	r3, #4
 8006e48:	3415      	adds	r4, #21
 8006e4a:	42a6      	cmp	r6, r4
 8006e4c:	bf38      	it	cc
 8006e4e:	2304      	movcc	r3, #4
 8006e50:	441d      	add	r5, r3
 8006e52:	4473      	add	r3, lr
 8006e54:	469e      	mov	lr, r3
 8006e56:	462e      	mov	r6, r5
 8006e58:	4566      	cmp	r6, ip
 8006e5a:	d30e      	bcc.n	8006e7a <__mdiff+0xea>
 8006e5c:	f10c 0203 	add.w	r2, ip, #3
 8006e60:	1b52      	subs	r2, r2, r5
 8006e62:	f022 0203 	bic.w	r2, r2, #3
 8006e66:	3d03      	subs	r5, #3
 8006e68:	45ac      	cmp	ip, r5
 8006e6a:	bf38      	it	cc
 8006e6c:	2200      	movcc	r2, #0
 8006e6e:	4413      	add	r3, r2
 8006e70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e74:	b17a      	cbz	r2, 8006e96 <__mdiff+0x106>
 8006e76:	6107      	str	r7, [r0, #16]
 8006e78:	e7a4      	b.n	8006dc4 <__mdiff+0x34>
 8006e7a:	f856 8b04 	ldr.w	r8, [r6], #4
 8006e7e:	fa11 f288 	uxtah	r2, r1, r8
 8006e82:	1414      	asrs	r4, r2, #16
 8006e84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e88:	b292      	uxth	r2, r2
 8006e8a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006e8e:	f84e 2b04 	str.w	r2, [lr], #4
 8006e92:	1421      	asrs	r1, r4, #16
 8006e94:	e7e0      	b.n	8006e58 <__mdiff+0xc8>
 8006e96:	3f01      	subs	r7, #1
 8006e98:	e7ea      	b.n	8006e70 <__mdiff+0xe0>
 8006e9a:	bf00      	nop
 8006e9c:	0800a441 	.word	0x0800a441
 8006ea0:	0800a452 	.word	0x0800a452

08006ea4 <__ulp>:
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	ed8d 0b00 	vstr	d0, [sp]
 8006eaa:	9a01      	ldr	r2, [sp, #4]
 8006eac:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <__ulp+0x48>)
 8006eae:	4013      	ands	r3, r2
 8006eb0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dc08      	bgt.n	8006eca <__ulp+0x26>
 8006eb8:	425b      	negs	r3, r3
 8006eba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006ebe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006ec2:	da04      	bge.n	8006ece <__ulp+0x2a>
 8006ec4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ec8:	4113      	asrs	r3, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	e008      	b.n	8006ee0 <__ulp+0x3c>
 8006ece:	f1a2 0314 	sub.w	r3, r2, #20
 8006ed2:	2b1e      	cmp	r3, #30
 8006ed4:	bfda      	itte	le
 8006ed6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006eda:	40da      	lsrle	r2, r3
 8006edc:	2201      	movgt	r2, #1
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	ec41 0b10 	vmov	d0, r0, r1
 8006ee8:	b002      	add	sp, #8
 8006eea:	4770      	bx	lr
 8006eec:	7ff00000 	.word	0x7ff00000

08006ef0 <__b2d>:
 8006ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef4:	6906      	ldr	r6, [r0, #16]
 8006ef6:	f100 0814 	add.w	r8, r0, #20
 8006efa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006efe:	1f37      	subs	r7, r6, #4
 8006f00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f04:	4610      	mov	r0, r2
 8006f06:	f7ff fd53 	bl	80069b0 <__hi0bits>
 8006f0a:	f1c0 0320 	rsb	r3, r0, #32
 8006f0e:	280a      	cmp	r0, #10
 8006f10:	600b      	str	r3, [r1, #0]
 8006f12:	491b      	ldr	r1, [pc, #108]	; (8006f80 <__b2d+0x90>)
 8006f14:	dc15      	bgt.n	8006f42 <__b2d+0x52>
 8006f16:	f1c0 0c0b 	rsb	ip, r0, #11
 8006f1a:	fa22 f30c 	lsr.w	r3, r2, ip
 8006f1e:	45b8      	cmp	r8, r7
 8006f20:	ea43 0501 	orr.w	r5, r3, r1
 8006f24:	bf34      	ite	cc
 8006f26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006f2a:	2300      	movcs	r3, #0
 8006f2c:	3015      	adds	r0, #21
 8006f2e:	fa02 f000 	lsl.w	r0, r2, r0
 8006f32:	fa23 f30c 	lsr.w	r3, r3, ip
 8006f36:	4303      	orrs	r3, r0
 8006f38:	461c      	mov	r4, r3
 8006f3a:	ec45 4b10 	vmov	d0, r4, r5
 8006f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f42:	45b8      	cmp	r8, r7
 8006f44:	bf3a      	itte	cc
 8006f46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006f4a:	f1a6 0708 	subcc.w	r7, r6, #8
 8006f4e:	2300      	movcs	r3, #0
 8006f50:	380b      	subs	r0, #11
 8006f52:	d012      	beq.n	8006f7a <__b2d+0x8a>
 8006f54:	f1c0 0120 	rsb	r1, r0, #32
 8006f58:	fa23 f401 	lsr.w	r4, r3, r1
 8006f5c:	4082      	lsls	r2, r0
 8006f5e:	4322      	orrs	r2, r4
 8006f60:	4547      	cmp	r7, r8
 8006f62:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006f66:	bf8c      	ite	hi
 8006f68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006f6c:	2200      	movls	r2, #0
 8006f6e:	4083      	lsls	r3, r0
 8006f70:	40ca      	lsrs	r2, r1
 8006f72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006f76:	4313      	orrs	r3, r2
 8006f78:	e7de      	b.n	8006f38 <__b2d+0x48>
 8006f7a:	ea42 0501 	orr.w	r5, r2, r1
 8006f7e:	e7db      	b.n	8006f38 <__b2d+0x48>
 8006f80:	3ff00000 	.word	0x3ff00000

08006f84 <__d2b>:
 8006f84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f88:	460f      	mov	r7, r1
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	ec59 8b10 	vmov	r8, r9, d0
 8006f90:	4616      	mov	r6, r2
 8006f92:	f7ff fc1b 	bl	80067cc <_Balloc>
 8006f96:	4604      	mov	r4, r0
 8006f98:	b930      	cbnz	r0, 8006fa8 <__d2b+0x24>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	4b24      	ldr	r3, [pc, #144]	; (8007030 <__d2b+0xac>)
 8006f9e:	4825      	ldr	r0, [pc, #148]	; (8007034 <__d2b+0xb0>)
 8006fa0:	f240 310f 	movw	r1, #783	; 0x30f
 8006fa4:	f001 f9b0 	bl	8008308 <__assert_func>
 8006fa8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fb0:	bb2d      	cbnz	r5, 8006ffe <__d2b+0x7a>
 8006fb2:	9301      	str	r3, [sp, #4]
 8006fb4:	f1b8 0300 	subs.w	r3, r8, #0
 8006fb8:	d026      	beq.n	8007008 <__d2b+0x84>
 8006fba:	4668      	mov	r0, sp
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	f7ff fd17 	bl	80069f0 <__lo0bits>
 8006fc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fc6:	b1e8      	cbz	r0, 8007004 <__d2b+0x80>
 8006fc8:	f1c0 0320 	rsb	r3, r0, #32
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	40c2      	lsrs	r2, r0
 8006fd4:	6163      	str	r3, [r4, #20]
 8006fd6:	9201      	str	r2, [sp, #4]
 8006fd8:	9b01      	ldr	r3, [sp, #4]
 8006fda:	61a3      	str	r3, [r4, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bf14      	ite	ne
 8006fe0:	2202      	movne	r2, #2
 8006fe2:	2201      	moveq	r2, #1
 8006fe4:	6122      	str	r2, [r4, #16]
 8006fe6:	b1bd      	cbz	r5, 8007018 <__d2b+0x94>
 8006fe8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fec:	4405      	add	r5, r0
 8006fee:	603d      	str	r5, [r7, #0]
 8006ff0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ff4:	6030      	str	r0, [r6, #0]
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	b003      	add	sp, #12
 8006ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007002:	e7d6      	b.n	8006fb2 <__d2b+0x2e>
 8007004:	6161      	str	r1, [r4, #20]
 8007006:	e7e7      	b.n	8006fd8 <__d2b+0x54>
 8007008:	a801      	add	r0, sp, #4
 800700a:	f7ff fcf1 	bl	80069f0 <__lo0bits>
 800700e:	9b01      	ldr	r3, [sp, #4]
 8007010:	6163      	str	r3, [r4, #20]
 8007012:	3020      	adds	r0, #32
 8007014:	2201      	movs	r2, #1
 8007016:	e7e5      	b.n	8006fe4 <__d2b+0x60>
 8007018:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800701c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007020:	6038      	str	r0, [r7, #0]
 8007022:	6918      	ldr	r0, [r3, #16]
 8007024:	f7ff fcc4 	bl	80069b0 <__hi0bits>
 8007028:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800702c:	e7e2      	b.n	8006ff4 <__d2b+0x70>
 800702e:	bf00      	nop
 8007030:	0800a441 	.word	0x0800a441
 8007034:	0800a452 	.word	0x0800a452

08007038 <__ratio>:
 8007038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	4688      	mov	r8, r1
 800703e:	4669      	mov	r1, sp
 8007040:	4681      	mov	r9, r0
 8007042:	f7ff ff55 	bl	8006ef0 <__b2d>
 8007046:	a901      	add	r1, sp, #4
 8007048:	4640      	mov	r0, r8
 800704a:	ec55 4b10 	vmov	r4, r5, d0
 800704e:	f7ff ff4f 	bl	8006ef0 <__b2d>
 8007052:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007056:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800705a:	eba3 0c02 	sub.w	ip, r3, r2
 800705e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007068:	ec51 0b10 	vmov	r0, r1, d0
 800706c:	2b00      	cmp	r3, #0
 800706e:	bfd6      	itet	le
 8007070:	460a      	movle	r2, r1
 8007072:	462a      	movgt	r2, r5
 8007074:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007078:	468b      	mov	fp, r1
 800707a:	462f      	mov	r7, r5
 800707c:	bfd4      	ite	le
 800707e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007082:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007086:	4620      	mov	r0, r4
 8007088:	ee10 2a10 	vmov	r2, s0
 800708c:	465b      	mov	r3, fp
 800708e:	4639      	mov	r1, r7
 8007090:	f7f9 fbfc 	bl	800088c <__aeabi_ddiv>
 8007094:	ec41 0b10 	vmov	d0, r0, r1
 8007098:	b003      	add	sp, #12
 800709a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800709e <__copybits>:
 800709e:	3901      	subs	r1, #1
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	1149      	asrs	r1, r1, #5
 80070a4:	6914      	ldr	r4, [r2, #16]
 80070a6:	3101      	adds	r1, #1
 80070a8:	f102 0314 	add.w	r3, r2, #20
 80070ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070b4:	1f05      	subs	r5, r0, #4
 80070b6:	42a3      	cmp	r3, r4
 80070b8:	d30c      	bcc.n	80070d4 <__copybits+0x36>
 80070ba:	1aa3      	subs	r3, r4, r2
 80070bc:	3b11      	subs	r3, #17
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	3211      	adds	r2, #17
 80070c4:	42a2      	cmp	r2, r4
 80070c6:	bf88      	it	hi
 80070c8:	2300      	movhi	r3, #0
 80070ca:	4418      	add	r0, r3
 80070cc:	2300      	movs	r3, #0
 80070ce:	4288      	cmp	r0, r1
 80070d0:	d305      	bcc.n	80070de <__copybits+0x40>
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	f853 6b04 	ldr.w	r6, [r3], #4
 80070d8:	f845 6f04 	str.w	r6, [r5, #4]!
 80070dc:	e7eb      	b.n	80070b6 <__copybits+0x18>
 80070de:	f840 3b04 	str.w	r3, [r0], #4
 80070e2:	e7f4      	b.n	80070ce <__copybits+0x30>

080070e4 <__any_on>:
 80070e4:	f100 0214 	add.w	r2, r0, #20
 80070e8:	6900      	ldr	r0, [r0, #16]
 80070ea:	114b      	asrs	r3, r1, #5
 80070ec:	4298      	cmp	r0, r3
 80070ee:	b510      	push	{r4, lr}
 80070f0:	db11      	blt.n	8007116 <__any_on+0x32>
 80070f2:	dd0a      	ble.n	800710a <__any_on+0x26>
 80070f4:	f011 011f 	ands.w	r1, r1, #31
 80070f8:	d007      	beq.n	800710a <__any_on+0x26>
 80070fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80070fe:	fa24 f001 	lsr.w	r0, r4, r1
 8007102:	fa00 f101 	lsl.w	r1, r0, r1
 8007106:	428c      	cmp	r4, r1
 8007108:	d10b      	bne.n	8007122 <__any_on+0x3e>
 800710a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800710e:	4293      	cmp	r3, r2
 8007110:	d803      	bhi.n	800711a <__any_on+0x36>
 8007112:	2000      	movs	r0, #0
 8007114:	bd10      	pop	{r4, pc}
 8007116:	4603      	mov	r3, r0
 8007118:	e7f7      	b.n	800710a <__any_on+0x26>
 800711a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800711e:	2900      	cmp	r1, #0
 8007120:	d0f5      	beq.n	800710e <__any_on+0x2a>
 8007122:	2001      	movs	r0, #1
 8007124:	e7f6      	b.n	8007114 <__any_on+0x30>

08007126 <sulp>:
 8007126:	b570      	push	{r4, r5, r6, lr}
 8007128:	4604      	mov	r4, r0
 800712a:	460d      	mov	r5, r1
 800712c:	ec45 4b10 	vmov	d0, r4, r5
 8007130:	4616      	mov	r6, r2
 8007132:	f7ff feb7 	bl	8006ea4 <__ulp>
 8007136:	ec51 0b10 	vmov	r0, r1, d0
 800713a:	b17e      	cbz	r6, 800715c <sulp+0x36>
 800713c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007140:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007144:	2b00      	cmp	r3, #0
 8007146:	dd09      	ble.n	800715c <sulp+0x36>
 8007148:	051b      	lsls	r3, r3, #20
 800714a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800714e:	2400      	movs	r4, #0
 8007150:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007154:	4622      	mov	r2, r4
 8007156:	462b      	mov	r3, r5
 8007158:	f7f9 fa6e 	bl	8000638 <__aeabi_dmul>
 800715c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007160 <_strtod_l>:
 8007160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007164:	ed2d 8b02 	vpush	{d8}
 8007168:	b09b      	sub	sp, #108	; 0x6c
 800716a:	4604      	mov	r4, r0
 800716c:	9213      	str	r2, [sp, #76]	; 0x4c
 800716e:	2200      	movs	r2, #0
 8007170:	9216      	str	r2, [sp, #88]	; 0x58
 8007172:	460d      	mov	r5, r1
 8007174:	f04f 0800 	mov.w	r8, #0
 8007178:	f04f 0900 	mov.w	r9, #0
 800717c:	460a      	mov	r2, r1
 800717e:	9215      	str	r2, [sp, #84]	; 0x54
 8007180:	7811      	ldrb	r1, [r2, #0]
 8007182:	292b      	cmp	r1, #43	; 0x2b
 8007184:	d04c      	beq.n	8007220 <_strtod_l+0xc0>
 8007186:	d83a      	bhi.n	80071fe <_strtod_l+0x9e>
 8007188:	290d      	cmp	r1, #13
 800718a:	d834      	bhi.n	80071f6 <_strtod_l+0x96>
 800718c:	2908      	cmp	r1, #8
 800718e:	d834      	bhi.n	80071fa <_strtod_l+0x9a>
 8007190:	2900      	cmp	r1, #0
 8007192:	d03d      	beq.n	8007210 <_strtod_l+0xb0>
 8007194:	2200      	movs	r2, #0
 8007196:	920a      	str	r2, [sp, #40]	; 0x28
 8007198:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800719a:	7832      	ldrb	r2, [r6, #0]
 800719c:	2a30      	cmp	r2, #48	; 0x30
 800719e:	f040 80b4 	bne.w	800730a <_strtod_l+0x1aa>
 80071a2:	7872      	ldrb	r2, [r6, #1]
 80071a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80071a8:	2a58      	cmp	r2, #88	; 0x58
 80071aa:	d170      	bne.n	800728e <_strtod_l+0x12e>
 80071ac:	9302      	str	r3, [sp, #8]
 80071ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	ab16      	add	r3, sp, #88	; 0x58
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	4a8e      	ldr	r2, [pc, #568]	; (80073f0 <_strtod_l+0x290>)
 80071b8:	ab17      	add	r3, sp, #92	; 0x5c
 80071ba:	a915      	add	r1, sp, #84	; 0x54
 80071bc:	4620      	mov	r0, r4
 80071be:	f001 f93f 	bl	8008440 <__gethex>
 80071c2:	f010 070f 	ands.w	r7, r0, #15
 80071c6:	4605      	mov	r5, r0
 80071c8:	d005      	beq.n	80071d6 <_strtod_l+0x76>
 80071ca:	2f06      	cmp	r7, #6
 80071cc:	d12a      	bne.n	8007224 <_strtod_l+0xc4>
 80071ce:	3601      	adds	r6, #1
 80071d0:	2300      	movs	r3, #0
 80071d2:	9615      	str	r6, [sp, #84]	; 0x54
 80071d4:	930a      	str	r3, [sp, #40]	; 0x28
 80071d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f040 857f 	bne.w	8007cdc <_strtod_l+0xb7c>
 80071de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e0:	b1db      	cbz	r3, 800721a <_strtod_l+0xba>
 80071e2:	4642      	mov	r2, r8
 80071e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071e8:	ec43 2b10 	vmov	d0, r2, r3
 80071ec:	b01b      	add	sp, #108	; 0x6c
 80071ee:	ecbd 8b02 	vpop	{d8}
 80071f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f6:	2920      	cmp	r1, #32
 80071f8:	d1cc      	bne.n	8007194 <_strtod_l+0x34>
 80071fa:	3201      	adds	r2, #1
 80071fc:	e7bf      	b.n	800717e <_strtod_l+0x1e>
 80071fe:	292d      	cmp	r1, #45	; 0x2d
 8007200:	d1c8      	bne.n	8007194 <_strtod_l+0x34>
 8007202:	2101      	movs	r1, #1
 8007204:	910a      	str	r1, [sp, #40]	; 0x28
 8007206:	1c51      	adds	r1, r2, #1
 8007208:	9115      	str	r1, [sp, #84]	; 0x54
 800720a:	7852      	ldrb	r2, [r2, #1]
 800720c:	2a00      	cmp	r2, #0
 800720e:	d1c3      	bne.n	8007198 <_strtod_l+0x38>
 8007210:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007212:	9515      	str	r5, [sp, #84]	; 0x54
 8007214:	2b00      	cmp	r3, #0
 8007216:	f040 855f 	bne.w	8007cd8 <_strtod_l+0xb78>
 800721a:	4642      	mov	r2, r8
 800721c:	464b      	mov	r3, r9
 800721e:	e7e3      	b.n	80071e8 <_strtod_l+0x88>
 8007220:	2100      	movs	r1, #0
 8007222:	e7ef      	b.n	8007204 <_strtod_l+0xa4>
 8007224:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007226:	b13a      	cbz	r2, 8007238 <_strtod_l+0xd8>
 8007228:	2135      	movs	r1, #53	; 0x35
 800722a:	a818      	add	r0, sp, #96	; 0x60
 800722c:	f7ff ff37 	bl	800709e <__copybits>
 8007230:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007232:	4620      	mov	r0, r4
 8007234:	f7ff fb0a 	bl	800684c <_Bfree>
 8007238:	3f01      	subs	r7, #1
 800723a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800723c:	2f04      	cmp	r7, #4
 800723e:	d806      	bhi.n	800724e <_strtod_l+0xee>
 8007240:	e8df f007 	tbb	[pc, r7]
 8007244:	201d0314 	.word	0x201d0314
 8007248:	14          	.byte	0x14
 8007249:	00          	.byte	0x00
 800724a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800724e:	05e9      	lsls	r1, r5, #23
 8007250:	bf48      	it	mi
 8007252:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007256:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800725a:	0d1b      	lsrs	r3, r3, #20
 800725c:	051b      	lsls	r3, r3, #20
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1b9      	bne.n	80071d6 <_strtod_l+0x76>
 8007262:	f7fe fb03 	bl	800586c <__errno>
 8007266:	2322      	movs	r3, #34	; 0x22
 8007268:	6003      	str	r3, [r0, #0]
 800726a:	e7b4      	b.n	80071d6 <_strtod_l+0x76>
 800726c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007270:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007274:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007278:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800727c:	e7e7      	b.n	800724e <_strtod_l+0xee>
 800727e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80073f8 <_strtod_l+0x298>
 8007282:	e7e4      	b.n	800724e <_strtod_l+0xee>
 8007284:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007288:	f04f 38ff 	mov.w	r8, #4294967295
 800728c:	e7df      	b.n	800724e <_strtod_l+0xee>
 800728e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	9215      	str	r2, [sp, #84]	; 0x54
 8007294:	785b      	ldrb	r3, [r3, #1]
 8007296:	2b30      	cmp	r3, #48	; 0x30
 8007298:	d0f9      	beq.n	800728e <_strtod_l+0x12e>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d09b      	beq.n	80071d6 <_strtod_l+0x76>
 800729e:	2301      	movs	r3, #1
 80072a0:	f04f 0a00 	mov.w	sl, #0
 80072a4:	9304      	str	r3, [sp, #16]
 80072a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80072aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80072ae:	46d3      	mov	fp, sl
 80072b0:	220a      	movs	r2, #10
 80072b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80072b4:	7806      	ldrb	r6, [r0, #0]
 80072b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80072ba:	b2d9      	uxtb	r1, r3
 80072bc:	2909      	cmp	r1, #9
 80072be:	d926      	bls.n	800730e <_strtod_l+0x1ae>
 80072c0:	494c      	ldr	r1, [pc, #304]	; (80073f4 <_strtod_l+0x294>)
 80072c2:	2201      	movs	r2, #1
 80072c4:	f000 ffe6 	bl	8008294 <strncmp>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d030      	beq.n	800732e <_strtod_l+0x1ce>
 80072cc:	2000      	movs	r0, #0
 80072ce:	4632      	mov	r2, r6
 80072d0:	9005      	str	r0, [sp, #20]
 80072d2:	465e      	mov	r6, fp
 80072d4:	4603      	mov	r3, r0
 80072d6:	2a65      	cmp	r2, #101	; 0x65
 80072d8:	d001      	beq.n	80072de <_strtod_l+0x17e>
 80072da:	2a45      	cmp	r2, #69	; 0x45
 80072dc:	d113      	bne.n	8007306 <_strtod_l+0x1a6>
 80072de:	b91e      	cbnz	r6, 80072e8 <_strtod_l+0x188>
 80072e0:	9a04      	ldr	r2, [sp, #16]
 80072e2:	4302      	orrs	r2, r0
 80072e4:	d094      	beq.n	8007210 <_strtod_l+0xb0>
 80072e6:	2600      	movs	r6, #0
 80072e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80072ea:	1c6a      	adds	r2, r5, #1
 80072ec:	9215      	str	r2, [sp, #84]	; 0x54
 80072ee:	786a      	ldrb	r2, [r5, #1]
 80072f0:	2a2b      	cmp	r2, #43	; 0x2b
 80072f2:	d074      	beq.n	80073de <_strtod_l+0x27e>
 80072f4:	2a2d      	cmp	r2, #45	; 0x2d
 80072f6:	d078      	beq.n	80073ea <_strtod_l+0x28a>
 80072f8:	f04f 0c00 	mov.w	ip, #0
 80072fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007300:	2909      	cmp	r1, #9
 8007302:	d97f      	bls.n	8007404 <_strtod_l+0x2a4>
 8007304:	9515      	str	r5, [sp, #84]	; 0x54
 8007306:	2700      	movs	r7, #0
 8007308:	e09e      	b.n	8007448 <_strtod_l+0x2e8>
 800730a:	2300      	movs	r3, #0
 800730c:	e7c8      	b.n	80072a0 <_strtod_l+0x140>
 800730e:	f1bb 0f08 	cmp.w	fp, #8
 8007312:	bfd8      	it	le
 8007314:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007316:	f100 0001 	add.w	r0, r0, #1
 800731a:	bfda      	itte	le
 800731c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007320:	9309      	strle	r3, [sp, #36]	; 0x24
 8007322:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007326:	f10b 0b01 	add.w	fp, fp, #1
 800732a:	9015      	str	r0, [sp, #84]	; 0x54
 800732c:	e7c1      	b.n	80072b2 <_strtod_l+0x152>
 800732e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	9215      	str	r2, [sp, #84]	; 0x54
 8007334:	785a      	ldrb	r2, [r3, #1]
 8007336:	f1bb 0f00 	cmp.w	fp, #0
 800733a:	d037      	beq.n	80073ac <_strtod_l+0x24c>
 800733c:	9005      	str	r0, [sp, #20]
 800733e:	465e      	mov	r6, fp
 8007340:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007344:	2b09      	cmp	r3, #9
 8007346:	d912      	bls.n	800736e <_strtod_l+0x20e>
 8007348:	2301      	movs	r3, #1
 800734a:	e7c4      	b.n	80072d6 <_strtod_l+0x176>
 800734c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	9215      	str	r2, [sp, #84]	; 0x54
 8007352:	785a      	ldrb	r2, [r3, #1]
 8007354:	3001      	adds	r0, #1
 8007356:	2a30      	cmp	r2, #48	; 0x30
 8007358:	d0f8      	beq.n	800734c <_strtod_l+0x1ec>
 800735a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800735e:	2b08      	cmp	r3, #8
 8007360:	f200 84c1 	bhi.w	8007ce6 <_strtod_l+0xb86>
 8007364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007366:	9005      	str	r0, [sp, #20]
 8007368:	2000      	movs	r0, #0
 800736a:	930b      	str	r3, [sp, #44]	; 0x2c
 800736c:	4606      	mov	r6, r0
 800736e:	3a30      	subs	r2, #48	; 0x30
 8007370:	f100 0301 	add.w	r3, r0, #1
 8007374:	d014      	beq.n	80073a0 <_strtod_l+0x240>
 8007376:	9905      	ldr	r1, [sp, #20]
 8007378:	4419      	add	r1, r3
 800737a:	9105      	str	r1, [sp, #20]
 800737c:	4633      	mov	r3, r6
 800737e:	eb00 0c06 	add.w	ip, r0, r6
 8007382:	210a      	movs	r1, #10
 8007384:	4563      	cmp	r3, ip
 8007386:	d113      	bne.n	80073b0 <_strtod_l+0x250>
 8007388:	1833      	adds	r3, r6, r0
 800738a:	2b08      	cmp	r3, #8
 800738c:	f106 0601 	add.w	r6, r6, #1
 8007390:	4406      	add	r6, r0
 8007392:	dc1a      	bgt.n	80073ca <_strtod_l+0x26a>
 8007394:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007396:	230a      	movs	r3, #10
 8007398:	fb03 2301 	mla	r3, r3, r1, r2
 800739c:	9309      	str	r3, [sp, #36]	; 0x24
 800739e:	2300      	movs	r3, #0
 80073a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073a2:	1c51      	adds	r1, r2, #1
 80073a4:	9115      	str	r1, [sp, #84]	; 0x54
 80073a6:	7852      	ldrb	r2, [r2, #1]
 80073a8:	4618      	mov	r0, r3
 80073aa:	e7c9      	b.n	8007340 <_strtod_l+0x1e0>
 80073ac:	4658      	mov	r0, fp
 80073ae:	e7d2      	b.n	8007356 <_strtod_l+0x1f6>
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	f103 0301 	add.w	r3, r3, #1
 80073b6:	dc03      	bgt.n	80073c0 <_strtod_l+0x260>
 80073b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80073ba:	434f      	muls	r7, r1
 80073bc:	9709      	str	r7, [sp, #36]	; 0x24
 80073be:	e7e1      	b.n	8007384 <_strtod_l+0x224>
 80073c0:	2b10      	cmp	r3, #16
 80073c2:	bfd8      	it	le
 80073c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80073c8:	e7dc      	b.n	8007384 <_strtod_l+0x224>
 80073ca:	2e10      	cmp	r6, #16
 80073cc:	bfdc      	itt	le
 80073ce:	230a      	movle	r3, #10
 80073d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80073d4:	e7e3      	b.n	800739e <_strtod_l+0x23e>
 80073d6:	2300      	movs	r3, #0
 80073d8:	9305      	str	r3, [sp, #20]
 80073da:	2301      	movs	r3, #1
 80073dc:	e780      	b.n	80072e0 <_strtod_l+0x180>
 80073de:	f04f 0c00 	mov.w	ip, #0
 80073e2:	1caa      	adds	r2, r5, #2
 80073e4:	9215      	str	r2, [sp, #84]	; 0x54
 80073e6:	78aa      	ldrb	r2, [r5, #2]
 80073e8:	e788      	b.n	80072fc <_strtod_l+0x19c>
 80073ea:	f04f 0c01 	mov.w	ip, #1
 80073ee:	e7f8      	b.n	80073e2 <_strtod_l+0x282>
 80073f0:	0800a5b0 	.word	0x0800a5b0
 80073f4:	0800a5ac 	.word	0x0800a5ac
 80073f8:	7ff00000 	.word	0x7ff00000
 80073fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073fe:	1c51      	adds	r1, r2, #1
 8007400:	9115      	str	r1, [sp, #84]	; 0x54
 8007402:	7852      	ldrb	r2, [r2, #1]
 8007404:	2a30      	cmp	r2, #48	; 0x30
 8007406:	d0f9      	beq.n	80073fc <_strtod_l+0x29c>
 8007408:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800740c:	2908      	cmp	r1, #8
 800740e:	f63f af7a 	bhi.w	8007306 <_strtod_l+0x1a6>
 8007412:	3a30      	subs	r2, #48	; 0x30
 8007414:	9208      	str	r2, [sp, #32]
 8007416:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007418:	920c      	str	r2, [sp, #48]	; 0x30
 800741a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800741c:	1c57      	adds	r7, r2, #1
 800741e:	9715      	str	r7, [sp, #84]	; 0x54
 8007420:	7852      	ldrb	r2, [r2, #1]
 8007422:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007426:	f1be 0f09 	cmp.w	lr, #9
 800742a:	d938      	bls.n	800749e <_strtod_l+0x33e>
 800742c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800742e:	1a7f      	subs	r7, r7, r1
 8007430:	2f08      	cmp	r7, #8
 8007432:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007436:	dc03      	bgt.n	8007440 <_strtod_l+0x2e0>
 8007438:	9908      	ldr	r1, [sp, #32]
 800743a:	428f      	cmp	r7, r1
 800743c:	bfa8      	it	ge
 800743e:	460f      	movge	r7, r1
 8007440:	f1bc 0f00 	cmp.w	ip, #0
 8007444:	d000      	beq.n	8007448 <_strtod_l+0x2e8>
 8007446:	427f      	negs	r7, r7
 8007448:	2e00      	cmp	r6, #0
 800744a:	d14f      	bne.n	80074ec <_strtod_l+0x38c>
 800744c:	9904      	ldr	r1, [sp, #16]
 800744e:	4301      	orrs	r1, r0
 8007450:	f47f aec1 	bne.w	80071d6 <_strtod_l+0x76>
 8007454:	2b00      	cmp	r3, #0
 8007456:	f47f aedb 	bne.w	8007210 <_strtod_l+0xb0>
 800745a:	2a69      	cmp	r2, #105	; 0x69
 800745c:	d029      	beq.n	80074b2 <_strtod_l+0x352>
 800745e:	dc26      	bgt.n	80074ae <_strtod_l+0x34e>
 8007460:	2a49      	cmp	r2, #73	; 0x49
 8007462:	d026      	beq.n	80074b2 <_strtod_l+0x352>
 8007464:	2a4e      	cmp	r2, #78	; 0x4e
 8007466:	f47f aed3 	bne.w	8007210 <_strtod_l+0xb0>
 800746a:	499b      	ldr	r1, [pc, #620]	; (80076d8 <_strtod_l+0x578>)
 800746c:	a815      	add	r0, sp, #84	; 0x54
 800746e:	f001 fa27 	bl	80088c0 <__match>
 8007472:	2800      	cmp	r0, #0
 8007474:	f43f aecc 	beq.w	8007210 <_strtod_l+0xb0>
 8007478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b28      	cmp	r3, #40	; 0x28
 800747e:	d12f      	bne.n	80074e0 <_strtod_l+0x380>
 8007480:	4996      	ldr	r1, [pc, #600]	; (80076dc <_strtod_l+0x57c>)
 8007482:	aa18      	add	r2, sp, #96	; 0x60
 8007484:	a815      	add	r0, sp, #84	; 0x54
 8007486:	f001 fa2f 	bl	80088e8 <__hexnan>
 800748a:	2805      	cmp	r0, #5
 800748c:	d128      	bne.n	80074e0 <_strtod_l+0x380>
 800748e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007490:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007494:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007498:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800749c:	e69b      	b.n	80071d6 <_strtod_l+0x76>
 800749e:	9f08      	ldr	r7, [sp, #32]
 80074a0:	210a      	movs	r1, #10
 80074a2:	fb01 2107 	mla	r1, r1, r7, r2
 80074a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80074aa:	9208      	str	r2, [sp, #32]
 80074ac:	e7b5      	b.n	800741a <_strtod_l+0x2ba>
 80074ae:	2a6e      	cmp	r2, #110	; 0x6e
 80074b0:	e7d9      	b.n	8007466 <_strtod_l+0x306>
 80074b2:	498b      	ldr	r1, [pc, #556]	; (80076e0 <_strtod_l+0x580>)
 80074b4:	a815      	add	r0, sp, #84	; 0x54
 80074b6:	f001 fa03 	bl	80088c0 <__match>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f43f aea8 	beq.w	8007210 <_strtod_l+0xb0>
 80074c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074c2:	4988      	ldr	r1, [pc, #544]	; (80076e4 <_strtod_l+0x584>)
 80074c4:	3b01      	subs	r3, #1
 80074c6:	a815      	add	r0, sp, #84	; 0x54
 80074c8:	9315      	str	r3, [sp, #84]	; 0x54
 80074ca:	f001 f9f9 	bl	80088c0 <__match>
 80074ce:	b910      	cbnz	r0, 80074d6 <_strtod_l+0x376>
 80074d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074d2:	3301      	adds	r3, #1
 80074d4:	9315      	str	r3, [sp, #84]	; 0x54
 80074d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80076f4 <_strtod_l+0x594>
 80074da:	f04f 0800 	mov.w	r8, #0
 80074de:	e67a      	b.n	80071d6 <_strtod_l+0x76>
 80074e0:	4881      	ldr	r0, [pc, #516]	; (80076e8 <_strtod_l+0x588>)
 80074e2:	f000 ff09 	bl	80082f8 <nan>
 80074e6:	ec59 8b10 	vmov	r8, r9, d0
 80074ea:	e674      	b.n	80071d6 <_strtod_l+0x76>
 80074ec:	9b05      	ldr	r3, [sp, #20]
 80074ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074f0:	1afb      	subs	r3, r7, r3
 80074f2:	f1bb 0f00 	cmp.w	fp, #0
 80074f6:	bf08      	it	eq
 80074f8:	46b3      	moveq	fp, r6
 80074fa:	2e10      	cmp	r6, #16
 80074fc:	9308      	str	r3, [sp, #32]
 80074fe:	4635      	mov	r5, r6
 8007500:	bfa8      	it	ge
 8007502:	2510      	movge	r5, #16
 8007504:	f7f9 f81e 	bl	8000544 <__aeabi_ui2d>
 8007508:	2e09      	cmp	r6, #9
 800750a:	4680      	mov	r8, r0
 800750c:	4689      	mov	r9, r1
 800750e:	dd13      	ble.n	8007538 <_strtod_l+0x3d8>
 8007510:	4b76      	ldr	r3, [pc, #472]	; (80076ec <_strtod_l+0x58c>)
 8007512:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007516:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800751a:	f7f9 f88d 	bl	8000638 <__aeabi_dmul>
 800751e:	4680      	mov	r8, r0
 8007520:	4650      	mov	r0, sl
 8007522:	4689      	mov	r9, r1
 8007524:	f7f9 f80e 	bl	8000544 <__aeabi_ui2d>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4640      	mov	r0, r8
 800752e:	4649      	mov	r1, r9
 8007530:	f7f8 fecc 	bl	80002cc <__adddf3>
 8007534:	4680      	mov	r8, r0
 8007536:	4689      	mov	r9, r1
 8007538:	2e0f      	cmp	r6, #15
 800753a:	dc38      	bgt.n	80075ae <_strtod_l+0x44e>
 800753c:	9b08      	ldr	r3, [sp, #32]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f43f ae49 	beq.w	80071d6 <_strtod_l+0x76>
 8007544:	dd24      	ble.n	8007590 <_strtod_l+0x430>
 8007546:	2b16      	cmp	r3, #22
 8007548:	dc0b      	bgt.n	8007562 <_strtod_l+0x402>
 800754a:	4968      	ldr	r1, [pc, #416]	; (80076ec <_strtod_l+0x58c>)
 800754c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007554:	4642      	mov	r2, r8
 8007556:	464b      	mov	r3, r9
 8007558:	f7f9 f86e 	bl	8000638 <__aeabi_dmul>
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	e639      	b.n	80071d6 <_strtod_l+0x76>
 8007562:	9a08      	ldr	r2, [sp, #32]
 8007564:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007568:	4293      	cmp	r3, r2
 800756a:	db20      	blt.n	80075ae <_strtod_l+0x44e>
 800756c:	4c5f      	ldr	r4, [pc, #380]	; (80076ec <_strtod_l+0x58c>)
 800756e:	f1c6 060f 	rsb	r6, r6, #15
 8007572:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007576:	4642      	mov	r2, r8
 8007578:	464b      	mov	r3, r9
 800757a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800757e:	f7f9 f85b 	bl	8000638 <__aeabi_dmul>
 8007582:	9b08      	ldr	r3, [sp, #32]
 8007584:	1b9e      	subs	r6, r3, r6
 8007586:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800758a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800758e:	e7e3      	b.n	8007558 <_strtod_l+0x3f8>
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	3316      	adds	r3, #22
 8007594:	db0b      	blt.n	80075ae <_strtod_l+0x44e>
 8007596:	9b05      	ldr	r3, [sp, #20]
 8007598:	1bdf      	subs	r7, r3, r7
 800759a:	4b54      	ldr	r3, [pc, #336]	; (80076ec <_strtod_l+0x58c>)
 800759c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80075a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a4:	4640      	mov	r0, r8
 80075a6:	4649      	mov	r1, r9
 80075a8:	f7f9 f970 	bl	800088c <__aeabi_ddiv>
 80075ac:	e7d6      	b.n	800755c <_strtod_l+0x3fc>
 80075ae:	9b08      	ldr	r3, [sp, #32]
 80075b0:	1b75      	subs	r5, r6, r5
 80075b2:	441d      	add	r5, r3
 80075b4:	2d00      	cmp	r5, #0
 80075b6:	dd70      	ble.n	800769a <_strtod_l+0x53a>
 80075b8:	f015 030f 	ands.w	r3, r5, #15
 80075bc:	d00a      	beq.n	80075d4 <_strtod_l+0x474>
 80075be:	494b      	ldr	r1, [pc, #300]	; (80076ec <_strtod_l+0x58c>)
 80075c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075c4:	4642      	mov	r2, r8
 80075c6:	464b      	mov	r3, r9
 80075c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075cc:	f7f9 f834 	bl	8000638 <__aeabi_dmul>
 80075d0:	4680      	mov	r8, r0
 80075d2:	4689      	mov	r9, r1
 80075d4:	f035 050f 	bics.w	r5, r5, #15
 80075d8:	d04d      	beq.n	8007676 <_strtod_l+0x516>
 80075da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80075de:	dd22      	ble.n	8007626 <_strtod_l+0x4c6>
 80075e0:	2500      	movs	r5, #0
 80075e2:	46ab      	mov	fp, r5
 80075e4:	9509      	str	r5, [sp, #36]	; 0x24
 80075e6:	9505      	str	r5, [sp, #20]
 80075e8:	2322      	movs	r3, #34	; 0x22
 80075ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80076f4 <_strtod_l+0x594>
 80075ee:	6023      	str	r3, [r4, #0]
 80075f0:	f04f 0800 	mov.w	r8, #0
 80075f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f43f aded 	beq.w	80071d6 <_strtod_l+0x76>
 80075fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80075fe:	4620      	mov	r0, r4
 8007600:	f7ff f924 	bl	800684c <_Bfree>
 8007604:	9905      	ldr	r1, [sp, #20]
 8007606:	4620      	mov	r0, r4
 8007608:	f7ff f920 	bl	800684c <_Bfree>
 800760c:	4659      	mov	r1, fp
 800760e:	4620      	mov	r0, r4
 8007610:	f7ff f91c 	bl	800684c <_Bfree>
 8007614:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007616:	4620      	mov	r0, r4
 8007618:	f7ff f918 	bl	800684c <_Bfree>
 800761c:	4629      	mov	r1, r5
 800761e:	4620      	mov	r0, r4
 8007620:	f7ff f914 	bl	800684c <_Bfree>
 8007624:	e5d7      	b.n	80071d6 <_strtod_l+0x76>
 8007626:	4b32      	ldr	r3, [pc, #200]	; (80076f0 <_strtod_l+0x590>)
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	2300      	movs	r3, #0
 800762c:	112d      	asrs	r5, r5, #4
 800762e:	4640      	mov	r0, r8
 8007630:	4649      	mov	r1, r9
 8007632:	469a      	mov	sl, r3
 8007634:	2d01      	cmp	r5, #1
 8007636:	dc21      	bgt.n	800767c <_strtod_l+0x51c>
 8007638:	b10b      	cbz	r3, 800763e <_strtod_l+0x4de>
 800763a:	4680      	mov	r8, r0
 800763c:	4689      	mov	r9, r1
 800763e:	492c      	ldr	r1, [pc, #176]	; (80076f0 <_strtod_l+0x590>)
 8007640:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007644:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007648:	4642      	mov	r2, r8
 800764a:	464b      	mov	r3, r9
 800764c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007650:	f7f8 fff2 	bl	8000638 <__aeabi_dmul>
 8007654:	4b27      	ldr	r3, [pc, #156]	; (80076f4 <_strtod_l+0x594>)
 8007656:	460a      	mov	r2, r1
 8007658:	400b      	ands	r3, r1
 800765a:	4927      	ldr	r1, [pc, #156]	; (80076f8 <_strtod_l+0x598>)
 800765c:	428b      	cmp	r3, r1
 800765e:	4680      	mov	r8, r0
 8007660:	d8be      	bhi.n	80075e0 <_strtod_l+0x480>
 8007662:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007666:	428b      	cmp	r3, r1
 8007668:	bf86      	itte	hi
 800766a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80076fc <_strtod_l+0x59c>
 800766e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007672:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007676:	2300      	movs	r3, #0
 8007678:	9304      	str	r3, [sp, #16]
 800767a:	e07b      	b.n	8007774 <_strtod_l+0x614>
 800767c:	07ea      	lsls	r2, r5, #31
 800767e:	d505      	bpl.n	800768c <_strtod_l+0x52c>
 8007680:	9b04      	ldr	r3, [sp, #16]
 8007682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007686:	f7f8 ffd7 	bl	8000638 <__aeabi_dmul>
 800768a:	2301      	movs	r3, #1
 800768c:	9a04      	ldr	r2, [sp, #16]
 800768e:	3208      	adds	r2, #8
 8007690:	f10a 0a01 	add.w	sl, sl, #1
 8007694:	106d      	asrs	r5, r5, #1
 8007696:	9204      	str	r2, [sp, #16]
 8007698:	e7cc      	b.n	8007634 <_strtod_l+0x4d4>
 800769a:	d0ec      	beq.n	8007676 <_strtod_l+0x516>
 800769c:	426d      	negs	r5, r5
 800769e:	f015 020f 	ands.w	r2, r5, #15
 80076a2:	d00a      	beq.n	80076ba <_strtod_l+0x55a>
 80076a4:	4b11      	ldr	r3, [pc, #68]	; (80076ec <_strtod_l+0x58c>)
 80076a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076aa:	4640      	mov	r0, r8
 80076ac:	4649      	mov	r1, r9
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	f7f9 f8eb 	bl	800088c <__aeabi_ddiv>
 80076b6:	4680      	mov	r8, r0
 80076b8:	4689      	mov	r9, r1
 80076ba:	112d      	asrs	r5, r5, #4
 80076bc:	d0db      	beq.n	8007676 <_strtod_l+0x516>
 80076be:	2d1f      	cmp	r5, #31
 80076c0:	dd1e      	ble.n	8007700 <_strtod_l+0x5a0>
 80076c2:	2500      	movs	r5, #0
 80076c4:	46ab      	mov	fp, r5
 80076c6:	9509      	str	r5, [sp, #36]	; 0x24
 80076c8:	9505      	str	r5, [sp, #20]
 80076ca:	2322      	movs	r3, #34	; 0x22
 80076cc:	f04f 0800 	mov.w	r8, #0
 80076d0:	f04f 0900 	mov.w	r9, #0
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	e78d      	b.n	80075f4 <_strtod_l+0x494>
 80076d8:	0800a399 	.word	0x0800a399
 80076dc:	0800a5c4 	.word	0x0800a5c4
 80076e0:	0800a391 	.word	0x0800a391
 80076e4:	0800a3c8 	.word	0x0800a3c8
 80076e8:	0800a755 	.word	0x0800a755
 80076ec:	0800a4d8 	.word	0x0800a4d8
 80076f0:	0800a4b0 	.word	0x0800a4b0
 80076f4:	7ff00000 	.word	0x7ff00000
 80076f8:	7ca00000 	.word	0x7ca00000
 80076fc:	7fefffff 	.word	0x7fefffff
 8007700:	f015 0310 	ands.w	r3, r5, #16
 8007704:	bf18      	it	ne
 8007706:	236a      	movne	r3, #106	; 0x6a
 8007708:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007aac <_strtod_l+0x94c>
 800770c:	9304      	str	r3, [sp, #16]
 800770e:	4640      	mov	r0, r8
 8007710:	4649      	mov	r1, r9
 8007712:	2300      	movs	r3, #0
 8007714:	07ea      	lsls	r2, r5, #31
 8007716:	d504      	bpl.n	8007722 <_strtod_l+0x5c2>
 8007718:	e9da 2300 	ldrd	r2, r3, [sl]
 800771c:	f7f8 ff8c 	bl	8000638 <__aeabi_dmul>
 8007720:	2301      	movs	r3, #1
 8007722:	106d      	asrs	r5, r5, #1
 8007724:	f10a 0a08 	add.w	sl, sl, #8
 8007728:	d1f4      	bne.n	8007714 <_strtod_l+0x5b4>
 800772a:	b10b      	cbz	r3, 8007730 <_strtod_l+0x5d0>
 800772c:	4680      	mov	r8, r0
 800772e:	4689      	mov	r9, r1
 8007730:	9b04      	ldr	r3, [sp, #16]
 8007732:	b1bb      	cbz	r3, 8007764 <_strtod_l+0x604>
 8007734:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007738:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800773c:	2b00      	cmp	r3, #0
 800773e:	4649      	mov	r1, r9
 8007740:	dd10      	ble.n	8007764 <_strtod_l+0x604>
 8007742:	2b1f      	cmp	r3, #31
 8007744:	f340 811e 	ble.w	8007984 <_strtod_l+0x824>
 8007748:	2b34      	cmp	r3, #52	; 0x34
 800774a:	bfde      	ittt	le
 800774c:	f04f 33ff 	movle.w	r3, #4294967295
 8007750:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007754:	4093      	lslle	r3, r2
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	bfcc      	ite	gt
 800775c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007760:	ea03 0901 	andle.w	r9, r3, r1
 8007764:	2200      	movs	r2, #0
 8007766:	2300      	movs	r3, #0
 8007768:	4640      	mov	r0, r8
 800776a:	4649      	mov	r1, r9
 800776c:	f7f9 f9cc 	bl	8000b08 <__aeabi_dcmpeq>
 8007770:	2800      	cmp	r0, #0
 8007772:	d1a6      	bne.n	80076c2 <_strtod_l+0x562>
 8007774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800777a:	4633      	mov	r3, r6
 800777c:	465a      	mov	r2, fp
 800777e:	4620      	mov	r0, r4
 8007780:	f7ff f8cc 	bl	800691c <__s2b>
 8007784:	9009      	str	r0, [sp, #36]	; 0x24
 8007786:	2800      	cmp	r0, #0
 8007788:	f43f af2a 	beq.w	80075e0 <_strtod_l+0x480>
 800778c:	9a08      	ldr	r2, [sp, #32]
 800778e:	9b05      	ldr	r3, [sp, #20]
 8007790:	2a00      	cmp	r2, #0
 8007792:	eba3 0307 	sub.w	r3, r3, r7
 8007796:	bfa8      	it	ge
 8007798:	2300      	movge	r3, #0
 800779a:	930c      	str	r3, [sp, #48]	; 0x30
 800779c:	2500      	movs	r5, #0
 800779e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80077a2:	9312      	str	r3, [sp, #72]	; 0x48
 80077a4:	46ab      	mov	fp, r5
 80077a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a8:	4620      	mov	r0, r4
 80077aa:	6859      	ldr	r1, [r3, #4]
 80077ac:	f7ff f80e 	bl	80067cc <_Balloc>
 80077b0:	9005      	str	r0, [sp, #20]
 80077b2:	2800      	cmp	r0, #0
 80077b4:	f43f af18 	beq.w	80075e8 <_strtod_l+0x488>
 80077b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	3202      	adds	r2, #2
 80077be:	f103 010c 	add.w	r1, r3, #12
 80077c2:	0092      	lsls	r2, r2, #2
 80077c4:	300c      	adds	r0, #12
 80077c6:	f000 fd87 	bl	80082d8 <memcpy>
 80077ca:	ec49 8b10 	vmov	d0, r8, r9
 80077ce:	aa18      	add	r2, sp, #96	; 0x60
 80077d0:	a917      	add	r1, sp, #92	; 0x5c
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7ff fbd6 	bl	8006f84 <__d2b>
 80077d8:	ec49 8b18 	vmov	d8, r8, r9
 80077dc:	9016      	str	r0, [sp, #88]	; 0x58
 80077de:	2800      	cmp	r0, #0
 80077e0:	f43f af02 	beq.w	80075e8 <_strtod_l+0x488>
 80077e4:	2101      	movs	r1, #1
 80077e6:	4620      	mov	r0, r4
 80077e8:	f7ff f930 	bl	8006a4c <__i2b>
 80077ec:	4683      	mov	fp, r0
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f43f aefa 	beq.w	80075e8 <_strtod_l+0x488>
 80077f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80077f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	bfab      	itete	ge
 80077fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80077fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007800:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007802:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007806:	bfac      	ite	ge
 8007808:	eb06 0a03 	addge.w	sl, r6, r3
 800780c:	1b9f      	sublt	r7, r3, r6
 800780e:	9b04      	ldr	r3, [sp, #16]
 8007810:	1af6      	subs	r6, r6, r3
 8007812:	4416      	add	r6, r2
 8007814:	4ba0      	ldr	r3, [pc, #640]	; (8007a98 <_strtod_l+0x938>)
 8007816:	3e01      	subs	r6, #1
 8007818:	429e      	cmp	r6, r3
 800781a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800781e:	f280 80c4 	bge.w	80079aa <_strtod_l+0x84a>
 8007822:	1b9b      	subs	r3, r3, r6
 8007824:	2b1f      	cmp	r3, #31
 8007826:	eba2 0203 	sub.w	r2, r2, r3
 800782a:	f04f 0101 	mov.w	r1, #1
 800782e:	f300 80b0 	bgt.w	8007992 <_strtod_l+0x832>
 8007832:	fa01 f303 	lsl.w	r3, r1, r3
 8007836:	930e      	str	r3, [sp, #56]	; 0x38
 8007838:	2300      	movs	r3, #0
 800783a:	930d      	str	r3, [sp, #52]	; 0x34
 800783c:	eb0a 0602 	add.w	r6, sl, r2
 8007840:	9b04      	ldr	r3, [sp, #16]
 8007842:	45b2      	cmp	sl, r6
 8007844:	4417      	add	r7, r2
 8007846:	441f      	add	r7, r3
 8007848:	4653      	mov	r3, sl
 800784a:	bfa8      	it	ge
 800784c:	4633      	movge	r3, r6
 800784e:	42bb      	cmp	r3, r7
 8007850:	bfa8      	it	ge
 8007852:	463b      	movge	r3, r7
 8007854:	2b00      	cmp	r3, #0
 8007856:	bfc2      	ittt	gt
 8007858:	1af6      	subgt	r6, r6, r3
 800785a:	1aff      	subgt	r7, r7, r3
 800785c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007862:	2b00      	cmp	r3, #0
 8007864:	dd17      	ble.n	8007896 <_strtod_l+0x736>
 8007866:	4659      	mov	r1, fp
 8007868:	461a      	mov	r2, r3
 800786a:	4620      	mov	r0, r4
 800786c:	f7ff f9ae 	bl	8006bcc <__pow5mult>
 8007870:	4683      	mov	fp, r0
 8007872:	2800      	cmp	r0, #0
 8007874:	f43f aeb8 	beq.w	80075e8 <_strtod_l+0x488>
 8007878:	4601      	mov	r1, r0
 800787a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800787c:	4620      	mov	r0, r4
 800787e:	f7ff f8fb 	bl	8006a78 <__multiply>
 8007882:	900b      	str	r0, [sp, #44]	; 0x2c
 8007884:	2800      	cmp	r0, #0
 8007886:	f43f aeaf 	beq.w	80075e8 <_strtod_l+0x488>
 800788a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800788c:	4620      	mov	r0, r4
 800788e:	f7fe ffdd 	bl	800684c <_Bfree>
 8007892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007894:	9316      	str	r3, [sp, #88]	; 0x58
 8007896:	2e00      	cmp	r6, #0
 8007898:	f300 808c 	bgt.w	80079b4 <_strtod_l+0x854>
 800789c:	9b08      	ldr	r3, [sp, #32]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	dd08      	ble.n	80078b4 <_strtod_l+0x754>
 80078a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078a4:	9905      	ldr	r1, [sp, #20]
 80078a6:	4620      	mov	r0, r4
 80078a8:	f7ff f990 	bl	8006bcc <__pow5mult>
 80078ac:	9005      	str	r0, [sp, #20]
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f43f ae9a 	beq.w	80075e8 <_strtod_l+0x488>
 80078b4:	2f00      	cmp	r7, #0
 80078b6:	dd08      	ble.n	80078ca <_strtod_l+0x76a>
 80078b8:	9905      	ldr	r1, [sp, #20]
 80078ba:	463a      	mov	r2, r7
 80078bc:	4620      	mov	r0, r4
 80078be:	f7ff f9df 	bl	8006c80 <__lshift>
 80078c2:	9005      	str	r0, [sp, #20]
 80078c4:	2800      	cmp	r0, #0
 80078c6:	f43f ae8f 	beq.w	80075e8 <_strtod_l+0x488>
 80078ca:	f1ba 0f00 	cmp.w	sl, #0
 80078ce:	dd08      	ble.n	80078e2 <_strtod_l+0x782>
 80078d0:	4659      	mov	r1, fp
 80078d2:	4652      	mov	r2, sl
 80078d4:	4620      	mov	r0, r4
 80078d6:	f7ff f9d3 	bl	8006c80 <__lshift>
 80078da:	4683      	mov	fp, r0
 80078dc:	2800      	cmp	r0, #0
 80078de:	f43f ae83 	beq.w	80075e8 <_strtod_l+0x488>
 80078e2:	9a05      	ldr	r2, [sp, #20]
 80078e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7ff fa52 	bl	8006d90 <__mdiff>
 80078ec:	4605      	mov	r5, r0
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f43f ae7a 	beq.w	80075e8 <_strtod_l+0x488>
 80078f4:	68c3      	ldr	r3, [r0, #12]
 80078f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80078f8:	2300      	movs	r3, #0
 80078fa:	60c3      	str	r3, [r0, #12]
 80078fc:	4659      	mov	r1, fp
 80078fe:	f7ff fa2b 	bl	8006d58 <__mcmp>
 8007902:	2800      	cmp	r0, #0
 8007904:	da60      	bge.n	80079c8 <_strtod_l+0x868>
 8007906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007908:	ea53 0308 	orrs.w	r3, r3, r8
 800790c:	f040 8084 	bne.w	8007a18 <_strtod_l+0x8b8>
 8007910:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007914:	2b00      	cmp	r3, #0
 8007916:	d17f      	bne.n	8007a18 <_strtod_l+0x8b8>
 8007918:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800791c:	0d1b      	lsrs	r3, r3, #20
 800791e:	051b      	lsls	r3, r3, #20
 8007920:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007924:	d978      	bls.n	8007a18 <_strtod_l+0x8b8>
 8007926:	696b      	ldr	r3, [r5, #20]
 8007928:	b913      	cbnz	r3, 8007930 <_strtod_l+0x7d0>
 800792a:	692b      	ldr	r3, [r5, #16]
 800792c:	2b01      	cmp	r3, #1
 800792e:	dd73      	ble.n	8007a18 <_strtod_l+0x8b8>
 8007930:	4629      	mov	r1, r5
 8007932:	2201      	movs	r2, #1
 8007934:	4620      	mov	r0, r4
 8007936:	f7ff f9a3 	bl	8006c80 <__lshift>
 800793a:	4659      	mov	r1, fp
 800793c:	4605      	mov	r5, r0
 800793e:	f7ff fa0b 	bl	8006d58 <__mcmp>
 8007942:	2800      	cmp	r0, #0
 8007944:	dd68      	ble.n	8007a18 <_strtod_l+0x8b8>
 8007946:	9904      	ldr	r1, [sp, #16]
 8007948:	4a54      	ldr	r2, [pc, #336]	; (8007a9c <_strtod_l+0x93c>)
 800794a:	464b      	mov	r3, r9
 800794c:	2900      	cmp	r1, #0
 800794e:	f000 8084 	beq.w	8007a5a <_strtod_l+0x8fa>
 8007952:	ea02 0109 	and.w	r1, r2, r9
 8007956:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800795a:	dc7e      	bgt.n	8007a5a <_strtod_l+0x8fa>
 800795c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007960:	f77f aeb3 	ble.w	80076ca <_strtod_l+0x56a>
 8007964:	4b4e      	ldr	r3, [pc, #312]	; (8007aa0 <_strtod_l+0x940>)
 8007966:	4640      	mov	r0, r8
 8007968:	4649      	mov	r1, r9
 800796a:	2200      	movs	r2, #0
 800796c:	f7f8 fe64 	bl	8000638 <__aeabi_dmul>
 8007970:	4b4a      	ldr	r3, [pc, #296]	; (8007a9c <_strtod_l+0x93c>)
 8007972:	400b      	ands	r3, r1
 8007974:	4680      	mov	r8, r0
 8007976:	4689      	mov	r9, r1
 8007978:	2b00      	cmp	r3, #0
 800797a:	f47f ae3f 	bne.w	80075fc <_strtod_l+0x49c>
 800797e:	2322      	movs	r3, #34	; 0x22
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	e63b      	b.n	80075fc <_strtod_l+0x49c>
 8007984:	f04f 32ff 	mov.w	r2, #4294967295
 8007988:	fa02 f303 	lsl.w	r3, r2, r3
 800798c:	ea03 0808 	and.w	r8, r3, r8
 8007990:	e6e8      	b.n	8007764 <_strtod_l+0x604>
 8007992:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007996:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800799a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800799e:	36e2      	adds	r6, #226	; 0xe2
 80079a0:	fa01 f306 	lsl.w	r3, r1, r6
 80079a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80079a8:	e748      	b.n	800783c <_strtod_l+0x6dc>
 80079aa:	2100      	movs	r1, #0
 80079ac:	2301      	movs	r3, #1
 80079ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80079b2:	e743      	b.n	800783c <_strtod_l+0x6dc>
 80079b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079b6:	4632      	mov	r2, r6
 80079b8:	4620      	mov	r0, r4
 80079ba:	f7ff f961 	bl	8006c80 <__lshift>
 80079be:	9016      	str	r0, [sp, #88]	; 0x58
 80079c0:	2800      	cmp	r0, #0
 80079c2:	f47f af6b 	bne.w	800789c <_strtod_l+0x73c>
 80079c6:	e60f      	b.n	80075e8 <_strtod_l+0x488>
 80079c8:	46ca      	mov	sl, r9
 80079ca:	d171      	bne.n	8007ab0 <_strtod_l+0x950>
 80079cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079d2:	b352      	cbz	r2, 8007a2a <_strtod_l+0x8ca>
 80079d4:	4a33      	ldr	r2, [pc, #204]	; (8007aa4 <_strtod_l+0x944>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d12a      	bne.n	8007a30 <_strtod_l+0x8d0>
 80079da:	9b04      	ldr	r3, [sp, #16]
 80079dc:	4641      	mov	r1, r8
 80079de:	b1fb      	cbz	r3, 8007a20 <_strtod_l+0x8c0>
 80079e0:	4b2e      	ldr	r3, [pc, #184]	; (8007a9c <_strtod_l+0x93c>)
 80079e2:	ea09 0303 	and.w	r3, r9, r3
 80079e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079ea:	f04f 32ff 	mov.w	r2, #4294967295
 80079ee:	d81a      	bhi.n	8007a26 <_strtod_l+0x8c6>
 80079f0:	0d1b      	lsrs	r3, r3, #20
 80079f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	4299      	cmp	r1, r3
 80079fc:	d118      	bne.n	8007a30 <_strtod_l+0x8d0>
 80079fe:	4b2a      	ldr	r3, [pc, #168]	; (8007aa8 <_strtod_l+0x948>)
 8007a00:	459a      	cmp	sl, r3
 8007a02:	d102      	bne.n	8007a0a <_strtod_l+0x8aa>
 8007a04:	3101      	adds	r1, #1
 8007a06:	f43f adef 	beq.w	80075e8 <_strtod_l+0x488>
 8007a0a:	4b24      	ldr	r3, [pc, #144]	; (8007a9c <_strtod_l+0x93c>)
 8007a0c:	ea0a 0303 	and.w	r3, sl, r3
 8007a10:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007a14:	f04f 0800 	mov.w	r8, #0
 8007a18:	9b04      	ldr	r3, [sp, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1a2      	bne.n	8007964 <_strtod_l+0x804>
 8007a1e:	e5ed      	b.n	80075fc <_strtod_l+0x49c>
 8007a20:	f04f 33ff 	mov.w	r3, #4294967295
 8007a24:	e7e9      	b.n	80079fa <_strtod_l+0x89a>
 8007a26:	4613      	mov	r3, r2
 8007a28:	e7e7      	b.n	80079fa <_strtod_l+0x89a>
 8007a2a:	ea53 0308 	orrs.w	r3, r3, r8
 8007a2e:	d08a      	beq.n	8007946 <_strtod_l+0x7e6>
 8007a30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a32:	b1e3      	cbz	r3, 8007a6e <_strtod_l+0x90e>
 8007a34:	ea13 0f0a 	tst.w	r3, sl
 8007a38:	d0ee      	beq.n	8007a18 <_strtod_l+0x8b8>
 8007a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a3c:	9a04      	ldr	r2, [sp, #16]
 8007a3e:	4640      	mov	r0, r8
 8007a40:	4649      	mov	r1, r9
 8007a42:	b1c3      	cbz	r3, 8007a76 <_strtod_l+0x916>
 8007a44:	f7ff fb6f 	bl	8007126 <sulp>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	ec51 0b18 	vmov	r0, r1, d8
 8007a50:	f7f8 fc3c 	bl	80002cc <__adddf3>
 8007a54:	4680      	mov	r8, r0
 8007a56:	4689      	mov	r9, r1
 8007a58:	e7de      	b.n	8007a18 <_strtod_l+0x8b8>
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007a64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007a68:	f04f 38ff 	mov.w	r8, #4294967295
 8007a6c:	e7d4      	b.n	8007a18 <_strtod_l+0x8b8>
 8007a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a70:	ea13 0f08 	tst.w	r3, r8
 8007a74:	e7e0      	b.n	8007a38 <_strtod_l+0x8d8>
 8007a76:	f7ff fb56 	bl	8007126 <sulp>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	ec51 0b18 	vmov	r0, r1, d8
 8007a82:	f7f8 fc21 	bl	80002c8 <__aeabi_dsub>
 8007a86:	2200      	movs	r2, #0
 8007a88:	2300      	movs	r3, #0
 8007a8a:	4680      	mov	r8, r0
 8007a8c:	4689      	mov	r9, r1
 8007a8e:	f7f9 f83b 	bl	8000b08 <__aeabi_dcmpeq>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d0c0      	beq.n	8007a18 <_strtod_l+0x8b8>
 8007a96:	e618      	b.n	80076ca <_strtod_l+0x56a>
 8007a98:	fffffc02 	.word	0xfffffc02
 8007a9c:	7ff00000 	.word	0x7ff00000
 8007aa0:	39500000 	.word	0x39500000
 8007aa4:	000fffff 	.word	0x000fffff
 8007aa8:	7fefffff 	.word	0x7fefffff
 8007aac:	0800a5d8 	.word	0x0800a5d8
 8007ab0:	4659      	mov	r1, fp
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f7ff fac0 	bl	8007038 <__ratio>
 8007ab8:	ec57 6b10 	vmov	r6, r7, d0
 8007abc:	ee10 0a10 	vmov	r0, s0
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	f7f9 f832 	bl	8000b30 <__aeabi_dcmple>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d071      	beq.n	8007bb4 <_strtod_l+0xa54>
 8007ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d17c      	bne.n	8007bd0 <_strtod_l+0xa70>
 8007ad6:	f1b8 0f00 	cmp.w	r8, #0
 8007ada:	d15a      	bne.n	8007b92 <_strtod_l+0xa32>
 8007adc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d15d      	bne.n	8007ba0 <_strtod_l+0xa40>
 8007ae4:	4b90      	ldr	r3, [pc, #576]	; (8007d28 <_strtod_l+0xbc8>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f9 f816 	bl	8000b1c <__aeabi_dcmplt>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d15c      	bne.n	8007bae <_strtod_l+0xa4e>
 8007af4:	4630      	mov	r0, r6
 8007af6:	4639      	mov	r1, r7
 8007af8:	4b8c      	ldr	r3, [pc, #560]	; (8007d2c <_strtod_l+0xbcc>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	f7f8 fd9c 	bl	8000638 <__aeabi_dmul>
 8007b00:	4606      	mov	r6, r0
 8007b02:	460f      	mov	r7, r1
 8007b04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007b08:	9606      	str	r6, [sp, #24]
 8007b0a:	9307      	str	r3, [sp, #28]
 8007b0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007b14:	4b86      	ldr	r3, [pc, #536]	; (8007d30 <_strtod_l+0xbd0>)
 8007b16:	ea0a 0303 	and.w	r3, sl, r3
 8007b1a:	930d      	str	r3, [sp, #52]	; 0x34
 8007b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b1e:	4b85      	ldr	r3, [pc, #532]	; (8007d34 <_strtod_l+0xbd4>)
 8007b20:	429a      	cmp	r2, r3
 8007b22:	f040 8090 	bne.w	8007c46 <_strtod_l+0xae6>
 8007b26:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007b2a:	ec49 8b10 	vmov	d0, r8, r9
 8007b2e:	f7ff f9b9 	bl	8006ea4 <__ulp>
 8007b32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b36:	ec51 0b10 	vmov	r0, r1, d0
 8007b3a:	f7f8 fd7d 	bl	8000638 <__aeabi_dmul>
 8007b3e:	4642      	mov	r2, r8
 8007b40:	464b      	mov	r3, r9
 8007b42:	f7f8 fbc3 	bl	80002cc <__adddf3>
 8007b46:	460b      	mov	r3, r1
 8007b48:	4979      	ldr	r1, [pc, #484]	; (8007d30 <_strtod_l+0xbd0>)
 8007b4a:	4a7b      	ldr	r2, [pc, #492]	; (8007d38 <_strtod_l+0xbd8>)
 8007b4c:	4019      	ands	r1, r3
 8007b4e:	4291      	cmp	r1, r2
 8007b50:	4680      	mov	r8, r0
 8007b52:	d944      	bls.n	8007bde <_strtod_l+0xa7e>
 8007b54:	ee18 2a90 	vmov	r2, s17
 8007b58:	4b78      	ldr	r3, [pc, #480]	; (8007d3c <_strtod_l+0xbdc>)
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d104      	bne.n	8007b68 <_strtod_l+0xa08>
 8007b5e:	ee18 3a10 	vmov	r3, s16
 8007b62:	3301      	adds	r3, #1
 8007b64:	f43f ad40 	beq.w	80075e8 <_strtod_l+0x488>
 8007b68:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007d3c <_strtod_l+0xbdc>
 8007b6c:	f04f 38ff 	mov.w	r8, #4294967295
 8007b70:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b72:	4620      	mov	r0, r4
 8007b74:	f7fe fe6a 	bl	800684c <_Bfree>
 8007b78:	9905      	ldr	r1, [sp, #20]
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7fe fe66 	bl	800684c <_Bfree>
 8007b80:	4659      	mov	r1, fp
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7fe fe62 	bl	800684c <_Bfree>
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7fe fe5e 	bl	800684c <_Bfree>
 8007b90:	e609      	b.n	80077a6 <_strtod_l+0x646>
 8007b92:	f1b8 0f01 	cmp.w	r8, #1
 8007b96:	d103      	bne.n	8007ba0 <_strtod_l+0xa40>
 8007b98:	f1b9 0f00 	cmp.w	r9, #0
 8007b9c:	f43f ad95 	beq.w	80076ca <_strtod_l+0x56a>
 8007ba0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007cf8 <_strtod_l+0xb98>
 8007ba4:	4f60      	ldr	r7, [pc, #384]	; (8007d28 <_strtod_l+0xbc8>)
 8007ba6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007baa:	2600      	movs	r6, #0
 8007bac:	e7ae      	b.n	8007b0c <_strtod_l+0x9ac>
 8007bae:	4f5f      	ldr	r7, [pc, #380]	; (8007d2c <_strtod_l+0xbcc>)
 8007bb0:	2600      	movs	r6, #0
 8007bb2:	e7a7      	b.n	8007b04 <_strtod_l+0x9a4>
 8007bb4:	4b5d      	ldr	r3, [pc, #372]	; (8007d2c <_strtod_l+0xbcc>)
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	4639      	mov	r1, r7
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f7f8 fd3c 	bl	8000638 <__aeabi_dmul>
 8007bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d09c      	beq.n	8007b04 <_strtod_l+0x9a4>
 8007bca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007bce:	e79d      	b.n	8007b0c <_strtod_l+0x9ac>
 8007bd0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007d00 <_strtod_l+0xba0>
 8007bd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007bd8:	ec57 6b17 	vmov	r6, r7, d7
 8007bdc:	e796      	b.n	8007b0c <_strtod_l+0x9ac>
 8007bde:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007be2:	9b04      	ldr	r3, [sp, #16]
 8007be4:	46ca      	mov	sl, r9
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1c2      	bne.n	8007b70 <_strtod_l+0xa10>
 8007bea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bf0:	0d1b      	lsrs	r3, r3, #20
 8007bf2:	051b      	lsls	r3, r3, #20
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d1bb      	bne.n	8007b70 <_strtod_l+0xa10>
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	f7f9 f87c 	bl	8000cf8 <__aeabi_d2lz>
 8007c00:	f7f8 fcec 	bl	80005dc <__aeabi_l2d>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4630      	mov	r0, r6
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	f7f8 fb5c 	bl	80002c8 <__aeabi_dsub>
 8007c10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c16:	ea43 0308 	orr.w	r3, r3, r8
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	460f      	mov	r7, r1
 8007c20:	d054      	beq.n	8007ccc <_strtod_l+0xb6c>
 8007c22:	a339      	add	r3, pc, #228	; (adr r3, 8007d08 <_strtod_l+0xba8>)
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f7f8 ff78 	bl	8000b1c <__aeabi_dcmplt>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f47f ace5 	bne.w	80075fc <_strtod_l+0x49c>
 8007c32:	a337      	add	r3, pc, #220	; (adr r3, 8007d10 <_strtod_l+0xbb0>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	4630      	mov	r0, r6
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 ff8c 	bl	8000b58 <__aeabi_dcmpgt>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d095      	beq.n	8007b70 <_strtod_l+0xa10>
 8007c44:	e4da      	b.n	80075fc <_strtod_l+0x49c>
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	b333      	cbz	r3, 8007c98 <_strtod_l+0xb38>
 8007c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c50:	d822      	bhi.n	8007c98 <_strtod_l+0xb38>
 8007c52:	a331      	add	r3, pc, #196	; (adr r3, 8007d18 <_strtod_l+0xbb8>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	4630      	mov	r0, r6
 8007c5a:	4639      	mov	r1, r7
 8007c5c:	f7f8 ff68 	bl	8000b30 <__aeabi_dcmple>
 8007c60:	b1a0      	cbz	r0, 8007c8c <_strtod_l+0xb2c>
 8007c62:	4639      	mov	r1, r7
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7f8 ffbf 	bl	8000be8 <__aeabi_d2uiz>
 8007c6a:	2801      	cmp	r0, #1
 8007c6c:	bf38      	it	cc
 8007c6e:	2001      	movcc	r0, #1
 8007c70:	f7f8 fc68 	bl	8000544 <__aeabi_ui2d>
 8007c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c76:	4606      	mov	r6, r0
 8007c78:	460f      	mov	r7, r1
 8007c7a:	bb23      	cbnz	r3, 8007cc6 <_strtod_l+0xb66>
 8007c7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c80:	9010      	str	r0, [sp, #64]	; 0x40
 8007c82:	9311      	str	r3, [sp, #68]	; 0x44
 8007c84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007c8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c94:	1a9b      	subs	r3, r3, r2
 8007c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8007ca0:	eef0 0a68 	vmov.f32	s1, s17
 8007ca4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007ca8:	f7ff f8fc 	bl	8006ea4 <__ulp>
 8007cac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007cb0:	ec53 2b10 	vmov	r2, r3, d0
 8007cb4:	f7f8 fcc0 	bl	8000638 <__aeabi_dmul>
 8007cb8:	ec53 2b18 	vmov	r2, r3, d8
 8007cbc:	f7f8 fb06 	bl	80002cc <__adddf3>
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	4689      	mov	r9, r1
 8007cc4:	e78d      	b.n	8007be2 <_strtod_l+0xa82>
 8007cc6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007cca:	e7db      	b.n	8007c84 <_strtod_l+0xb24>
 8007ccc:	a314      	add	r3, pc, #80	; (adr r3, 8007d20 <_strtod_l+0xbc0>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	f7f8 ff23 	bl	8000b1c <__aeabi_dcmplt>
 8007cd6:	e7b3      	b.n	8007c40 <_strtod_l+0xae0>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	930a      	str	r3, [sp, #40]	; 0x28
 8007cdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	f7ff ba7c 	b.w	80071de <_strtod_l+0x7e>
 8007ce6:	2a65      	cmp	r2, #101	; 0x65
 8007ce8:	f43f ab75 	beq.w	80073d6 <_strtod_l+0x276>
 8007cec:	2a45      	cmp	r2, #69	; 0x45
 8007cee:	f43f ab72 	beq.w	80073d6 <_strtod_l+0x276>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f7ff bbaa 	b.w	800744c <_strtod_l+0x2ec>
 8007cf8:	00000000 	.word	0x00000000
 8007cfc:	bff00000 	.word	0xbff00000
 8007d00:	00000000 	.word	0x00000000
 8007d04:	3ff00000 	.word	0x3ff00000
 8007d08:	94a03595 	.word	0x94a03595
 8007d0c:	3fdfffff 	.word	0x3fdfffff
 8007d10:	35afe535 	.word	0x35afe535
 8007d14:	3fe00000 	.word	0x3fe00000
 8007d18:	ffc00000 	.word	0xffc00000
 8007d1c:	41dfffff 	.word	0x41dfffff
 8007d20:	94a03595 	.word	0x94a03595
 8007d24:	3fcfffff 	.word	0x3fcfffff
 8007d28:	3ff00000 	.word	0x3ff00000
 8007d2c:	3fe00000 	.word	0x3fe00000
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	7fe00000 	.word	0x7fe00000
 8007d38:	7c9fffff 	.word	0x7c9fffff
 8007d3c:	7fefffff 	.word	0x7fefffff

08007d40 <_strtod_r>:
 8007d40:	4b01      	ldr	r3, [pc, #4]	; (8007d48 <_strtod_r+0x8>)
 8007d42:	f7ff ba0d 	b.w	8007160 <_strtod_l>
 8007d46:	bf00      	nop
 8007d48:	20000068 	.word	0x20000068

08007d4c <_strtol_l.constprop.0>:
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d52:	d001      	beq.n	8007d58 <_strtol_l.constprop.0+0xc>
 8007d54:	2b24      	cmp	r3, #36	; 0x24
 8007d56:	d906      	bls.n	8007d66 <_strtol_l.constprop.0+0x1a>
 8007d58:	f7fd fd88 	bl	800586c <__errno>
 8007d5c:	2316      	movs	r3, #22
 8007d5e:	6003      	str	r3, [r0, #0]
 8007d60:	2000      	movs	r0, #0
 8007d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e4c <_strtol_l.constprop.0+0x100>
 8007d6a:	460d      	mov	r5, r1
 8007d6c:	462e      	mov	r6, r5
 8007d6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d72:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007d76:	f017 0708 	ands.w	r7, r7, #8
 8007d7a:	d1f7      	bne.n	8007d6c <_strtol_l.constprop.0+0x20>
 8007d7c:	2c2d      	cmp	r4, #45	; 0x2d
 8007d7e:	d132      	bne.n	8007de6 <_strtol_l.constprop.0+0x9a>
 8007d80:	782c      	ldrb	r4, [r5, #0]
 8007d82:	2701      	movs	r7, #1
 8007d84:	1cb5      	adds	r5, r6, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d05b      	beq.n	8007e42 <_strtol_l.constprop.0+0xf6>
 8007d8a:	2b10      	cmp	r3, #16
 8007d8c:	d109      	bne.n	8007da2 <_strtol_l.constprop.0+0x56>
 8007d8e:	2c30      	cmp	r4, #48	; 0x30
 8007d90:	d107      	bne.n	8007da2 <_strtol_l.constprop.0+0x56>
 8007d92:	782c      	ldrb	r4, [r5, #0]
 8007d94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d98:	2c58      	cmp	r4, #88	; 0x58
 8007d9a:	d14d      	bne.n	8007e38 <_strtol_l.constprop.0+0xec>
 8007d9c:	786c      	ldrb	r4, [r5, #1]
 8007d9e:	2310      	movs	r3, #16
 8007da0:	3502      	adds	r5, #2
 8007da2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007da6:	f108 38ff 	add.w	r8, r8, #4294967295
 8007daa:	f04f 0e00 	mov.w	lr, #0
 8007dae:	fbb8 f9f3 	udiv	r9, r8, r3
 8007db2:	4676      	mov	r6, lr
 8007db4:	fb03 8a19 	mls	sl, r3, r9, r8
 8007db8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007dbc:	f1bc 0f09 	cmp.w	ip, #9
 8007dc0:	d816      	bhi.n	8007df0 <_strtol_l.constprop.0+0xa4>
 8007dc2:	4664      	mov	r4, ip
 8007dc4:	42a3      	cmp	r3, r4
 8007dc6:	dd24      	ble.n	8007e12 <_strtol_l.constprop.0+0xc6>
 8007dc8:	f1be 3fff 	cmp.w	lr, #4294967295
 8007dcc:	d008      	beq.n	8007de0 <_strtol_l.constprop.0+0x94>
 8007dce:	45b1      	cmp	r9, r6
 8007dd0:	d31c      	bcc.n	8007e0c <_strtol_l.constprop.0+0xc0>
 8007dd2:	d101      	bne.n	8007dd8 <_strtol_l.constprop.0+0x8c>
 8007dd4:	45a2      	cmp	sl, r4
 8007dd6:	db19      	blt.n	8007e0c <_strtol_l.constprop.0+0xc0>
 8007dd8:	fb06 4603 	mla	r6, r6, r3, r4
 8007ddc:	f04f 0e01 	mov.w	lr, #1
 8007de0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007de4:	e7e8      	b.n	8007db8 <_strtol_l.constprop.0+0x6c>
 8007de6:	2c2b      	cmp	r4, #43	; 0x2b
 8007de8:	bf04      	itt	eq
 8007dea:	782c      	ldrbeq	r4, [r5, #0]
 8007dec:	1cb5      	addeq	r5, r6, #2
 8007dee:	e7ca      	b.n	8007d86 <_strtol_l.constprop.0+0x3a>
 8007df0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007df4:	f1bc 0f19 	cmp.w	ip, #25
 8007df8:	d801      	bhi.n	8007dfe <_strtol_l.constprop.0+0xb2>
 8007dfa:	3c37      	subs	r4, #55	; 0x37
 8007dfc:	e7e2      	b.n	8007dc4 <_strtol_l.constprop.0+0x78>
 8007dfe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007e02:	f1bc 0f19 	cmp.w	ip, #25
 8007e06:	d804      	bhi.n	8007e12 <_strtol_l.constprop.0+0xc6>
 8007e08:	3c57      	subs	r4, #87	; 0x57
 8007e0a:	e7db      	b.n	8007dc4 <_strtol_l.constprop.0+0x78>
 8007e0c:	f04f 3eff 	mov.w	lr, #4294967295
 8007e10:	e7e6      	b.n	8007de0 <_strtol_l.constprop.0+0x94>
 8007e12:	f1be 3fff 	cmp.w	lr, #4294967295
 8007e16:	d105      	bne.n	8007e24 <_strtol_l.constprop.0+0xd8>
 8007e18:	2322      	movs	r3, #34	; 0x22
 8007e1a:	6003      	str	r3, [r0, #0]
 8007e1c:	4646      	mov	r6, r8
 8007e1e:	b942      	cbnz	r2, 8007e32 <_strtol_l.constprop.0+0xe6>
 8007e20:	4630      	mov	r0, r6
 8007e22:	e79e      	b.n	8007d62 <_strtol_l.constprop.0+0x16>
 8007e24:	b107      	cbz	r7, 8007e28 <_strtol_l.constprop.0+0xdc>
 8007e26:	4276      	negs	r6, r6
 8007e28:	2a00      	cmp	r2, #0
 8007e2a:	d0f9      	beq.n	8007e20 <_strtol_l.constprop.0+0xd4>
 8007e2c:	f1be 0f00 	cmp.w	lr, #0
 8007e30:	d000      	beq.n	8007e34 <_strtol_l.constprop.0+0xe8>
 8007e32:	1e69      	subs	r1, r5, #1
 8007e34:	6011      	str	r1, [r2, #0]
 8007e36:	e7f3      	b.n	8007e20 <_strtol_l.constprop.0+0xd4>
 8007e38:	2430      	movs	r4, #48	; 0x30
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1b1      	bne.n	8007da2 <_strtol_l.constprop.0+0x56>
 8007e3e:	2308      	movs	r3, #8
 8007e40:	e7af      	b.n	8007da2 <_strtol_l.constprop.0+0x56>
 8007e42:	2c30      	cmp	r4, #48	; 0x30
 8007e44:	d0a5      	beq.n	8007d92 <_strtol_l.constprop.0+0x46>
 8007e46:	230a      	movs	r3, #10
 8007e48:	e7ab      	b.n	8007da2 <_strtol_l.constprop.0+0x56>
 8007e4a:	bf00      	nop
 8007e4c:	0800a601 	.word	0x0800a601

08007e50 <_strtol_r>:
 8007e50:	f7ff bf7c 	b.w	8007d4c <_strtol_l.constprop.0>

08007e54 <__ssputs_r>:
 8007e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	688e      	ldr	r6, [r1, #8]
 8007e5a:	461f      	mov	r7, r3
 8007e5c:	42be      	cmp	r6, r7
 8007e5e:	680b      	ldr	r3, [r1, #0]
 8007e60:	4682      	mov	sl, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	4690      	mov	r8, r2
 8007e66:	d82c      	bhi.n	8007ec2 <__ssputs_r+0x6e>
 8007e68:	898a      	ldrh	r2, [r1, #12]
 8007e6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e6e:	d026      	beq.n	8007ebe <__ssputs_r+0x6a>
 8007e70:	6965      	ldr	r5, [r4, #20]
 8007e72:	6909      	ldr	r1, [r1, #16]
 8007e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e78:	eba3 0901 	sub.w	r9, r3, r1
 8007e7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e80:	1c7b      	adds	r3, r7, #1
 8007e82:	444b      	add	r3, r9
 8007e84:	106d      	asrs	r5, r5, #1
 8007e86:	429d      	cmp	r5, r3
 8007e88:	bf38      	it	cc
 8007e8a:	461d      	movcc	r5, r3
 8007e8c:	0553      	lsls	r3, r2, #21
 8007e8e:	d527      	bpl.n	8007ee0 <__ssputs_r+0x8c>
 8007e90:	4629      	mov	r1, r5
 8007e92:	f7fe fc0f 	bl	80066b4 <_malloc_r>
 8007e96:	4606      	mov	r6, r0
 8007e98:	b360      	cbz	r0, 8007ef4 <__ssputs_r+0xa0>
 8007e9a:	6921      	ldr	r1, [r4, #16]
 8007e9c:	464a      	mov	r2, r9
 8007e9e:	f000 fa1b 	bl	80082d8 <memcpy>
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eac:	81a3      	strh	r3, [r4, #12]
 8007eae:	6126      	str	r6, [r4, #16]
 8007eb0:	6165      	str	r5, [r4, #20]
 8007eb2:	444e      	add	r6, r9
 8007eb4:	eba5 0509 	sub.w	r5, r5, r9
 8007eb8:	6026      	str	r6, [r4, #0]
 8007eba:	60a5      	str	r5, [r4, #8]
 8007ebc:	463e      	mov	r6, r7
 8007ebe:	42be      	cmp	r6, r7
 8007ec0:	d900      	bls.n	8007ec4 <__ssputs_r+0x70>
 8007ec2:	463e      	mov	r6, r7
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	4632      	mov	r2, r6
 8007ec8:	4641      	mov	r1, r8
 8007eca:	f000 f9c9 	bl	8008260 <memmove>
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	1b9b      	subs	r3, r3, r6
 8007ed2:	60a3      	str	r3, [r4, #8]
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	4433      	add	r3, r6
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	2000      	movs	r0, #0
 8007edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee0:	462a      	mov	r2, r5
 8007ee2:	f000 fdae 	bl	8008a42 <_realloc_r>
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d1e0      	bne.n	8007eae <__ssputs_r+0x5a>
 8007eec:	6921      	ldr	r1, [r4, #16]
 8007eee:	4650      	mov	r0, sl
 8007ef0:	f7fe fb6c 	bl	80065cc <_free_r>
 8007ef4:	230c      	movs	r3, #12
 8007ef6:	f8ca 3000 	str.w	r3, [sl]
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f00:	81a3      	strh	r3, [r4, #12]
 8007f02:	f04f 30ff 	mov.w	r0, #4294967295
 8007f06:	e7e9      	b.n	8007edc <__ssputs_r+0x88>

08007f08 <_svfiprintf_r>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	4698      	mov	r8, r3
 8007f0e:	898b      	ldrh	r3, [r1, #12]
 8007f10:	061b      	lsls	r3, r3, #24
 8007f12:	b09d      	sub	sp, #116	; 0x74
 8007f14:	4607      	mov	r7, r0
 8007f16:	460d      	mov	r5, r1
 8007f18:	4614      	mov	r4, r2
 8007f1a:	d50e      	bpl.n	8007f3a <_svfiprintf_r+0x32>
 8007f1c:	690b      	ldr	r3, [r1, #16]
 8007f1e:	b963      	cbnz	r3, 8007f3a <_svfiprintf_r+0x32>
 8007f20:	2140      	movs	r1, #64	; 0x40
 8007f22:	f7fe fbc7 	bl	80066b4 <_malloc_r>
 8007f26:	6028      	str	r0, [r5, #0]
 8007f28:	6128      	str	r0, [r5, #16]
 8007f2a:	b920      	cbnz	r0, 8007f36 <_svfiprintf_r+0x2e>
 8007f2c:	230c      	movs	r3, #12
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	e0d0      	b.n	80080d8 <_svfiprintf_r+0x1d0>
 8007f36:	2340      	movs	r3, #64	; 0x40
 8007f38:	616b      	str	r3, [r5, #20]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3e:	2320      	movs	r3, #32
 8007f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f48:	2330      	movs	r3, #48	; 0x30
 8007f4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80080f0 <_svfiprintf_r+0x1e8>
 8007f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f52:	f04f 0901 	mov.w	r9, #1
 8007f56:	4623      	mov	r3, r4
 8007f58:	469a      	mov	sl, r3
 8007f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f5e:	b10a      	cbz	r2, 8007f64 <_svfiprintf_r+0x5c>
 8007f60:	2a25      	cmp	r2, #37	; 0x25
 8007f62:	d1f9      	bne.n	8007f58 <_svfiprintf_r+0x50>
 8007f64:	ebba 0b04 	subs.w	fp, sl, r4
 8007f68:	d00b      	beq.n	8007f82 <_svfiprintf_r+0x7a>
 8007f6a:	465b      	mov	r3, fp
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff ff6f 	bl	8007e54 <__ssputs_r>
 8007f76:	3001      	adds	r0, #1
 8007f78:	f000 80a9 	beq.w	80080ce <_svfiprintf_r+0x1c6>
 8007f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f7e:	445a      	add	r2, fp
 8007f80:	9209      	str	r2, [sp, #36]	; 0x24
 8007f82:	f89a 3000 	ldrb.w	r3, [sl]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 80a1 	beq.w	80080ce <_svfiprintf_r+0x1c6>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f96:	f10a 0a01 	add.w	sl, sl, #1
 8007f9a:	9304      	str	r3, [sp, #16]
 8007f9c:	9307      	str	r3, [sp, #28]
 8007f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8007fa4:	4654      	mov	r4, sl
 8007fa6:	2205      	movs	r2, #5
 8007fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fac:	4850      	ldr	r0, [pc, #320]	; (80080f0 <_svfiprintf_r+0x1e8>)
 8007fae:	f7f8 f92f 	bl	8000210 <memchr>
 8007fb2:	9a04      	ldr	r2, [sp, #16]
 8007fb4:	b9d8      	cbnz	r0, 8007fee <_svfiprintf_r+0xe6>
 8007fb6:	06d0      	lsls	r0, r2, #27
 8007fb8:	bf44      	itt	mi
 8007fba:	2320      	movmi	r3, #32
 8007fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fc0:	0711      	lsls	r1, r2, #28
 8007fc2:	bf44      	itt	mi
 8007fc4:	232b      	movmi	r3, #43	; 0x2b
 8007fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fca:	f89a 3000 	ldrb.w	r3, [sl]
 8007fce:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd0:	d015      	beq.n	8007ffe <_svfiprintf_r+0xf6>
 8007fd2:	9a07      	ldr	r2, [sp, #28]
 8007fd4:	4654      	mov	r4, sl
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	f04f 0c0a 	mov.w	ip, #10
 8007fdc:	4621      	mov	r1, r4
 8007fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fe2:	3b30      	subs	r3, #48	; 0x30
 8007fe4:	2b09      	cmp	r3, #9
 8007fe6:	d94d      	bls.n	8008084 <_svfiprintf_r+0x17c>
 8007fe8:	b1b0      	cbz	r0, 8008018 <_svfiprintf_r+0x110>
 8007fea:	9207      	str	r2, [sp, #28]
 8007fec:	e014      	b.n	8008018 <_svfiprintf_r+0x110>
 8007fee:	eba0 0308 	sub.w	r3, r0, r8
 8007ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	9304      	str	r3, [sp, #16]
 8007ffa:	46a2      	mov	sl, r4
 8007ffc:	e7d2      	b.n	8007fa4 <_svfiprintf_r+0x9c>
 8007ffe:	9b03      	ldr	r3, [sp, #12]
 8008000:	1d19      	adds	r1, r3, #4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	9103      	str	r1, [sp, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	bfbb      	ittet	lt
 800800a:	425b      	neglt	r3, r3
 800800c:	f042 0202 	orrlt.w	r2, r2, #2
 8008010:	9307      	strge	r3, [sp, #28]
 8008012:	9307      	strlt	r3, [sp, #28]
 8008014:	bfb8      	it	lt
 8008016:	9204      	strlt	r2, [sp, #16]
 8008018:	7823      	ldrb	r3, [r4, #0]
 800801a:	2b2e      	cmp	r3, #46	; 0x2e
 800801c:	d10c      	bne.n	8008038 <_svfiprintf_r+0x130>
 800801e:	7863      	ldrb	r3, [r4, #1]
 8008020:	2b2a      	cmp	r3, #42	; 0x2a
 8008022:	d134      	bne.n	800808e <_svfiprintf_r+0x186>
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	1d1a      	adds	r2, r3, #4
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	9203      	str	r2, [sp, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	bfb8      	it	lt
 8008030:	f04f 33ff 	movlt.w	r3, #4294967295
 8008034:	3402      	adds	r4, #2
 8008036:	9305      	str	r3, [sp, #20]
 8008038:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008100 <_svfiprintf_r+0x1f8>
 800803c:	7821      	ldrb	r1, [r4, #0]
 800803e:	2203      	movs	r2, #3
 8008040:	4650      	mov	r0, sl
 8008042:	f7f8 f8e5 	bl	8000210 <memchr>
 8008046:	b138      	cbz	r0, 8008058 <_svfiprintf_r+0x150>
 8008048:	9b04      	ldr	r3, [sp, #16]
 800804a:	eba0 000a 	sub.w	r0, r0, sl
 800804e:	2240      	movs	r2, #64	; 0x40
 8008050:	4082      	lsls	r2, r0
 8008052:	4313      	orrs	r3, r2
 8008054:	3401      	adds	r4, #1
 8008056:	9304      	str	r3, [sp, #16]
 8008058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800805c:	4825      	ldr	r0, [pc, #148]	; (80080f4 <_svfiprintf_r+0x1ec>)
 800805e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008062:	2206      	movs	r2, #6
 8008064:	f7f8 f8d4 	bl	8000210 <memchr>
 8008068:	2800      	cmp	r0, #0
 800806a:	d038      	beq.n	80080de <_svfiprintf_r+0x1d6>
 800806c:	4b22      	ldr	r3, [pc, #136]	; (80080f8 <_svfiprintf_r+0x1f0>)
 800806e:	bb1b      	cbnz	r3, 80080b8 <_svfiprintf_r+0x1b0>
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	3307      	adds	r3, #7
 8008074:	f023 0307 	bic.w	r3, r3, #7
 8008078:	3308      	adds	r3, #8
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800807e:	4433      	add	r3, r6
 8008080:	9309      	str	r3, [sp, #36]	; 0x24
 8008082:	e768      	b.n	8007f56 <_svfiprintf_r+0x4e>
 8008084:	fb0c 3202 	mla	r2, ip, r2, r3
 8008088:	460c      	mov	r4, r1
 800808a:	2001      	movs	r0, #1
 800808c:	e7a6      	b.n	8007fdc <_svfiprintf_r+0xd4>
 800808e:	2300      	movs	r3, #0
 8008090:	3401      	adds	r4, #1
 8008092:	9305      	str	r3, [sp, #20]
 8008094:	4619      	mov	r1, r3
 8008096:	f04f 0c0a 	mov.w	ip, #10
 800809a:	4620      	mov	r0, r4
 800809c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080a0:	3a30      	subs	r2, #48	; 0x30
 80080a2:	2a09      	cmp	r2, #9
 80080a4:	d903      	bls.n	80080ae <_svfiprintf_r+0x1a6>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0c6      	beq.n	8008038 <_svfiprintf_r+0x130>
 80080aa:	9105      	str	r1, [sp, #20]
 80080ac:	e7c4      	b.n	8008038 <_svfiprintf_r+0x130>
 80080ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80080b2:	4604      	mov	r4, r0
 80080b4:	2301      	movs	r3, #1
 80080b6:	e7f0      	b.n	800809a <_svfiprintf_r+0x192>
 80080b8:	ab03      	add	r3, sp, #12
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	462a      	mov	r2, r5
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <_svfiprintf_r+0x1f4>)
 80080c0:	a904      	add	r1, sp, #16
 80080c2:	4638      	mov	r0, r7
 80080c4:	f7fc fc84 	bl	80049d0 <_printf_float>
 80080c8:	1c42      	adds	r2, r0, #1
 80080ca:	4606      	mov	r6, r0
 80080cc:	d1d6      	bne.n	800807c <_svfiprintf_r+0x174>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	065b      	lsls	r3, r3, #25
 80080d2:	f53f af2d 	bmi.w	8007f30 <_svfiprintf_r+0x28>
 80080d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080d8:	b01d      	add	sp, #116	; 0x74
 80080da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080de:	ab03      	add	r3, sp, #12
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	462a      	mov	r2, r5
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <_svfiprintf_r+0x1f4>)
 80080e6:	a904      	add	r1, sp, #16
 80080e8:	4638      	mov	r0, r7
 80080ea:	f7fc ff15 	bl	8004f18 <_printf_i>
 80080ee:	e7eb      	b.n	80080c8 <_svfiprintf_r+0x1c0>
 80080f0:	0800a701 	.word	0x0800a701
 80080f4:	0800a70b 	.word	0x0800a70b
 80080f8:	080049d1 	.word	0x080049d1
 80080fc:	08007e55 	.word	0x08007e55
 8008100:	0800a707 	.word	0x0800a707

08008104 <__sflush_r>:
 8008104:	898a      	ldrh	r2, [r1, #12]
 8008106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810a:	4605      	mov	r5, r0
 800810c:	0710      	lsls	r0, r2, #28
 800810e:	460c      	mov	r4, r1
 8008110:	d458      	bmi.n	80081c4 <__sflush_r+0xc0>
 8008112:	684b      	ldr	r3, [r1, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	dc05      	bgt.n	8008124 <__sflush_r+0x20>
 8008118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800811a:	2b00      	cmp	r3, #0
 800811c:	dc02      	bgt.n	8008124 <__sflush_r+0x20>
 800811e:	2000      	movs	r0, #0
 8008120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008126:	2e00      	cmp	r6, #0
 8008128:	d0f9      	beq.n	800811e <__sflush_r+0x1a>
 800812a:	2300      	movs	r3, #0
 800812c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008130:	682f      	ldr	r7, [r5, #0]
 8008132:	6a21      	ldr	r1, [r4, #32]
 8008134:	602b      	str	r3, [r5, #0]
 8008136:	d032      	beq.n	800819e <__sflush_r+0x9a>
 8008138:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	075a      	lsls	r2, r3, #29
 800813e:	d505      	bpl.n	800814c <__sflush_r+0x48>
 8008140:	6863      	ldr	r3, [r4, #4]
 8008142:	1ac0      	subs	r0, r0, r3
 8008144:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008146:	b10b      	cbz	r3, 800814c <__sflush_r+0x48>
 8008148:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800814a:	1ac0      	subs	r0, r0, r3
 800814c:	2300      	movs	r3, #0
 800814e:	4602      	mov	r2, r0
 8008150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008152:	6a21      	ldr	r1, [r4, #32]
 8008154:	4628      	mov	r0, r5
 8008156:	47b0      	blx	r6
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	d106      	bne.n	800816c <__sflush_r+0x68>
 800815e:	6829      	ldr	r1, [r5, #0]
 8008160:	291d      	cmp	r1, #29
 8008162:	d82b      	bhi.n	80081bc <__sflush_r+0xb8>
 8008164:	4a29      	ldr	r2, [pc, #164]	; (800820c <__sflush_r+0x108>)
 8008166:	410a      	asrs	r2, r1
 8008168:	07d6      	lsls	r6, r2, #31
 800816a:	d427      	bmi.n	80081bc <__sflush_r+0xb8>
 800816c:	2200      	movs	r2, #0
 800816e:	6062      	str	r2, [r4, #4]
 8008170:	04d9      	lsls	r1, r3, #19
 8008172:	6922      	ldr	r2, [r4, #16]
 8008174:	6022      	str	r2, [r4, #0]
 8008176:	d504      	bpl.n	8008182 <__sflush_r+0x7e>
 8008178:	1c42      	adds	r2, r0, #1
 800817a:	d101      	bne.n	8008180 <__sflush_r+0x7c>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b903      	cbnz	r3, 8008182 <__sflush_r+0x7e>
 8008180:	6560      	str	r0, [r4, #84]	; 0x54
 8008182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008184:	602f      	str	r7, [r5, #0]
 8008186:	2900      	cmp	r1, #0
 8008188:	d0c9      	beq.n	800811e <__sflush_r+0x1a>
 800818a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800818e:	4299      	cmp	r1, r3
 8008190:	d002      	beq.n	8008198 <__sflush_r+0x94>
 8008192:	4628      	mov	r0, r5
 8008194:	f7fe fa1a 	bl	80065cc <_free_r>
 8008198:	2000      	movs	r0, #0
 800819a:	6360      	str	r0, [r4, #52]	; 0x34
 800819c:	e7c0      	b.n	8008120 <__sflush_r+0x1c>
 800819e:	2301      	movs	r3, #1
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b0      	blx	r6
 80081a4:	1c41      	adds	r1, r0, #1
 80081a6:	d1c8      	bne.n	800813a <__sflush_r+0x36>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0c5      	beq.n	800813a <__sflush_r+0x36>
 80081ae:	2b1d      	cmp	r3, #29
 80081b0:	d001      	beq.n	80081b6 <__sflush_r+0xb2>
 80081b2:	2b16      	cmp	r3, #22
 80081b4:	d101      	bne.n	80081ba <__sflush_r+0xb6>
 80081b6:	602f      	str	r7, [r5, #0]
 80081b8:	e7b1      	b.n	800811e <__sflush_r+0x1a>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c0:	81a3      	strh	r3, [r4, #12]
 80081c2:	e7ad      	b.n	8008120 <__sflush_r+0x1c>
 80081c4:	690f      	ldr	r7, [r1, #16]
 80081c6:	2f00      	cmp	r7, #0
 80081c8:	d0a9      	beq.n	800811e <__sflush_r+0x1a>
 80081ca:	0793      	lsls	r3, r2, #30
 80081cc:	680e      	ldr	r6, [r1, #0]
 80081ce:	bf08      	it	eq
 80081d0:	694b      	ldreq	r3, [r1, #20]
 80081d2:	600f      	str	r7, [r1, #0]
 80081d4:	bf18      	it	ne
 80081d6:	2300      	movne	r3, #0
 80081d8:	eba6 0807 	sub.w	r8, r6, r7
 80081dc:	608b      	str	r3, [r1, #8]
 80081de:	f1b8 0f00 	cmp.w	r8, #0
 80081e2:	dd9c      	ble.n	800811e <__sflush_r+0x1a>
 80081e4:	6a21      	ldr	r1, [r4, #32]
 80081e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081e8:	4643      	mov	r3, r8
 80081ea:	463a      	mov	r2, r7
 80081ec:	4628      	mov	r0, r5
 80081ee:	47b0      	blx	r6
 80081f0:	2800      	cmp	r0, #0
 80081f2:	dc06      	bgt.n	8008202 <__sflush_r+0xfe>
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081fa:	81a3      	strh	r3, [r4, #12]
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008200:	e78e      	b.n	8008120 <__sflush_r+0x1c>
 8008202:	4407      	add	r7, r0
 8008204:	eba8 0800 	sub.w	r8, r8, r0
 8008208:	e7e9      	b.n	80081de <__sflush_r+0xda>
 800820a:	bf00      	nop
 800820c:	dfbffffe 	.word	0xdfbffffe

08008210 <_fflush_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	690b      	ldr	r3, [r1, #16]
 8008214:	4605      	mov	r5, r0
 8008216:	460c      	mov	r4, r1
 8008218:	b913      	cbnz	r3, 8008220 <_fflush_r+0x10>
 800821a:	2500      	movs	r5, #0
 800821c:	4628      	mov	r0, r5
 800821e:	bd38      	pop	{r3, r4, r5, pc}
 8008220:	b118      	cbz	r0, 800822a <_fflush_r+0x1a>
 8008222:	6a03      	ldr	r3, [r0, #32]
 8008224:	b90b      	cbnz	r3, 800822a <_fflush_r+0x1a>
 8008226:	f7fd fa35 	bl	8005694 <__sinit>
 800822a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0f3      	beq.n	800821a <_fflush_r+0xa>
 8008232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008234:	07d0      	lsls	r0, r2, #31
 8008236:	d404      	bmi.n	8008242 <_fflush_r+0x32>
 8008238:	0599      	lsls	r1, r3, #22
 800823a:	d402      	bmi.n	8008242 <_fflush_r+0x32>
 800823c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800823e:	f7fd fb40 	bl	80058c2 <__retarget_lock_acquire_recursive>
 8008242:	4628      	mov	r0, r5
 8008244:	4621      	mov	r1, r4
 8008246:	f7ff ff5d 	bl	8008104 <__sflush_r>
 800824a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800824c:	07da      	lsls	r2, r3, #31
 800824e:	4605      	mov	r5, r0
 8008250:	d4e4      	bmi.n	800821c <_fflush_r+0xc>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	059b      	lsls	r3, r3, #22
 8008256:	d4e1      	bmi.n	800821c <_fflush_r+0xc>
 8008258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800825a:	f7fd fb33 	bl	80058c4 <__retarget_lock_release_recursive>
 800825e:	e7dd      	b.n	800821c <_fflush_r+0xc>

08008260 <memmove>:
 8008260:	4288      	cmp	r0, r1
 8008262:	b510      	push	{r4, lr}
 8008264:	eb01 0402 	add.w	r4, r1, r2
 8008268:	d902      	bls.n	8008270 <memmove+0x10>
 800826a:	4284      	cmp	r4, r0
 800826c:	4623      	mov	r3, r4
 800826e:	d807      	bhi.n	8008280 <memmove+0x20>
 8008270:	1e43      	subs	r3, r0, #1
 8008272:	42a1      	cmp	r1, r4
 8008274:	d008      	beq.n	8008288 <memmove+0x28>
 8008276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800827a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800827e:	e7f8      	b.n	8008272 <memmove+0x12>
 8008280:	4402      	add	r2, r0
 8008282:	4601      	mov	r1, r0
 8008284:	428a      	cmp	r2, r1
 8008286:	d100      	bne.n	800828a <memmove+0x2a>
 8008288:	bd10      	pop	{r4, pc}
 800828a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800828e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008292:	e7f7      	b.n	8008284 <memmove+0x24>

08008294 <strncmp>:
 8008294:	b510      	push	{r4, lr}
 8008296:	b16a      	cbz	r2, 80082b4 <strncmp+0x20>
 8008298:	3901      	subs	r1, #1
 800829a:	1884      	adds	r4, r0, r2
 800829c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d103      	bne.n	80082b0 <strncmp+0x1c>
 80082a8:	42a0      	cmp	r0, r4
 80082aa:	d001      	beq.n	80082b0 <strncmp+0x1c>
 80082ac:	2a00      	cmp	r2, #0
 80082ae:	d1f5      	bne.n	800829c <strncmp+0x8>
 80082b0:	1ad0      	subs	r0, r2, r3
 80082b2:	bd10      	pop	{r4, pc}
 80082b4:	4610      	mov	r0, r2
 80082b6:	e7fc      	b.n	80082b2 <strncmp+0x1e>

080082b8 <_sbrk_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	4d06      	ldr	r5, [pc, #24]	; (80082d4 <_sbrk_r+0x1c>)
 80082bc:	2300      	movs	r3, #0
 80082be:	4604      	mov	r4, r0
 80082c0:	4608      	mov	r0, r1
 80082c2:	602b      	str	r3, [r5, #0]
 80082c4:	f7f9 fd26 	bl	8001d14 <_sbrk>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d102      	bne.n	80082d2 <_sbrk_r+0x1a>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	b103      	cbz	r3, 80082d2 <_sbrk_r+0x1a>
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	2000144c 	.word	0x2000144c

080082d8 <memcpy>:
 80082d8:	440a      	add	r2, r1
 80082da:	4291      	cmp	r1, r2
 80082dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80082e0:	d100      	bne.n	80082e4 <memcpy+0xc>
 80082e2:	4770      	bx	lr
 80082e4:	b510      	push	{r4, lr}
 80082e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ee:	4291      	cmp	r1, r2
 80082f0:	d1f9      	bne.n	80082e6 <memcpy+0xe>
 80082f2:	bd10      	pop	{r4, pc}
 80082f4:	0000      	movs	r0, r0
	...

080082f8 <nan>:
 80082f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008300 <nan+0x8>
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	00000000 	.word	0x00000000
 8008304:	7ff80000 	.word	0x7ff80000

08008308 <__assert_func>:
 8008308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800830a:	4614      	mov	r4, r2
 800830c:	461a      	mov	r2, r3
 800830e:	4b09      	ldr	r3, [pc, #36]	; (8008334 <__assert_func+0x2c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4605      	mov	r5, r0
 8008314:	68d8      	ldr	r0, [r3, #12]
 8008316:	b14c      	cbz	r4, 800832c <__assert_func+0x24>
 8008318:	4b07      	ldr	r3, [pc, #28]	; (8008338 <__assert_func+0x30>)
 800831a:	9100      	str	r1, [sp, #0]
 800831c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008320:	4906      	ldr	r1, [pc, #24]	; (800833c <__assert_func+0x34>)
 8008322:	462b      	mov	r3, r5
 8008324:	f000 fbca 	bl	8008abc <fiprintf>
 8008328:	f000 fbda 	bl	8008ae0 <abort>
 800832c:	4b04      	ldr	r3, [pc, #16]	; (8008340 <__assert_func+0x38>)
 800832e:	461c      	mov	r4, r3
 8008330:	e7f3      	b.n	800831a <__assert_func+0x12>
 8008332:	bf00      	nop
 8008334:	20000064 	.word	0x20000064
 8008338:	0800a71a 	.word	0x0800a71a
 800833c:	0800a727 	.word	0x0800a727
 8008340:	0800a755 	.word	0x0800a755

08008344 <_calloc_r>:
 8008344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008346:	fba1 2402 	umull	r2, r4, r1, r2
 800834a:	b94c      	cbnz	r4, 8008360 <_calloc_r+0x1c>
 800834c:	4611      	mov	r1, r2
 800834e:	9201      	str	r2, [sp, #4]
 8008350:	f7fe f9b0 	bl	80066b4 <_malloc_r>
 8008354:	9a01      	ldr	r2, [sp, #4]
 8008356:	4605      	mov	r5, r0
 8008358:	b930      	cbnz	r0, 8008368 <_calloc_r+0x24>
 800835a:	4628      	mov	r0, r5
 800835c:	b003      	add	sp, #12
 800835e:	bd30      	pop	{r4, r5, pc}
 8008360:	220c      	movs	r2, #12
 8008362:	6002      	str	r2, [r0, #0]
 8008364:	2500      	movs	r5, #0
 8008366:	e7f8      	b.n	800835a <_calloc_r+0x16>
 8008368:	4621      	mov	r1, r4
 800836a:	f7fd fa2c 	bl	80057c6 <memset>
 800836e:	e7f4      	b.n	800835a <_calloc_r+0x16>

08008370 <rshift>:
 8008370:	6903      	ldr	r3, [r0, #16]
 8008372:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008376:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800837a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800837e:	f100 0414 	add.w	r4, r0, #20
 8008382:	dd45      	ble.n	8008410 <rshift+0xa0>
 8008384:	f011 011f 	ands.w	r1, r1, #31
 8008388:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800838c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008390:	d10c      	bne.n	80083ac <rshift+0x3c>
 8008392:	f100 0710 	add.w	r7, r0, #16
 8008396:	4629      	mov	r1, r5
 8008398:	42b1      	cmp	r1, r6
 800839a:	d334      	bcc.n	8008406 <rshift+0x96>
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	1eea      	subs	r2, r5, #3
 80083a2:	4296      	cmp	r6, r2
 80083a4:	bf38      	it	cc
 80083a6:	2300      	movcc	r3, #0
 80083a8:	4423      	add	r3, r4
 80083aa:	e015      	b.n	80083d8 <rshift+0x68>
 80083ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80083b0:	f1c1 0820 	rsb	r8, r1, #32
 80083b4:	40cf      	lsrs	r7, r1
 80083b6:	f105 0e04 	add.w	lr, r5, #4
 80083ba:	46a1      	mov	r9, r4
 80083bc:	4576      	cmp	r6, lr
 80083be:	46f4      	mov	ip, lr
 80083c0:	d815      	bhi.n	80083ee <rshift+0x7e>
 80083c2:	1a9a      	subs	r2, r3, r2
 80083c4:	0092      	lsls	r2, r2, #2
 80083c6:	3a04      	subs	r2, #4
 80083c8:	3501      	adds	r5, #1
 80083ca:	42ae      	cmp	r6, r5
 80083cc:	bf38      	it	cc
 80083ce:	2200      	movcc	r2, #0
 80083d0:	18a3      	adds	r3, r4, r2
 80083d2:	50a7      	str	r7, [r4, r2]
 80083d4:	b107      	cbz	r7, 80083d8 <rshift+0x68>
 80083d6:	3304      	adds	r3, #4
 80083d8:	1b1a      	subs	r2, r3, r4
 80083da:	42a3      	cmp	r3, r4
 80083dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80083e0:	bf08      	it	eq
 80083e2:	2300      	moveq	r3, #0
 80083e4:	6102      	str	r2, [r0, #16]
 80083e6:	bf08      	it	eq
 80083e8:	6143      	streq	r3, [r0, #20]
 80083ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083ee:	f8dc c000 	ldr.w	ip, [ip]
 80083f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80083f6:	ea4c 0707 	orr.w	r7, ip, r7
 80083fa:	f849 7b04 	str.w	r7, [r9], #4
 80083fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008402:	40cf      	lsrs	r7, r1
 8008404:	e7da      	b.n	80083bc <rshift+0x4c>
 8008406:	f851 cb04 	ldr.w	ip, [r1], #4
 800840a:	f847 cf04 	str.w	ip, [r7, #4]!
 800840e:	e7c3      	b.n	8008398 <rshift+0x28>
 8008410:	4623      	mov	r3, r4
 8008412:	e7e1      	b.n	80083d8 <rshift+0x68>

08008414 <__hexdig_fun>:
 8008414:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008418:	2b09      	cmp	r3, #9
 800841a:	d802      	bhi.n	8008422 <__hexdig_fun+0xe>
 800841c:	3820      	subs	r0, #32
 800841e:	b2c0      	uxtb	r0, r0
 8008420:	4770      	bx	lr
 8008422:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008426:	2b05      	cmp	r3, #5
 8008428:	d801      	bhi.n	800842e <__hexdig_fun+0x1a>
 800842a:	3847      	subs	r0, #71	; 0x47
 800842c:	e7f7      	b.n	800841e <__hexdig_fun+0xa>
 800842e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008432:	2b05      	cmp	r3, #5
 8008434:	d801      	bhi.n	800843a <__hexdig_fun+0x26>
 8008436:	3827      	subs	r0, #39	; 0x27
 8008438:	e7f1      	b.n	800841e <__hexdig_fun+0xa>
 800843a:	2000      	movs	r0, #0
 800843c:	4770      	bx	lr
	...

08008440 <__gethex>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	4617      	mov	r7, r2
 8008446:	680a      	ldr	r2, [r1, #0]
 8008448:	b085      	sub	sp, #20
 800844a:	f102 0b02 	add.w	fp, r2, #2
 800844e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008452:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008456:	4681      	mov	r9, r0
 8008458:	468a      	mov	sl, r1
 800845a:	9302      	str	r3, [sp, #8]
 800845c:	32fe      	adds	r2, #254	; 0xfe
 800845e:	eb02 030b 	add.w	r3, r2, fp
 8008462:	46d8      	mov	r8, fp
 8008464:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008468:	9301      	str	r3, [sp, #4]
 800846a:	2830      	cmp	r0, #48	; 0x30
 800846c:	d0f7      	beq.n	800845e <__gethex+0x1e>
 800846e:	f7ff ffd1 	bl	8008414 <__hexdig_fun>
 8008472:	4604      	mov	r4, r0
 8008474:	2800      	cmp	r0, #0
 8008476:	d138      	bne.n	80084ea <__gethex+0xaa>
 8008478:	49a7      	ldr	r1, [pc, #668]	; (8008718 <__gethex+0x2d8>)
 800847a:	2201      	movs	r2, #1
 800847c:	4640      	mov	r0, r8
 800847e:	f7ff ff09 	bl	8008294 <strncmp>
 8008482:	4606      	mov	r6, r0
 8008484:	2800      	cmp	r0, #0
 8008486:	d169      	bne.n	800855c <__gethex+0x11c>
 8008488:	f898 0001 	ldrb.w	r0, [r8, #1]
 800848c:	465d      	mov	r5, fp
 800848e:	f7ff ffc1 	bl	8008414 <__hexdig_fun>
 8008492:	2800      	cmp	r0, #0
 8008494:	d064      	beq.n	8008560 <__gethex+0x120>
 8008496:	465a      	mov	r2, fp
 8008498:	7810      	ldrb	r0, [r2, #0]
 800849a:	2830      	cmp	r0, #48	; 0x30
 800849c:	4690      	mov	r8, r2
 800849e:	f102 0201 	add.w	r2, r2, #1
 80084a2:	d0f9      	beq.n	8008498 <__gethex+0x58>
 80084a4:	f7ff ffb6 	bl	8008414 <__hexdig_fun>
 80084a8:	2301      	movs	r3, #1
 80084aa:	fab0 f480 	clz	r4, r0
 80084ae:	0964      	lsrs	r4, r4, #5
 80084b0:	465e      	mov	r6, fp
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	4642      	mov	r2, r8
 80084b6:	4615      	mov	r5, r2
 80084b8:	3201      	adds	r2, #1
 80084ba:	7828      	ldrb	r0, [r5, #0]
 80084bc:	f7ff ffaa 	bl	8008414 <__hexdig_fun>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d1f8      	bne.n	80084b6 <__gethex+0x76>
 80084c4:	4994      	ldr	r1, [pc, #592]	; (8008718 <__gethex+0x2d8>)
 80084c6:	2201      	movs	r2, #1
 80084c8:	4628      	mov	r0, r5
 80084ca:	f7ff fee3 	bl	8008294 <strncmp>
 80084ce:	b978      	cbnz	r0, 80084f0 <__gethex+0xb0>
 80084d0:	b946      	cbnz	r6, 80084e4 <__gethex+0xa4>
 80084d2:	1c6e      	adds	r6, r5, #1
 80084d4:	4632      	mov	r2, r6
 80084d6:	4615      	mov	r5, r2
 80084d8:	3201      	adds	r2, #1
 80084da:	7828      	ldrb	r0, [r5, #0]
 80084dc:	f7ff ff9a 	bl	8008414 <__hexdig_fun>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d1f8      	bne.n	80084d6 <__gethex+0x96>
 80084e4:	1b73      	subs	r3, r6, r5
 80084e6:	009e      	lsls	r6, r3, #2
 80084e8:	e004      	b.n	80084f4 <__gethex+0xb4>
 80084ea:	2400      	movs	r4, #0
 80084ec:	4626      	mov	r6, r4
 80084ee:	e7e1      	b.n	80084b4 <__gethex+0x74>
 80084f0:	2e00      	cmp	r6, #0
 80084f2:	d1f7      	bne.n	80084e4 <__gethex+0xa4>
 80084f4:	782b      	ldrb	r3, [r5, #0]
 80084f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084fa:	2b50      	cmp	r3, #80	; 0x50
 80084fc:	d13d      	bne.n	800857a <__gethex+0x13a>
 80084fe:	786b      	ldrb	r3, [r5, #1]
 8008500:	2b2b      	cmp	r3, #43	; 0x2b
 8008502:	d02f      	beq.n	8008564 <__gethex+0x124>
 8008504:	2b2d      	cmp	r3, #45	; 0x2d
 8008506:	d031      	beq.n	800856c <__gethex+0x12c>
 8008508:	1c69      	adds	r1, r5, #1
 800850a:	f04f 0b00 	mov.w	fp, #0
 800850e:	7808      	ldrb	r0, [r1, #0]
 8008510:	f7ff ff80 	bl	8008414 <__hexdig_fun>
 8008514:	1e42      	subs	r2, r0, #1
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	2a18      	cmp	r2, #24
 800851a:	d82e      	bhi.n	800857a <__gethex+0x13a>
 800851c:	f1a0 0210 	sub.w	r2, r0, #16
 8008520:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008524:	f7ff ff76 	bl	8008414 <__hexdig_fun>
 8008528:	f100 3cff 	add.w	ip, r0, #4294967295
 800852c:	fa5f fc8c 	uxtb.w	ip, ip
 8008530:	f1bc 0f18 	cmp.w	ip, #24
 8008534:	d91d      	bls.n	8008572 <__gethex+0x132>
 8008536:	f1bb 0f00 	cmp.w	fp, #0
 800853a:	d000      	beq.n	800853e <__gethex+0xfe>
 800853c:	4252      	negs	r2, r2
 800853e:	4416      	add	r6, r2
 8008540:	f8ca 1000 	str.w	r1, [sl]
 8008544:	b1dc      	cbz	r4, 800857e <__gethex+0x13e>
 8008546:	9b01      	ldr	r3, [sp, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	bf14      	ite	ne
 800854c:	f04f 0800 	movne.w	r8, #0
 8008550:	f04f 0806 	moveq.w	r8, #6
 8008554:	4640      	mov	r0, r8
 8008556:	b005      	add	sp, #20
 8008558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855c:	4645      	mov	r5, r8
 800855e:	4626      	mov	r6, r4
 8008560:	2401      	movs	r4, #1
 8008562:	e7c7      	b.n	80084f4 <__gethex+0xb4>
 8008564:	f04f 0b00 	mov.w	fp, #0
 8008568:	1ca9      	adds	r1, r5, #2
 800856a:	e7d0      	b.n	800850e <__gethex+0xce>
 800856c:	f04f 0b01 	mov.w	fp, #1
 8008570:	e7fa      	b.n	8008568 <__gethex+0x128>
 8008572:	230a      	movs	r3, #10
 8008574:	fb03 0002 	mla	r0, r3, r2, r0
 8008578:	e7d0      	b.n	800851c <__gethex+0xdc>
 800857a:	4629      	mov	r1, r5
 800857c:	e7e0      	b.n	8008540 <__gethex+0x100>
 800857e:	eba5 0308 	sub.w	r3, r5, r8
 8008582:	3b01      	subs	r3, #1
 8008584:	4621      	mov	r1, r4
 8008586:	2b07      	cmp	r3, #7
 8008588:	dc0a      	bgt.n	80085a0 <__gethex+0x160>
 800858a:	4648      	mov	r0, r9
 800858c:	f7fe f91e 	bl	80067cc <_Balloc>
 8008590:	4604      	mov	r4, r0
 8008592:	b940      	cbnz	r0, 80085a6 <__gethex+0x166>
 8008594:	4b61      	ldr	r3, [pc, #388]	; (800871c <__gethex+0x2dc>)
 8008596:	4602      	mov	r2, r0
 8008598:	21e4      	movs	r1, #228	; 0xe4
 800859a:	4861      	ldr	r0, [pc, #388]	; (8008720 <__gethex+0x2e0>)
 800859c:	f7ff feb4 	bl	8008308 <__assert_func>
 80085a0:	3101      	adds	r1, #1
 80085a2:	105b      	asrs	r3, r3, #1
 80085a4:	e7ef      	b.n	8008586 <__gethex+0x146>
 80085a6:	f100 0a14 	add.w	sl, r0, #20
 80085aa:	2300      	movs	r3, #0
 80085ac:	495a      	ldr	r1, [pc, #360]	; (8008718 <__gethex+0x2d8>)
 80085ae:	f8cd a004 	str.w	sl, [sp, #4]
 80085b2:	469b      	mov	fp, r3
 80085b4:	45a8      	cmp	r8, r5
 80085b6:	d342      	bcc.n	800863e <__gethex+0x1fe>
 80085b8:	9801      	ldr	r0, [sp, #4]
 80085ba:	f840 bb04 	str.w	fp, [r0], #4
 80085be:	eba0 000a 	sub.w	r0, r0, sl
 80085c2:	1080      	asrs	r0, r0, #2
 80085c4:	6120      	str	r0, [r4, #16]
 80085c6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80085ca:	4658      	mov	r0, fp
 80085cc:	f7fe f9f0 	bl	80069b0 <__hi0bits>
 80085d0:	683d      	ldr	r5, [r7, #0]
 80085d2:	eba8 0000 	sub.w	r0, r8, r0
 80085d6:	42a8      	cmp	r0, r5
 80085d8:	dd59      	ble.n	800868e <__gethex+0x24e>
 80085da:	eba0 0805 	sub.w	r8, r0, r5
 80085de:	4641      	mov	r1, r8
 80085e0:	4620      	mov	r0, r4
 80085e2:	f7fe fd7f 	bl	80070e4 <__any_on>
 80085e6:	4683      	mov	fp, r0
 80085e8:	b1b8      	cbz	r0, 800861a <__gethex+0x1da>
 80085ea:	f108 33ff 	add.w	r3, r8, #4294967295
 80085ee:	1159      	asrs	r1, r3, #5
 80085f0:	f003 021f 	and.w	r2, r3, #31
 80085f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80085f8:	f04f 0b01 	mov.w	fp, #1
 80085fc:	fa0b f202 	lsl.w	r2, fp, r2
 8008600:	420a      	tst	r2, r1
 8008602:	d00a      	beq.n	800861a <__gethex+0x1da>
 8008604:	455b      	cmp	r3, fp
 8008606:	dd06      	ble.n	8008616 <__gethex+0x1d6>
 8008608:	f1a8 0102 	sub.w	r1, r8, #2
 800860c:	4620      	mov	r0, r4
 800860e:	f7fe fd69 	bl	80070e4 <__any_on>
 8008612:	2800      	cmp	r0, #0
 8008614:	d138      	bne.n	8008688 <__gethex+0x248>
 8008616:	f04f 0b02 	mov.w	fp, #2
 800861a:	4641      	mov	r1, r8
 800861c:	4620      	mov	r0, r4
 800861e:	f7ff fea7 	bl	8008370 <rshift>
 8008622:	4446      	add	r6, r8
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	42b3      	cmp	r3, r6
 8008628:	da41      	bge.n	80086ae <__gethex+0x26e>
 800862a:	4621      	mov	r1, r4
 800862c:	4648      	mov	r0, r9
 800862e:	f7fe f90d 	bl	800684c <_Bfree>
 8008632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008634:	2300      	movs	r3, #0
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800863c:	e78a      	b.n	8008554 <__gethex+0x114>
 800863e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008642:	2a2e      	cmp	r2, #46	; 0x2e
 8008644:	d014      	beq.n	8008670 <__gethex+0x230>
 8008646:	2b20      	cmp	r3, #32
 8008648:	d106      	bne.n	8008658 <__gethex+0x218>
 800864a:	9b01      	ldr	r3, [sp, #4]
 800864c:	f843 bb04 	str.w	fp, [r3], #4
 8008650:	f04f 0b00 	mov.w	fp, #0
 8008654:	9301      	str	r3, [sp, #4]
 8008656:	465b      	mov	r3, fp
 8008658:	7828      	ldrb	r0, [r5, #0]
 800865a:	9303      	str	r3, [sp, #12]
 800865c:	f7ff feda 	bl	8008414 <__hexdig_fun>
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	f000 000f 	and.w	r0, r0, #15
 8008666:	4098      	lsls	r0, r3
 8008668:	ea4b 0b00 	orr.w	fp, fp, r0
 800866c:	3304      	adds	r3, #4
 800866e:	e7a1      	b.n	80085b4 <__gethex+0x174>
 8008670:	45a8      	cmp	r8, r5
 8008672:	d8e8      	bhi.n	8008646 <__gethex+0x206>
 8008674:	2201      	movs	r2, #1
 8008676:	4628      	mov	r0, r5
 8008678:	9303      	str	r3, [sp, #12]
 800867a:	f7ff fe0b 	bl	8008294 <strncmp>
 800867e:	4926      	ldr	r1, [pc, #152]	; (8008718 <__gethex+0x2d8>)
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	2800      	cmp	r0, #0
 8008684:	d1df      	bne.n	8008646 <__gethex+0x206>
 8008686:	e795      	b.n	80085b4 <__gethex+0x174>
 8008688:	f04f 0b03 	mov.w	fp, #3
 800868c:	e7c5      	b.n	800861a <__gethex+0x1da>
 800868e:	da0b      	bge.n	80086a8 <__gethex+0x268>
 8008690:	eba5 0800 	sub.w	r8, r5, r0
 8008694:	4621      	mov	r1, r4
 8008696:	4642      	mov	r2, r8
 8008698:	4648      	mov	r0, r9
 800869a:	f7fe faf1 	bl	8006c80 <__lshift>
 800869e:	eba6 0608 	sub.w	r6, r6, r8
 80086a2:	4604      	mov	r4, r0
 80086a4:	f100 0a14 	add.w	sl, r0, #20
 80086a8:	f04f 0b00 	mov.w	fp, #0
 80086ac:	e7ba      	b.n	8008624 <__gethex+0x1e4>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	42b3      	cmp	r3, r6
 80086b2:	dd73      	ble.n	800879c <__gethex+0x35c>
 80086b4:	1b9e      	subs	r6, r3, r6
 80086b6:	42b5      	cmp	r5, r6
 80086b8:	dc34      	bgt.n	8008724 <__gethex+0x2e4>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d023      	beq.n	8008708 <__gethex+0x2c8>
 80086c0:	2b03      	cmp	r3, #3
 80086c2:	d025      	beq.n	8008710 <__gethex+0x2d0>
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d115      	bne.n	80086f4 <__gethex+0x2b4>
 80086c8:	42b5      	cmp	r5, r6
 80086ca:	d113      	bne.n	80086f4 <__gethex+0x2b4>
 80086cc:	2d01      	cmp	r5, #1
 80086ce:	d10b      	bne.n	80086e8 <__gethex+0x2a8>
 80086d0:	9a02      	ldr	r2, [sp, #8]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	2301      	movs	r3, #1
 80086d8:	6123      	str	r3, [r4, #16]
 80086da:	f8ca 3000 	str.w	r3, [sl]
 80086de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80086e4:	601c      	str	r4, [r3, #0]
 80086e6:	e735      	b.n	8008554 <__gethex+0x114>
 80086e8:	1e69      	subs	r1, r5, #1
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7fe fcfa 	bl	80070e4 <__any_on>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d1ed      	bne.n	80086d0 <__gethex+0x290>
 80086f4:	4621      	mov	r1, r4
 80086f6:	4648      	mov	r0, r9
 80086f8:	f7fe f8a8 	bl	800684c <_Bfree>
 80086fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086fe:	2300      	movs	r3, #0
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008706:	e725      	b.n	8008554 <__gethex+0x114>
 8008708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1f2      	bne.n	80086f4 <__gethex+0x2b4>
 800870e:	e7df      	b.n	80086d0 <__gethex+0x290>
 8008710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1dc      	bne.n	80086d0 <__gethex+0x290>
 8008716:	e7ed      	b.n	80086f4 <__gethex+0x2b4>
 8008718:	0800a5ac 	.word	0x0800a5ac
 800871c:	0800a441 	.word	0x0800a441
 8008720:	0800a756 	.word	0x0800a756
 8008724:	f106 38ff 	add.w	r8, r6, #4294967295
 8008728:	f1bb 0f00 	cmp.w	fp, #0
 800872c:	d133      	bne.n	8008796 <__gethex+0x356>
 800872e:	f1b8 0f00 	cmp.w	r8, #0
 8008732:	d004      	beq.n	800873e <__gethex+0x2fe>
 8008734:	4641      	mov	r1, r8
 8008736:	4620      	mov	r0, r4
 8008738:	f7fe fcd4 	bl	80070e4 <__any_on>
 800873c:	4683      	mov	fp, r0
 800873e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008742:	2301      	movs	r3, #1
 8008744:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008748:	f008 081f 	and.w	r8, r8, #31
 800874c:	fa03 f308 	lsl.w	r3, r3, r8
 8008750:	4213      	tst	r3, r2
 8008752:	4631      	mov	r1, r6
 8008754:	4620      	mov	r0, r4
 8008756:	bf18      	it	ne
 8008758:	f04b 0b02 	orrne.w	fp, fp, #2
 800875c:	1bad      	subs	r5, r5, r6
 800875e:	f7ff fe07 	bl	8008370 <rshift>
 8008762:	687e      	ldr	r6, [r7, #4]
 8008764:	f04f 0802 	mov.w	r8, #2
 8008768:	f1bb 0f00 	cmp.w	fp, #0
 800876c:	d04a      	beq.n	8008804 <__gethex+0x3c4>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d016      	beq.n	80087a2 <__gethex+0x362>
 8008774:	2b03      	cmp	r3, #3
 8008776:	d018      	beq.n	80087aa <__gethex+0x36a>
 8008778:	2b01      	cmp	r3, #1
 800877a:	d109      	bne.n	8008790 <__gethex+0x350>
 800877c:	f01b 0f02 	tst.w	fp, #2
 8008780:	d006      	beq.n	8008790 <__gethex+0x350>
 8008782:	f8da 3000 	ldr.w	r3, [sl]
 8008786:	ea4b 0b03 	orr.w	fp, fp, r3
 800878a:	f01b 0f01 	tst.w	fp, #1
 800878e:	d10f      	bne.n	80087b0 <__gethex+0x370>
 8008790:	f048 0810 	orr.w	r8, r8, #16
 8008794:	e036      	b.n	8008804 <__gethex+0x3c4>
 8008796:	f04f 0b01 	mov.w	fp, #1
 800879a:	e7d0      	b.n	800873e <__gethex+0x2fe>
 800879c:	f04f 0801 	mov.w	r8, #1
 80087a0:	e7e2      	b.n	8008768 <__gethex+0x328>
 80087a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087a4:	f1c3 0301 	rsb	r3, r3, #1
 80087a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80087aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d0ef      	beq.n	8008790 <__gethex+0x350>
 80087b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80087b4:	f104 0214 	add.w	r2, r4, #20
 80087b8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80087c2:	2300      	movs	r3, #0
 80087c4:	4694      	mov	ip, r2
 80087c6:	f852 1b04 	ldr.w	r1, [r2], #4
 80087ca:	f1b1 3fff 	cmp.w	r1, #4294967295
 80087ce:	d01e      	beq.n	800880e <__gethex+0x3ce>
 80087d0:	3101      	adds	r1, #1
 80087d2:	f8cc 1000 	str.w	r1, [ip]
 80087d6:	f1b8 0f02 	cmp.w	r8, #2
 80087da:	f104 0214 	add.w	r2, r4, #20
 80087de:	d13d      	bne.n	800885c <__gethex+0x41c>
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	42ab      	cmp	r3, r5
 80087e6:	d10b      	bne.n	8008800 <__gethex+0x3c0>
 80087e8:	1169      	asrs	r1, r5, #5
 80087ea:	2301      	movs	r3, #1
 80087ec:	f005 051f 	and.w	r5, r5, #31
 80087f0:	fa03 f505 	lsl.w	r5, r3, r5
 80087f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087f8:	421d      	tst	r5, r3
 80087fa:	bf18      	it	ne
 80087fc:	f04f 0801 	movne.w	r8, #1
 8008800:	f048 0820 	orr.w	r8, r8, #32
 8008804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008806:	601c      	str	r4, [r3, #0]
 8008808:	9b02      	ldr	r3, [sp, #8]
 800880a:	601e      	str	r6, [r3, #0]
 800880c:	e6a2      	b.n	8008554 <__gethex+0x114>
 800880e:	4290      	cmp	r0, r2
 8008810:	f842 3c04 	str.w	r3, [r2, #-4]
 8008814:	d8d6      	bhi.n	80087c4 <__gethex+0x384>
 8008816:	68a2      	ldr	r2, [r4, #8]
 8008818:	4593      	cmp	fp, r2
 800881a:	db17      	blt.n	800884c <__gethex+0x40c>
 800881c:	6861      	ldr	r1, [r4, #4]
 800881e:	4648      	mov	r0, r9
 8008820:	3101      	adds	r1, #1
 8008822:	f7fd ffd3 	bl	80067cc <_Balloc>
 8008826:	4682      	mov	sl, r0
 8008828:	b918      	cbnz	r0, 8008832 <__gethex+0x3f2>
 800882a:	4b1b      	ldr	r3, [pc, #108]	; (8008898 <__gethex+0x458>)
 800882c:	4602      	mov	r2, r0
 800882e:	2184      	movs	r1, #132	; 0x84
 8008830:	e6b3      	b.n	800859a <__gethex+0x15a>
 8008832:	6922      	ldr	r2, [r4, #16]
 8008834:	3202      	adds	r2, #2
 8008836:	f104 010c 	add.w	r1, r4, #12
 800883a:	0092      	lsls	r2, r2, #2
 800883c:	300c      	adds	r0, #12
 800883e:	f7ff fd4b 	bl	80082d8 <memcpy>
 8008842:	4621      	mov	r1, r4
 8008844:	4648      	mov	r0, r9
 8008846:	f7fe f801 	bl	800684c <_Bfree>
 800884a:	4654      	mov	r4, sl
 800884c:	6922      	ldr	r2, [r4, #16]
 800884e:	1c51      	adds	r1, r2, #1
 8008850:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008854:	6121      	str	r1, [r4, #16]
 8008856:	2101      	movs	r1, #1
 8008858:	6151      	str	r1, [r2, #20]
 800885a:	e7bc      	b.n	80087d6 <__gethex+0x396>
 800885c:	6921      	ldr	r1, [r4, #16]
 800885e:	4559      	cmp	r1, fp
 8008860:	dd0b      	ble.n	800887a <__gethex+0x43a>
 8008862:	2101      	movs	r1, #1
 8008864:	4620      	mov	r0, r4
 8008866:	f7ff fd83 	bl	8008370 <rshift>
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	3601      	adds	r6, #1
 800886e:	42b3      	cmp	r3, r6
 8008870:	f6ff aedb 	blt.w	800862a <__gethex+0x1ea>
 8008874:	f04f 0801 	mov.w	r8, #1
 8008878:	e7c2      	b.n	8008800 <__gethex+0x3c0>
 800887a:	f015 051f 	ands.w	r5, r5, #31
 800887e:	d0f9      	beq.n	8008874 <__gethex+0x434>
 8008880:	9b01      	ldr	r3, [sp, #4]
 8008882:	441a      	add	r2, r3
 8008884:	f1c5 0520 	rsb	r5, r5, #32
 8008888:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800888c:	f7fe f890 	bl	80069b0 <__hi0bits>
 8008890:	42a8      	cmp	r0, r5
 8008892:	dbe6      	blt.n	8008862 <__gethex+0x422>
 8008894:	e7ee      	b.n	8008874 <__gethex+0x434>
 8008896:	bf00      	nop
 8008898:	0800a441 	.word	0x0800a441

0800889c <L_shift>:
 800889c:	f1c2 0208 	rsb	r2, r2, #8
 80088a0:	0092      	lsls	r2, r2, #2
 80088a2:	b570      	push	{r4, r5, r6, lr}
 80088a4:	f1c2 0620 	rsb	r6, r2, #32
 80088a8:	6843      	ldr	r3, [r0, #4]
 80088aa:	6804      	ldr	r4, [r0, #0]
 80088ac:	fa03 f506 	lsl.w	r5, r3, r6
 80088b0:	432c      	orrs	r4, r5
 80088b2:	40d3      	lsrs	r3, r2
 80088b4:	6004      	str	r4, [r0, #0]
 80088b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80088ba:	4288      	cmp	r0, r1
 80088bc:	d3f4      	bcc.n	80088a8 <L_shift+0xc>
 80088be:	bd70      	pop	{r4, r5, r6, pc}

080088c0 <__match>:
 80088c0:	b530      	push	{r4, r5, lr}
 80088c2:	6803      	ldr	r3, [r0, #0]
 80088c4:	3301      	adds	r3, #1
 80088c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ca:	b914      	cbnz	r4, 80088d2 <__match+0x12>
 80088cc:	6003      	str	r3, [r0, #0]
 80088ce:	2001      	movs	r0, #1
 80088d0:	bd30      	pop	{r4, r5, pc}
 80088d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80088da:	2d19      	cmp	r5, #25
 80088dc:	bf98      	it	ls
 80088de:	3220      	addls	r2, #32
 80088e0:	42a2      	cmp	r2, r4
 80088e2:	d0f0      	beq.n	80088c6 <__match+0x6>
 80088e4:	2000      	movs	r0, #0
 80088e6:	e7f3      	b.n	80088d0 <__match+0x10>

080088e8 <__hexnan>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	680b      	ldr	r3, [r1, #0]
 80088ee:	6801      	ldr	r1, [r0, #0]
 80088f0:	115e      	asrs	r6, r3, #5
 80088f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088f6:	f013 031f 	ands.w	r3, r3, #31
 80088fa:	b087      	sub	sp, #28
 80088fc:	bf18      	it	ne
 80088fe:	3604      	addne	r6, #4
 8008900:	2500      	movs	r5, #0
 8008902:	1f37      	subs	r7, r6, #4
 8008904:	4682      	mov	sl, r0
 8008906:	4690      	mov	r8, r2
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	f846 5c04 	str.w	r5, [r6, #-4]
 800890e:	46b9      	mov	r9, r7
 8008910:	463c      	mov	r4, r7
 8008912:	9502      	str	r5, [sp, #8]
 8008914:	46ab      	mov	fp, r5
 8008916:	784a      	ldrb	r2, [r1, #1]
 8008918:	1c4b      	adds	r3, r1, #1
 800891a:	9303      	str	r3, [sp, #12]
 800891c:	b342      	cbz	r2, 8008970 <__hexnan+0x88>
 800891e:	4610      	mov	r0, r2
 8008920:	9105      	str	r1, [sp, #20]
 8008922:	9204      	str	r2, [sp, #16]
 8008924:	f7ff fd76 	bl	8008414 <__hexdig_fun>
 8008928:	2800      	cmp	r0, #0
 800892a:	d14f      	bne.n	80089cc <__hexnan+0xe4>
 800892c:	9a04      	ldr	r2, [sp, #16]
 800892e:	9905      	ldr	r1, [sp, #20]
 8008930:	2a20      	cmp	r2, #32
 8008932:	d818      	bhi.n	8008966 <__hexnan+0x7e>
 8008934:	9b02      	ldr	r3, [sp, #8]
 8008936:	459b      	cmp	fp, r3
 8008938:	dd13      	ble.n	8008962 <__hexnan+0x7a>
 800893a:	454c      	cmp	r4, r9
 800893c:	d206      	bcs.n	800894c <__hexnan+0x64>
 800893e:	2d07      	cmp	r5, #7
 8008940:	dc04      	bgt.n	800894c <__hexnan+0x64>
 8008942:	462a      	mov	r2, r5
 8008944:	4649      	mov	r1, r9
 8008946:	4620      	mov	r0, r4
 8008948:	f7ff ffa8 	bl	800889c <L_shift>
 800894c:	4544      	cmp	r4, r8
 800894e:	d950      	bls.n	80089f2 <__hexnan+0x10a>
 8008950:	2300      	movs	r3, #0
 8008952:	f1a4 0904 	sub.w	r9, r4, #4
 8008956:	f844 3c04 	str.w	r3, [r4, #-4]
 800895a:	f8cd b008 	str.w	fp, [sp, #8]
 800895e:	464c      	mov	r4, r9
 8008960:	461d      	mov	r5, r3
 8008962:	9903      	ldr	r1, [sp, #12]
 8008964:	e7d7      	b.n	8008916 <__hexnan+0x2e>
 8008966:	2a29      	cmp	r2, #41	; 0x29
 8008968:	d155      	bne.n	8008a16 <__hexnan+0x12e>
 800896a:	3102      	adds	r1, #2
 800896c:	f8ca 1000 	str.w	r1, [sl]
 8008970:	f1bb 0f00 	cmp.w	fp, #0
 8008974:	d04f      	beq.n	8008a16 <__hexnan+0x12e>
 8008976:	454c      	cmp	r4, r9
 8008978:	d206      	bcs.n	8008988 <__hexnan+0xa0>
 800897a:	2d07      	cmp	r5, #7
 800897c:	dc04      	bgt.n	8008988 <__hexnan+0xa0>
 800897e:	462a      	mov	r2, r5
 8008980:	4649      	mov	r1, r9
 8008982:	4620      	mov	r0, r4
 8008984:	f7ff ff8a 	bl	800889c <L_shift>
 8008988:	4544      	cmp	r4, r8
 800898a:	d934      	bls.n	80089f6 <__hexnan+0x10e>
 800898c:	f1a8 0204 	sub.w	r2, r8, #4
 8008990:	4623      	mov	r3, r4
 8008992:	f853 1b04 	ldr.w	r1, [r3], #4
 8008996:	f842 1f04 	str.w	r1, [r2, #4]!
 800899a:	429f      	cmp	r7, r3
 800899c:	d2f9      	bcs.n	8008992 <__hexnan+0xaa>
 800899e:	1b3b      	subs	r3, r7, r4
 80089a0:	f023 0303 	bic.w	r3, r3, #3
 80089a4:	3304      	adds	r3, #4
 80089a6:	3e03      	subs	r6, #3
 80089a8:	3401      	adds	r4, #1
 80089aa:	42a6      	cmp	r6, r4
 80089ac:	bf38      	it	cc
 80089ae:	2304      	movcc	r3, #4
 80089b0:	4443      	add	r3, r8
 80089b2:	2200      	movs	r2, #0
 80089b4:	f843 2b04 	str.w	r2, [r3], #4
 80089b8:	429f      	cmp	r7, r3
 80089ba:	d2fb      	bcs.n	80089b4 <__hexnan+0xcc>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	b91b      	cbnz	r3, 80089c8 <__hexnan+0xe0>
 80089c0:	4547      	cmp	r7, r8
 80089c2:	d126      	bne.n	8008a12 <__hexnan+0x12a>
 80089c4:	2301      	movs	r3, #1
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	2005      	movs	r0, #5
 80089ca:	e025      	b.n	8008a18 <__hexnan+0x130>
 80089cc:	3501      	adds	r5, #1
 80089ce:	2d08      	cmp	r5, #8
 80089d0:	f10b 0b01 	add.w	fp, fp, #1
 80089d4:	dd06      	ble.n	80089e4 <__hexnan+0xfc>
 80089d6:	4544      	cmp	r4, r8
 80089d8:	d9c3      	bls.n	8008962 <__hexnan+0x7a>
 80089da:	2300      	movs	r3, #0
 80089dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80089e0:	2501      	movs	r5, #1
 80089e2:	3c04      	subs	r4, #4
 80089e4:	6822      	ldr	r2, [r4, #0]
 80089e6:	f000 000f 	and.w	r0, r0, #15
 80089ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80089ee:	6020      	str	r0, [r4, #0]
 80089f0:	e7b7      	b.n	8008962 <__hexnan+0x7a>
 80089f2:	2508      	movs	r5, #8
 80089f4:	e7b5      	b.n	8008962 <__hexnan+0x7a>
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0df      	beq.n	80089bc <__hexnan+0xd4>
 80089fc:	f1c3 0320 	rsb	r3, r3, #32
 8008a00:	f04f 32ff 	mov.w	r2, #4294967295
 8008a04:	40da      	lsrs	r2, r3
 8008a06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008a10:	e7d4      	b.n	80089bc <__hexnan+0xd4>
 8008a12:	3f04      	subs	r7, #4
 8008a14:	e7d2      	b.n	80089bc <__hexnan+0xd4>
 8008a16:	2004      	movs	r0, #4
 8008a18:	b007      	add	sp, #28
 8008a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a1e <__ascii_mbtowc>:
 8008a1e:	b082      	sub	sp, #8
 8008a20:	b901      	cbnz	r1, 8008a24 <__ascii_mbtowc+0x6>
 8008a22:	a901      	add	r1, sp, #4
 8008a24:	b142      	cbz	r2, 8008a38 <__ascii_mbtowc+0x1a>
 8008a26:	b14b      	cbz	r3, 8008a3c <__ascii_mbtowc+0x1e>
 8008a28:	7813      	ldrb	r3, [r2, #0]
 8008a2a:	600b      	str	r3, [r1, #0]
 8008a2c:	7812      	ldrb	r2, [r2, #0]
 8008a2e:	1e10      	subs	r0, r2, #0
 8008a30:	bf18      	it	ne
 8008a32:	2001      	movne	r0, #1
 8008a34:	b002      	add	sp, #8
 8008a36:	4770      	bx	lr
 8008a38:	4610      	mov	r0, r2
 8008a3a:	e7fb      	b.n	8008a34 <__ascii_mbtowc+0x16>
 8008a3c:	f06f 0001 	mvn.w	r0, #1
 8008a40:	e7f8      	b.n	8008a34 <__ascii_mbtowc+0x16>

08008a42 <_realloc_r>:
 8008a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a46:	4680      	mov	r8, r0
 8008a48:	4614      	mov	r4, r2
 8008a4a:	460e      	mov	r6, r1
 8008a4c:	b921      	cbnz	r1, 8008a58 <_realloc_r+0x16>
 8008a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a52:	4611      	mov	r1, r2
 8008a54:	f7fd be2e 	b.w	80066b4 <_malloc_r>
 8008a58:	b92a      	cbnz	r2, 8008a66 <_realloc_r+0x24>
 8008a5a:	f7fd fdb7 	bl	80065cc <_free_r>
 8008a5e:	4625      	mov	r5, r4
 8008a60:	4628      	mov	r0, r5
 8008a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a66:	f000 f842 	bl	8008aee <_malloc_usable_size_r>
 8008a6a:	4284      	cmp	r4, r0
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	d802      	bhi.n	8008a76 <_realloc_r+0x34>
 8008a70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a74:	d812      	bhi.n	8008a9c <_realloc_r+0x5a>
 8008a76:	4621      	mov	r1, r4
 8008a78:	4640      	mov	r0, r8
 8008a7a:	f7fd fe1b 	bl	80066b4 <_malloc_r>
 8008a7e:	4605      	mov	r5, r0
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d0ed      	beq.n	8008a60 <_realloc_r+0x1e>
 8008a84:	42bc      	cmp	r4, r7
 8008a86:	4622      	mov	r2, r4
 8008a88:	4631      	mov	r1, r6
 8008a8a:	bf28      	it	cs
 8008a8c:	463a      	movcs	r2, r7
 8008a8e:	f7ff fc23 	bl	80082d8 <memcpy>
 8008a92:	4631      	mov	r1, r6
 8008a94:	4640      	mov	r0, r8
 8008a96:	f7fd fd99 	bl	80065cc <_free_r>
 8008a9a:	e7e1      	b.n	8008a60 <_realloc_r+0x1e>
 8008a9c:	4635      	mov	r5, r6
 8008a9e:	e7df      	b.n	8008a60 <_realloc_r+0x1e>

08008aa0 <__ascii_wctomb>:
 8008aa0:	b149      	cbz	r1, 8008ab6 <__ascii_wctomb+0x16>
 8008aa2:	2aff      	cmp	r2, #255	; 0xff
 8008aa4:	bf85      	ittet	hi
 8008aa6:	238a      	movhi	r3, #138	; 0x8a
 8008aa8:	6003      	strhi	r3, [r0, #0]
 8008aaa:	700a      	strbls	r2, [r1, #0]
 8008aac:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ab0:	bf98      	it	ls
 8008ab2:	2001      	movls	r0, #1
 8008ab4:	4770      	bx	lr
 8008ab6:	4608      	mov	r0, r1
 8008ab8:	4770      	bx	lr
	...

08008abc <fiprintf>:
 8008abc:	b40e      	push	{r1, r2, r3}
 8008abe:	b503      	push	{r0, r1, lr}
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	ab03      	add	r3, sp, #12
 8008ac4:	4805      	ldr	r0, [pc, #20]	; (8008adc <fiprintf+0x20>)
 8008ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aca:	6800      	ldr	r0, [r0, #0]
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	f000 f83f 	bl	8008b50 <_vfiprintf_r>
 8008ad2:	b002      	add	sp, #8
 8008ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ad8:	b003      	add	sp, #12
 8008ada:	4770      	bx	lr
 8008adc:	20000064 	.word	0x20000064

08008ae0 <abort>:
 8008ae0:	b508      	push	{r3, lr}
 8008ae2:	2006      	movs	r0, #6
 8008ae4:	f000 fa0c 	bl	8008f00 <raise>
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f7f9 f89b 	bl	8001c24 <_exit>

08008aee <_malloc_usable_size_r>:
 8008aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af2:	1f18      	subs	r0, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	bfbc      	itt	lt
 8008af8:	580b      	ldrlt	r3, [r1, r0]
 8008afa:	18c0      	addlt	r0, r0, r3
 8008afc:	4770      	bx	lr

08008afe <__sfputc_r>:
 8008afe:	6893      	ldr	r3, [r2, #8]
 8008b00:	3b01      	subs	r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	b410      	push	{r4}
 8008b06:	6093      	str	r3, [r2, #8]
 8008b08:	da08      	bge.n	8008b1c <__sfputc_r+0x1e>
 8008b0a:	6994      	ldr	r4, [r2, #24]
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	db01      	blt.n	8008b14 <__sfputc_r+0x16>
 8008b10:	290a      	cmp	r1, #10
 8008b12:	d103      	bne.n	8008b1c <__sfputc_r+0x1e>
 8008b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b18:	f000 b934 	b.w	8008d84 <__swbuf_r>
 8008b1c:	6813      	ldr	r3, [r2, #0]
 8008b1e:	1c58      	adds	r0, r3, #1
 8008b20:	6010      	str	r0, [r2, #0]
 8008b22:	7019      	strb	r1, [r3, #0]
 8008b24:	4608      	mov	r0, r1
 8008b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <__sfputs_r>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	4606      	mov	r6, r0
 8008b30:	460f      	mov	r7, r1
 8008b32:	4614      	mov	r4, r2
 8008b34:	18d5      	adds	r5, r2, r3
 8008b36:	42ac      	cmp	r4, r5
 8008b38:	d101      	bne.n	8008b3e <__sfputs_r+0x12>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e007      	b.n	8008b4e <__sfputs_r+0x22>
 8008b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b42:	463a      	mov	r2, r7
 8008b44:	4630      	mov	r0, r6
 8008b46:	f7ff ffda 	bl	8008afe <__sfputc_r>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	d1f3      	bne.n	8008b36 <__sfputs_r+0xa>
 8008b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b50 <_vfiprintf_r>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	460d      	mov	r5, r1
 8008b56:	b09d      	sub	sp, #116	; 0x74
 8008b58:	4614      	mov	r4, r2
 8008b5a:	4698      	mov	r8, r3
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	b118      	cbz	r0, 8008b68 <_vfiprintf_r+0x18>
 8008b60:	6a03      	ldr	r3, [r0, #32]
 8008b62:	b90b      	cbnz	r3, 8008b68 <_vfiprintf_r+0x18>
 8008b64:	f7fc fd96 	bl	8005694 <__sinit>
 8008b68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b6a:	07d9      	lsls	r1, r3, #31
 8008b6c:	d405      	bmi.n	8008b7a <_vfiprintf_r+0x2a>
 8008b6e:	89ab      	ldrh	r3, [r5, #12]
 8008b70:	059a      	lsls	r2, r3, #22
 8008b72:	d402      	bmi.n	8008b7a <_vfiprintf_r+0x2a>
 8008b74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b76:	f7fc fea4 	bl	80058c2 <__retarget_lock_acquire_recursive>
 8008b7a:	89ab      	ldrh	r3, [r5, #12]
 8008b7c:	071b      	lsls	r3, r3, #28
 8008b7e:	d501      	bpl.n	8008b84 <_vfiprintf_r+0x34>
 8008b80:	692b      	ldr	r3, [r5, #16]
 8008b82:	b99b      	cbnz	r3, 8008bac <_vfiprintf_r+0x5c>
 8008b84:	4629      	mov	r1, r5
 8008b86:	4630      	mov	r0, r6
 8008b88:	f000 f93a 	bl	8008e00 <__swsetup_r>
 8008b8c:	b170      	cbz	r0, 8008bac <_vfiprintf_r+0x5c>
 8008b8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b90:	07dc      	lsls	r4, r3, #31
 8008b92:	d504      	bpl.n	8008b9e <_vfiprintf_r+0x4e>
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295
 8008b98:	b01d      	add	sp, #116	; 0x74
 8008b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9e:	89ab      	ldrh	r3, [r5, #12]
 8008ba0:	0598      	lsls	r0, r3, #22
 8008ba2:	d4f7      	bmi.n	8008b94 <_vfiprintf_r+0x44>
 8008ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ba6:	f7fc fe8d 	bl	80058c4 <__retarget_lock_release_recursive>
 8008baa:	e7f3      	b.n	8008b94 <_vfiprintf_r+0x44>
 8008bac:	2300      	movs	r3, #0
 8008bae:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb0:	2320      	movs	r3, #32
 8008bb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bba:	2330      	movs	r3, #48	; 0x30
 8008bbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008d70 <_vfiprintf_r+0x220>
 8008bc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bc4:	f04f 0901 	mov.w	r9, #1
 8008bc8:	4623      	mov	r3, r4
 8008bca:	469a      	mov	sl, r3
 8008bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bd0:	b10a      	cbz	r2, 8008bd6 <_vfiprintf_r+0x86>
 8008bd2:	2a25      	cmp	r2, #37	; 0x25
 8008bd4:	d1f9      	bne.n	8008bca <_vfiprintf_r+0x7a>
 8008bd6:	ebba 0b04 	subs.w	fp, sl, r4
 8008bda:	d00b      	beq.n	8008bf4 <_vfiprintf_r+0xa4>
 8008bdc:	465b      	mov	r3, fp
 8008bde:	4622      	mov	r2, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	4630      	mov	r0, r6
 8008be4:	f7ff ffa2 	bl	8008b2c <__sfputs_r>
 8008be8:	3001      	adds	r0, #1
 8008bea:	f000 80a9 	beq.w	8008d40 <_vfiprintf_r+0x1f0>
 8008bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf0:	445a      	add	r2, fp
 8008bf2:	9209      	str	r2, [sp, #36]	; 0x24
 8008bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 80a1 	beq.w	8008d40 <_vfiprintf_r+0x1f0>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f04f 32ff 	mov.w	r2, #4294967295
 8008c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c08:	f10a 0a01 	add.w	sl, sl, #1
 8008c0c:	9304      	str	r3, [sp, #16]
 8008c0e:	9307      	str	r3, [sp, #28]
 8008c10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c14:	931a      	str	r3, [sp, #104]	; 0x68
 8008c16:	4654      	mov	r4, sl
 8008c18:	2205      	movs	r2, #5
 8008c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1e:	4854      	ldr	r0, [pc, #336]	; (8008d70 <_vfiprintf_r+0x220>)
 8008c20:	f7f7 faf6 	bl	8000210 <memchr>
 8008c24:	9a04      	ldr	r2, [sp, #16]
 8008c26:	b9d8      	cbnz	r0, 8008c60 <_vfiprintf_r+0x110>
 8008c28:	06d1      	lsls	r1, r2, #27
 8008c2a:	bf44      	itt	mi
 8008c2c:	2320      	movmi	r3, #32
 8008c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c32:	0713      	lsls	r3, r2, #28
 8008c34:	bf44      	itt	mi
 8008c36:	232b      	movmi	r3, #43	; 0x2b
 8008c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c40:	2b2a      	cmp	r3, #42	; 0x2a
 8008c42:	d015      	beq.n	8008c70 <_vfiprintf_r+0x120>
 8008c44:	9a07      	ldr	r2, [sp, #28]
 8008c46:	4654      	mov	r4, sl
 8008c48:	2000      	movs	r0, #0
 8008c4a:	f04f 0c0a 	mov.w	ip, #10
 8008c4e:	4621      	mov	r1, r4
 8008c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c54:	3b30      	subs	r3, #48	; 0x30
 8008c56:	2b09      	cmp	r3, #9
 8008c58:	d94d      	bls.n	8008cf6 <_vfiprintf_r+0x1a6>
 8008c5a:	b1b0      	cbz	r0, 8008c8a <_vfiprintf_r+0x13a>
 8008c5c:	9207      	str	r2, [sp, #28]
 8008c5e:	e014      	b.n	8008c8a <_vfiprintf_r+0x13a>
 8008c60:	eba0 0308 	sub.w	r3, r0, r8
 8008c64:	fa09 f303 	lsl.w	r3, r9, r3
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	9304      	str	r3, [sp, #16]
 8008c6c:	46a2      	mov	sl, r4
 8008c6e:	e7d2      	b.n	8008c16 <_vfiprintf_r+0xc6>
 8008c70:	9b03      	ldr	r3, [sp, #12]
 8008c72:	1d19      	adds	r1, r3, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	9103      	str	r1, [sp, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	bfbb      	ittet	lt
 8008c7c:	425b      	neglt	r3, r3
 8008c7e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c82:	9307      	strge	r3, [sp, #28]
 8008c84:	9307      	strlt	r3, [sp, #28]
 8008c86:	bfb8      	it	lt
 8008c88:	9204      	strlt	r2, [sp, #16]
 8008c8a:	7823      	ldrb	r3, [r4, #0]
 8008c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c8e:	d10c      	bne.n	8008caa <_vfiprintf_r+0x15a>
 8008c90:	7863      	ldrb	r3, [r4, #1]
 8008c92:	2b2a      	cmp	r3, #42	; 0x2a
 8008c94:	d134      	bne.n	8008d00 <_vfiprintf_r+0x1b0>
 8008c96:	9b03      	ldr	r3, [sp, #12]
 8008c98:	1d1a      	adds	r2, r3, #4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	9203      	str	r2, [sp, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	bfb8      	it	lt
 8008ca2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ca6:	3402      	adds	r4, #2
 8008ca8:	9305      	str	r3, [sp, #20]
 8008caa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008d80 <_vfiprintf_r+0x230>
 8008cae:	7821      	ldrb	r1, [r4, #0]
 8008cb0:	2203      	movs	r2, #3
 8008cb2:	4650      	mov	r0, sl
 8008cb4:	f7f7 faac 	bl	8000210 <memchr>
 8008cb8:	b138      	cbz	r0, 8008cca <_vfiprintf_r+0x17a>
 8008cba:	9b04      	ldr	r3, [sp, #16]
 8008cbc:	eba0 000a 	sub.w	r0, r0, sl
 8008cc0:	2240      	movs	r2, #64	; 0x40
 8008cc2:	4082      	lsls	r2, r0
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	3401      	adds	r4, #1
 8008cc8:	9304      	str	r3, [sp, #16]
 8008cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cce:	4829      	ldr	r0, [pc, #164]	; (8008d74 <_vfiprintf_r+0x224>)
 8008cd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd4:	2206      	movs	r2, #6
 8008cd6:	f7f7 fa9b 	bl	8000210 <memchr>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d03f      	beq.n	8008d5e <_vfiprintf_r+0x20e>
 8008cde:	4b26      	ldr	r3, [pc, #152]	; (8008d78 <_vfiprintf_r+0x228>)
 8008ce0:	bb1b      	cbnz	r3, 8008d2a <_vfiprintf_r+0x1da>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	3307      	adds	r3, #7
 8008ce6:	f023 0307 	bic.w	r3, r3, #7
 8008cea:	3308      	adds	r3, #8
 8008cec:	9303      	str	r3, [sp, #12]
 8008cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf0:	443b      	add	r3, r7
 8008cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf4:	e768      	b.n	8008bc8 <_vfiprintf_r+0x78>
 8008cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	2001      	movs	r0, #1
 8008cfe:	e7a6      	b.n	8008c4e <_vfiprintf_r+0xfe>
 8008d00:	2300      	movs	r3, #0
 8008d02:	3401      	adds	r4, #1
 8008d04:	9305      	str	r3, [sp, #20]
 8008d06:	4619      	mov	r1, r3
 8008d08:	f04f 0c0a 	mov.w	ip, #10
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d12:	3a30      	subs	r2, #48	; 0x30
 8008d14:	2a09      	cmp	r2, #9
 8008d16:	d903      	bls.n	8008d20 <_vfiprintf_r+0x1d0>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d0c6      	beq.n	8008caa <_vfiprintf_r+0x15a>
 8008d1c:	9105      	str	r1, [sp, #20]
 8008d1e:	e7c4      	b.n	8008caa <_vfiprintf_r+0x15a>
 8008d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d24:	4604      	mov	r4, r0
 8008d26:	2301      	movs	r3, #1
 8008d28:	e7f0      	b.n	8008d0c <_vfiprintf_r+0x1bc>
 8008d2a:	ab03      	add	r3, sp, #12
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	462a      	mov	r2, r5
 8008d30:	4b12      	ldr	r3, [pc, #72]	; (8008d7c <_vfiprintf_r+0x22c>)
 8008d32:	a904      	add	r1, sp, #16
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7fb fe4b 	bl	80049d0 <_printf_float>
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	1c78      	adds	r0, r7, #1
 8008d3e:	d1d6      	bne.n	8008cee <_vfiprintf_r+0x19e>
 8008d40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d42:	07d9      	lsls	r1, r3, #31
 8008d44:	d405      	bmi.n	8008d52 <_vfiprintf_r+0x202>
 8008d46:	89ab      	ldrh	r3, [r5, #12]
 8008d48:	059a      	lsls	r2, r3, #22
 8008d4a:	d402      	bmi.n	8008d52 <_vfiprintf_r+0x202>
 8008d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d4e:	f7fc fdb9 	bl	80058c4 <__retarget_lock_release_recursive>
 8008d52:	89ab      	ldrh	r3, [r5, #12]
 8008d54:	065b      	lsls	r3, r3, #25
 8008d56:	f53f af1d 	bmi.w	8008b94 <_vfiprintf_r+0x44>
 8008d5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d5c:	e71c      	b.n	8008b98 <_vfiprintf_r+0x48>
 8008d5e:	ab03      	add	r3, sp, #12
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	462a      	mov	r2, r5
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <_vfiprintf_r+0x22c>)
 8008d66:	a904      	add	r1, sp, #16
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f7fc f8d5 	bl	8004f18 <_printf_i>
 8008d6e:	e7e4      	b.n	8008d3a <_vfiprintf_r+0x1ea>
 8008d70:	0800a701 	.word	0x0800a701
 8008d74:	0800a70b 	.word	0x0800a70b
 8008d78:	080049d1 	.word	0x080049d1
 8008d7c:	08008b2d 	.word	0x08008b2d
 8008d80:	0800a707 	.word	0x0800a707

08008d84 <__swbuf_r>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	460e      	mov	r6, r1
 8008d88:	4614      	mov	r4, r2
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	b118      	cbz	r0, 8008d96 <__swbuf_r+0x12>
 8008d8e:	6a03      	ldr	r3, [r0, #32]
 8008d90:	b90b      	cbnz	r3, 8008d96 <__swbuf_r+0x12>
 8008d92:	f7fc fc7f 	bl	8005694 <__sinit>
 8008d96:	69a3      	ldr	r3, [r4, #24]
 8008d98:	60a3      	str	r3, [r4, #8]
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	071a      	lsls	r2, r3, #28
 8008d9e:	d525      	bpl.n	8008dec <__swbuf_r+0x68>
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	b31b      	cbz	r3, 8008dec <__swbuf_r+0x68>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	6922      	ldr	r2, [r4, #16]
 8008da8:	1a98      	subs	r0, r3, r2
 8008daa:	6963      	ldr	r3, [r4, #20]
 8008dac:	b2f6      	uxtb	r6, r6
 8008dae:	4283      	cmp	r3, r0
 8008db0:	4637      	mov	r7, r6
 8008db2:	dc04      	bgt.n	8008dbe <__swbuf_r+0x3a>
 8008db4:	4621      	mov	r1, r4
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7ff fa2a 	bl	8008210 <_fflush_r>
 8008dbc:	b9e0      	cbnz	r0, 8008df8 <__swbuf_r+0x74>
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	60a3      	str	r3, [r4, #8]
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	6022      	str	r2, [r4, #0]
 8008dca:	701e      	strb	r6, [r3, #0]
 8008dcc:	6962      	ldr	r2, [r4, #20]
 8008dce:	1c43      	adds	r3, r0, #1
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d004      	beq.n	8008dde <__swbuf_r+0x5a>
 8008dd4:	89a3      	ldrh	r3, [r4, #12]
 8008dd6:	07db      	lsls	r3, r3, #31
 8008dd8:	d506      	bpl.n	8008de8 <__swbuf_r+0x64>
 8008dda:	2e0a      	cmp	r6, #10
 8008ddc:	d104      	bne.n	8008de8 <__swbuf_r+0x64>
 8008dde:	4621      	mov	r1, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	f7ff fa15 	bl	8008210 <_fflush_r>
 8008de6:	b938      	cbnz	r0, 8008df8 <__swbuf_r+0x74>
 8008de8:	4638      	mov	r0, r7
 8008dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dec:	4621      	mov	r1, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	f000 f806 	bl	8008e00 <__swsetup_r>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d0d5      	beq.n	8008da4 <__swbuf_r+0x20>
 8008df8:	f04f 37ff 	mov.w	r7, #4294967295
 8008dfc:	e7f4      	b.n	8008de8 <__swbuf_r+0x64>
	...

08008e00 <__swsetup_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4b2a      	ldr	r3, [pc, #168]	; (8008eac <__swsetup_r+0xac>)
 8008e04:	4605      	mov	r5, r0
 8008e06:	6818      	ldr	r0, [r3, #0]
 8008e08:	460c      	mov	r4, r1
 8008e0a:	b118      	cbz	r0, 8008e14 <__swsetup_r+0x14>
 8008e0c:	6a03      	ldr	r3, [r0, #32]
 8008e0e:	b90b      	cbnz	r3, 8008e14 <__swsetup_r+0x14>
 8008e10:	f7fc fc40 	bl	8005694 <__sinit>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e1a:	0718      	lsls	r0, r3, #28
 8008e1c:	d422      	bmi.n	8008e64 <__swsetup_r+0x64>
 8008e1e:	06d9      	lsls	r1, r3, #27
 8008e20:	d407      	bmi.n	8008e32 <__swsetup_r+0x32>
 8008e22:	2309      	movs	r3, #9
 8008e24:	602b      	str	r3, [r5, #0]
 8008e26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e2a:	81a3      	strh	r3, [r4, #12]
 8008e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e30:	e034      	b.n	8008e9c <__swsetup_r+0x9c>
 8008e32:	0758      	lsls	r0, r3, #29
 8008e34:	d512      	bpl.n	8008e5c <__swsetup_r+0x5c>
 8008e36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e38:	b141      	cbz	r1, 8008e4c <__swsetup_r+0x4c>
 8008e3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e3e:	4299      	cmp	r1, r3
 8008e40:	d002      	beq.n	8008e48 <__swsetup_r+0x48>
 8008e42:	4628      	mov	r0, r5
 8008e44:	f7fd fbc2 	bl	80065cc <_free_r>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	6363      	str	r3, [r4, #52]	; 0x34
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	2300      	movs	r3, #0
 8008e56:	6063      	str	r3, [r4, #4]
 8008e58:	6923      	ldr	r3, [r4, #16]
 8008e5a:	6023      	str	r3, [r4, #0]
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	f043 0308 	orr.w	r3, r3, #8
 8008e62:	81a3      	strh	r3, [r4, #12]
 8008e64:	6923      	ldr	r3, [r4, #16]
 8008e66:	b94b      	cbnz	r3, 8008e7c <__swsetup_r+0x7c>
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e72:	d003      	beq.n	8008e7c <__swsetup_r+0x7c>
 8008e74:	4621      	mov	r1, r4
 8008e76:	4628      	mov	r0, r5
 8008e78:	f000 f884 	bl	8008f84 <__smakebuf_r>
 8008e7c:	89a0      	ldrh	r0, [r4, #12]
 8008e7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e82:	f010 0301 	ands.w	r3, r0, #1
 8008e86:	d00a      	beq.n	8008e9e <__swsetup_r+0x9e>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	60a3      	str	r3, [r4, #8]
 8008e8c:	6963      	ldr	r3, [r4, #20]
 8008e8e:	425b      	negs	r3, r3
 8008e90:	61a3      	str	r3, [r4, #24]
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	b943      	cbnz	r3, 8008ea8 <__swsetup_r+0xa8>
 8008e96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e9a:	d1c4      	bne.n	8008e26 <__swsetup_r+0x26>
 8008e9c:	bd38      	pop	{r3, r4, r5, pc}
 8008e9e:	0781      	lsls	r1, r0, #30
 8008ea0:	bf58      	it	pl
 8008ea2:	6963      	ldrpl	r3, [r4, #20]
 8008ea4:	60a3      	str	r3, [r4, #8]
 8008ea6:	e7f4      	b.n	8008e92 <__swsetup_r+0x92>
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	e7f7      	b.n	8008e9c <__swsetup_r+0x9c>
 8008eac:	20000064 	.word	0x20000064

08008eb0 <_raise_r>:
 8008eb0:	291f      	cmp	r1, #31
 8008eb2:	b538      	push	{r3, r4, r5, lr}
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	460d      	mov	r5, r1
 8008eb8:	d904      	bls.n	8008ec4 <_raise_r+0x14>
 8008eba:	2316      	movs	r3, #22
 8008ebc:	6003      	str	r3, [r0, #0]
 8008ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ec6:	b112      	cbz	r2, 8008ece <_raise_r+0x1e>
 8008ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ecc:	b94b      	cbnz	r3, 8008ee2 <_raise_r+0x32>
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f000 f830 	bl	8008f34 <_getpid_r>
 8008ed4:	462a      	mov	r2, r5
 8008ed6:	4601      	mov	r1, r0
 8008ed8:	4620      	mov	r0, r4
 8008eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ede:	f000 b817 	b.w	8008f10 <_kill_r>
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d00a      	beq.n	8008efc <_raise_r+0x4c>
 8008ee6:	1c59      	adds	r1, r3, #1
 8008ee8:	d103      	bne.n	8008ef2 <_raise_r+0x42>
 8008eea:	2316      	movs	r3, #22
 8008eec:	6003      	str	r3, [r0, #0]
 8008eee:	2001      	movs	r0, #1
 8008ef0:	e7e7      	b.n	8008ec2 <_raise_r+0x12>
 8008ef2:	2400      	movs	r4, #0
 8008ef4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ef8:	4628      	mov	r0, r5
 8008efa:	4798      	blx	r3
 8008efc:	2000      	movs	r0, #0
 8008efe:	e7e0      	b.n	8008ec2 <_raise_r+0x12>

08008f00 <raise>:
 8008f00:	4b02      	ldr	r3, [pc, #8]	; (8008f0c <raise+0xc>)
 8008f02:	4601      	mov	r1, r0
 8008f04:	6818      	ldr	r0, [r3, #0]
 8008f06:	f7ff bfd3 	b.w	8008eb0 <_raise_r>
 8008f0a:	bf00      	nop
 8008f0c:	20000064 	.word	0x20000064

08008f10 <_kill_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4d07      	ldr	r5, [pc, #28]	; (8008f30 <_kill_r+0x20>)
 8008f14:	2300      	movs	r3, #0
 8008f16:	4604      	mov	r4, r0
 8008f18:	4608      	mov	r0, r1
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	602b      	str	r3, [r5, #0]
 8008f1e:	f7f8 fe71 	bl	8001c04 <_kill>
 8008f22:	1c43      	adds	r3, r0, #1
 8008f24:	d102      	bne.n	8008f2c <_kill_r+0x1c>
 8008f26:	682b      	ldr	r3, [r5, #0]
 8008f28:	b103      	cbz	r3, 8008f2c <_kill_r+0x1c>
 8008f2a:	6023      	str	r3, [r4, #0]
 8008f2c:	bd38      	pop	{r3, r4, r5, pc}
 8008f2e:	bf00      	nop
 8008f30:	2000144c 	.word	0x2000144c

08008f34 <_getpid_r>:
 8008f34:	f7f8 be5e 	b.w	8001bf4 <_getpid>

08008f38 <__swhatbuf_r>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f40:	2900      	cmp	r1, #0
 8008f42:	b096      	sub	sp, #88	; 0x58
 8008f44:	4615      	mov	r5, r2
 8008f46:	461e      	mov	r6, r3
 8008f48:	da0d      	bge.n	8008f66 <__swhatbuf_r+0x2e>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008f50:	f04f 0100 	mov.w	r1, #0
 8008f54:	bf0c      	ite	eq
 8008f56:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008f5a:	2340      	movne	r3, #64	; 0x40
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	6031      	str	r1, [r6, #0]
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	b016      	add	sp, #88	; 0x58
 8008f64:	bd70      	pop	{r4, r5, r6, pc}
 8008f66:	466a      	mov	r2, sp
 8008f68:	f000 f848 	bl	8008ffc <_fstat_r>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	dbec      	blt.n	8008f4a <__swhatbuf_r+0x12>
 8008f70:	9901      	ldr	r1, [sp, #4]
 8008f72:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f76:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f7a:	4259      	negs	r1, r3
 8008f7c:	4159      	adcs	r1, r3
 8008f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f82:	e7eb      	b.n	8008f5c <__swhatbuf_r+0x24>

08008f84 <__smakebuf_r>:
 8008f84:	898b      	ldrh	r3, [r1, #12]
 8008f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f88:	079d      	lsls	r5, r3, #30
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	d507      	bpl.n	8008fa0 <__smakebuf_r+0x1c>
 8008f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	6123      	str	r3, [r4, #16]
 8008f98:	2301      	movs	r3, #1
 8008f9a:	6163      	str	r3, [r4, #20]
 8008f9c:	b002      	add	sp, #8
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	ab01      	add	r3, sp, #4
 8008fa2:	466a      	mov	r2, sp
 8008fa4:	f7ff ffc8 	bl	8008f38 <__swhatbuf_r>
 8008fa8:	9900      	ldr	r1, [sp, #0]
 8008faa:	4605      	mov	r5, r0
 8008fac:	4630      	mov	r0, r6
 8008fae:	f7fd fb81 	bl	80066b4 <_malloc_r>
 8008fb2:	b948      	cbnz	r0, 8008fc8 <__smakebuf_r+0x44>
 8008fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb8:	059a      	lsls	r2, r3, #22
 8008fba:	d4ef      	bmi.n	8008f9c <__smakebuf_r+0x18>
 8008fbc:	f023 0303 	bic.w	r3, r3, #3
 8008fc0:	f043 0302 	orr.w	r3, r3, #2
 8008fc4:	81a3      	strh	r3, [r4, #12]
 8008fc6:	e7e3      	b.n	8008f90 <__smakebuf_r+0xc>
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	6020      	str	r0, [r4, #0]
 8008fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	9b00      	ldr	r3, [sp, #0]
 8008fd4:	6163      	str	r3, [r4, #20]
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	6120      	str	r0, [r4, #16]
 8008fda:	b15b      	cbz	r3, 8008ff4 <__smakebuf_r+0x70>
 8008fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 f81d 	bl	8009020 <_isatty_r>
 8008fe6:	b128      	cbz	r0, 8008ff4 <__smakebuf_r+0x70>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f023 0303 	bic.w	r3, r3, #3
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	431d      	orrs	r5, r3
 8008ff8:	81a5      	strh	r5, [r4, #12]
 8008ffa:	e7cf      	b.n	8008f9c <__smakebuf_r+0x18>

08008ffc <_fstat_r>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	4d07      	ldr	r5, [pc, #28]	; (800901c <_fstat_r+0x20>)
 8009000:	2300      	movs	r3, #0
 8009002:	4604      	mov	r4, r0
 8009004:	4608      	mov	r0, r1
 8009006:	4611      	mov	r1, r2
 8009008:	602b      	str	r3, [r5, #0]
 800900a:	f7f8 fe5a 	bl	8001cc2 <_fstat>
 800900e:	1c43      	adds	r3, r0, #1
 8009010:	d102      	bne.n	8009018 <_fstat_r+0x1c>
 8009012:	682b      	ldr	r3, [r5, #0]
 8009014:	b103      	cbz	r3, 8009018 <_fstat_r+0x1c>
 8009016:	6023      	str	r3, [r4, #0]
 8009018:	bd38      	pop	{r3, r4, r5, pc}
 800901a:	bf00      	nop
 800901c:	2000144c 	.word	0x2000144c

08009020 <_isatty_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d06      	ldr	r5, [pc, #24]	; (800903c <_isatty_r+0x1c>)
 8009024:	2300      	movs	r3, #0
 8009026:	4604      	mov	r4, r0
 8009028:	4608      	mov	r0, r1
 800902a:	602b      	str	r3, [r5, #0]
 800902c:	f7f8 fe59 	bl	8001ce2 <_isatty>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_isatty_r+0x1a>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_isatty_r+0x1a>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	2000144c 	.word	0x2000144c

08009040 <log>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	ed2d 8b02 	vpush	{d8}
 8009046:	ec55 4b10 	vmov	r4, r5, d0
 800904a:	f000 f8b5 	bl	80091b8 <__ieee754_log>
 800904e:	4622      	mov	r2, r4
 8009050:	462b      	mov	r3, r5
 8009052:	4620      	mov	r0, r4
 8009054:	4629      	mov	r1, r5
 8009056:	eeb0 8a40 	vmov.f32	s16, s0
 800905a:	eef0 8a60 	vmov.f32	s17, s1
 800905e:	f7f7 fd85 	bl	8000b6c <__aeabi_dcmpun>
 8009062:	b998      	cbnz	r0, 800908c <log+0x4c>
 8009064:	2200      	movs	r2, #0
 8009066:	2300      	movs	r3, #0
 8009068:	4620      	mov	r0, r4
 800906a:	4629      	mov	r1, r5
 800906c:	f7f7 fd74 	bl	8000b58 <__aeabi_dcmpgt>
 8009070:	b960      	cbnz	r0, 800908c <log+0x4c>
 8009072:	2200      	movs	r2, #0
 8009074:	2300      	movs	r3, #0
 8009076:	4620      	mov	r0, r4
 8009078:	4629      	mov	r1, r5
 800907a:	f7f7 fd45 	bl	8000b08 <__aeabi_dcmpeq>
 800907e:	b160      	cbz	r0, 800909a <log+0x5a>
 8009080:	f7fc fbf4 	bl	800586c <__errno>
 8009084:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80090b0 <log+0x70>
 8009088:	2322      	movs	r3, #34	; 0x22
 800908a:	6003      	str	r3, [r0, #0]
 800908c:	eeb0 0a48 	vmov.f32	s0, s16
 8009090:	eef0 0a68 	vmov.f32	s1, s17
 8009094:	ecbd 8b02 	vpop	{d8}
 8009098:	bd38      	pop	{r3, r4, r5, pc}
 800909a:	f7fc fbe7 	bl	800586c <__errno>
 800909e:	ecbd 8b02 	vpop	{d8}
 80090a2:	2321      	movs	r3, #33	; 0x21
 80090a4:	6003      	str	r3, [r0, #0]
 80090a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090aa:	4803      	ldr	r0, [pc, #12]	; (80090b8 <log+0x78>)
 80090ac:	f7ff b924 	b.w	80082f8 <nan>
 80090b0:	00000000 	.word	0x00000000
 80090b4:	fff00000 	.word	0xfff00000
 80090b8:	0800a755 	.word	0x0800a755

080090bc <pow>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	ed2d 8b02 	vpush	{d8}
 80090c2:	eeb0 8a40 	vmov.f32	s16, s0
 80090c6:	eef0 8a60 	vmov.f32	s17, s1
 80090ca:	ec55 4b11 	vmov	r4, r5, d1
 80090ce:	f000 fa2f 	bl	8009530 <__ieee754_pow>
 80090d2:	4622      	mov	r2, r4
 80090d4:	462b      	mov	r3, r5
 80090d6:	4620      	mov	r0, r4
 80090d8:	4629      	mov	r1, r5
 80090da:	ec57 6b10 	vmov	r6, r7, d0
 80090de:	f7f7 fd45 	bl	8000b6c <__aeabi_dcmpun>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d13b      	bne.n	800915e <pow+0xa2>
 80090e6:	ec51 0b18 	vmov	r0, r1, d8
 80090ea:	2200      	movs	r2, #0
 80090ec:	2300      	movs	r3, #0
 80090ee:	f7f7 fd0b 	bl	8000b08 <__aeabi_dcmpeq>
 80090f2:	b1b8      	cbz	r0, 8009124 <pow+0x68>
 80090f4:	2200      	movs	r2, #0
 80090f6:	2300      	movs	r3, #0
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 fd04 	bl	8000b08 <__aeabi_dcmpeq>
 8009100:	2800      	cmp	r0, #0
 8009102:	d146      	bne.n	8009192 <pow+0xd6>
 8009104:	ec45 4b10 	vmov	d0, r4, r5
 8009108:	f000 f848 	bl	800919c <finite>
 800910c:	b338      	cbz	r0, 800915e <pow+0xa2>
 800910e:	2200      	movs	r2, #0
 8009110:	2300      	movs	r3, #0
 8009112:	4620      	mov	r0, r4
 8009114:	4629      	mov	r1, r5
 8009116:	f7f7 fd01 	bl	8000b1c <__aeabi_dcmplt>
 800911a:	b300      	cbz	r0, 800915e <pow+0xa2>
 800911c:	f7fc fba6 	bl	800586c <__errno>
 8009120:	2322      	movs	r3, #34	; 0x22
 8009122:	e01b      	b.n	800915c <pow+0xa0>
 8009124:	ec47 6b10 	vmov	d0, r6, r7
 8009128:	f000 f838 	bl	800919c <finite>
 800912c:	b9e0      	cbnz	r0, 8009168 <pow+0xac>
 800912e:	eeb0 0a48 	vmov.f32	s0, s16
 8009132:	eef0 0a68 	vmov.f32	s1, s17
 8009136:	f000 f831 	bl	800919c <finite>
 800913a:	b1a8      	cbz	r0, 8009168 <pow+0xac>
 800913c:	ec45 4b10 	vmov	d0, r4, r5
 8009140:	f000 f82c 	bl	800919c <finite>
 8009144:	b180      	cbz	r0, 8009168 <pow+0xac>
 8009146:	4632      	mov	r2, r6
 8009148:	463b      	mov	r3, r7
 800914a:	4630      	mov	r0, r6
 800914c:	4639      	mov	r1, r7
 800914e:	f7f7 fd0d 	bl	8000b6c <__aeabi_dcmpun>
 8009152:	2800      	cmp	r0, #0
 8009154:	d0e2      	beq.n	800911c <pow+0x60>
 8009156:	f7fc fb89 	bl	800586c <__errno>
 800915a:	2321      	movs	r3, #33	; 0x21
 800915c:	6003      	str	r3, [r0, #0]
 800915e:	ecbd 8b02 	vpop	{d8}
 8009162:	ec47 6b10 	vmov	d0, r6, r7
 8009166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009168:	2200      	movs	r2, #0
 800916a:	2300      	movs	r3, #0
 800916c:	4630      	mov	r0, r6
 800916e:	4639      	mov	r1, r7
 8009170:	f7f7 fcca 	bl	8000b08 <__aeabi_dcmpeq>
 8009174:	2800      	cmp	r0, #0
 8009176:	d0f2      	beq.n	800915e <pow+0xa2>
 8009178:	eeb0 0a48 	vmov.f32	s0, s16
 800917c:	eef0 0a68 	vmov.f32	s1, s17
 8009180:	f000 f80c 	bl	800919c <finite>
 8009184:	2800      	cmp	r0, #0
 8009186:	d0ea      	beq.n	800915e <pow+0xa2>
 8009188:	ec45 4b10 	vmov	d0, r4, r5
 800918c:	f000 f806 	bl	800919c <finite>
 8009190:	e7c3      	b.n	800911a <pow+0x5e>
 8009192:	4f01      	ldr	r7, [pc, #4]	; (8009198 <pow+0xdc>)
 8009194:	2600      	movs	r6, #0
 8009196:	e7e2      	b.n	800915e <pow+0xa2>
 8009198:	3ff00000 	.word	0x3ff00000

0800919c <finite>:
 800919c:	b082      	sub	sp, #8
 800919e:	ed8d 0b00 	vstr	d0, [sp]
 80091a2:	9801      	ldr	r0, [sp, #4]
 80091a4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80091a8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80091ac:	0fc0      	lsrs	r0, r0, #31
 80091ae:	b002      	add	sp, #8
 80091b0:	4770      	bx	lr
 80091b2:	0000      	movs	r0, r0
 80091b4:	0000      	movs	r0, r0
	...

080091b8 <__ieee754_log>:
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	ec51 0b10 	vmov	r0, r1, d0
 80091c0:	ed2d 8b04 	vpush	{d8-d9}
 80091c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80091c8:	b083      	sub	sp, #12
 80091ca:	460d      	mov	r5, r1
 80091cc:	da29      	bge.n	8009222 <__ieee754_log+0x6a>
 80091ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091d2:	4303      	orrs	r3, r0
 80091d4:	ee10 2a10 	vmov	r2, s0
 80091d8:	d10c      	bne.n	80091f4 <__ieee754_log+0x3c>
 80091da:	49cf      	ldr	r1, [pc, #828]	; (8009518 <__ieee754_log+0x360>)
 80091dc:	2200      	movs	r2, #0
 80091de:	2300      	movs	r3, #0
 80091e0:	2000      	movs	r0, #0
 80091e2:	f7f7 fb53 	bl	800088c <__aeabi_ddiv>
 80091e6:	ec41 0b10 	vmov	d0, r0, r1
 80091ea:	b003      	add	sp, #12
 80091ec:	ecbd 8b04 	vpop	{d8-d9}
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	2900      	cmp	r1, #0
 80091f6:	da05      	bge.n	8009204 <__ieee754_log+0x4c>
 80091f8:	460b      	mov	r3, r1
 80091fa:	f7f7 f865 	bl	80002c8 <__aeabi_dsub>
 80091fe:	2200      	movs	r2, #0
 8009200:	2300      	movs	r3, #0
 8009202:	e7ee      	b.n	80091e2 <__ieee754_log+0x2a>
 8009204:	4bc5      	ldr	r3, [pc, #788]	; (800951c <__ieee754_log+0x364>)
 8009206:	2200      	movs	r2, #0
 8009208:	f7f7 fa16 	bl	8000638 <__aeabi_dmul>
 800920c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009210:	460d      	mov	r5, r1
 8009212:	4ac3      	ldr	r2, [pc, #780]	; (8009520 <__ieee754_log+0x368>)
 8009214:	4295      	cmp	r5, r2
 8009216:	dd06      	ble.n	8009226 <__ieee754_log+0x6e>
 8009218:	4602      	mov	r2, r0
 800921a:	460b      	mov	r3, r1
 800921c:	f7f7 f856 	bl	80002cc <__adddf3>
 8009220:	e7e1      	b.n	80091e6 <__ieee754_log+0x2e>
 8009222:	2300      	movs	r3, #0
 8009224:	e7f5      	b.n	8009212 <__ieee754_log+0x5a>
 8009226:	152c      	asrs	r4, r5, #20
 8009228:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800922c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009230:	441c      	add	r4, r3
 8009232:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8009236:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800923a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800923e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8009242:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8009246:	ea42 0105 	orr.w	r1, r2, r5
 800924a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800924e:	2200      	movs	r2, #0
 8009250:	4bb4      	ldr	r3, [pc, #720]	; (8009524 <__ieee754_log+0x36c>)
 8009252:	f7f7 f839 	bl	80002c8 <__aeabi_dsub>
 8009256:	1cab      	adds	r3, r5, #2
 8009258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800925c:	2b02      	cmp	r3, #2
 800925e:	4682      	mov	sl, r0
 8009260:	468b      	mov	fp, r1
 8009262:	f04f 0200 	mov.w	r2, #0
 8009266:	dc53      	bgt.n	8009310 <__ieee754_log+0x158>
 8009268:	2300      	movs	r3, #0
 800926a:	f7f7 fc4d 	bl	8000b08 <__aeabi_dcmpeq>
 800926e:	b1d0      	cbz	r0, 80092a6 <__ieee754_log+0xee>
 8009270:	2c00      	cmp	r4, #0
 8009272:	f000 8122 	beq.w	80094ba <__ieee754_log+0x302>
 8009276:	4620      	mov	r0, r4
 8009278:	f7f7 f974 	bl	8000564 <__aeabi_i2d>
 800927c:	a390      	add	r3, pc, #576	; (adr r3, 80094c0 <__ieee754_log+0x308>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	4606      	mov	r6, r0
 8009284:	460f      	mov	r7, r1
 8009286:	f7f7 f9d7 	bl	8000638 <__aeabi_dmul>
 800928a:	a38f      	add	r3, pc, #572	; (adr r3, 80094c8 <__ieee754_log+0x310>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	4604      	mov	r4, r0
 8009292:	460d      	mov	r5, r1
 8009294:	4630      	mov	r0, r6
 8009296:	4639      	mov	r1, r7
 8009298:	f7f7 f9ce 	bl	8000638 <__aeabi_dmul>
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4620      	mov	r0, r4
 80092a2:	4629      	mov	r1, r5
 80092a4:	e7ba      	b.n	800921c <__ieee754_log+0x64>
 80092a6:	a38a      	add	r3, pc, #552	; (adr r3, 80094d0 <__ieee754_log+0x318>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	4650      	mov	r0, sl
 80092ae:	4659      	mov	r1, fp
 80092b0:	f7f7 f9c2 	bl	8000638 <__aeabi_dmul>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	2000      	movs	r0, #0
 80092ba:	499b      	ldr	r1, [pc, #620]	; (8009528 <__ieee754_log+0x370>)
 80092bc:	f7f7 f804 	bl	80002c8 <__aeabi_dsub>
 80092c0:	4652      	mov	r2, sl
 80092c2:	4606      	mov	r6, r0
 80092c4:	460f      	mov	r7, r1
 80092c6:	465b      	mov	r3, fp
 80092c8:	4650      	mov	r0, sl
 80092ca:	4659      	mov	r1, fp
 80092cc:	f7f7 f9b4 	bl	8000638 <__aeabi_dmul>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4630      	mov	r0, r6
 80092d6:	4639      	mov	r1, r7
 80092d8:	f7f7 f9ae 	bl	8000638 <__aeabi_dmul>
 80092dc:	4606      	mov	r6, r0
 80092de:	460f      	mov	r7, r1
 80092e0:	b914      	cbnz	r4, 80092e8 <__ieee754_log+0x130>
 80092e2:	4632      	mov	r2, r6
 80092e4:	463b      	mov	r3, r7
 80092e6:	e0a2      	b.n	800942e <__ieee754_log+0x276>
 80092e8:	4620      	mov	r0, r4
 80092ea:	f7f7 f93b 	bl	8000564 <__aeabi_i2d>
 80092ee:	a374      	add	r3, pc, #464	; (adr r3, 80094c0 <__ieee754_log+0x308>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	f7f7 f99e 	bl	8000638 <__aeabi_dmul>
 80092fc:	a372      	add	r3, pc, #456	; (adr r3, 80094c8 <__ieee754_log+0x310>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	4604      	mov	r4, r0
 8009304:	460d      	mov	r5, r1
 8009306:	4640      	mov	r0, r8
 8009308:	4649      	mov	r1, r9
 800930a:	f7f7 f995 	bl	8000638 <__aeabi_dmul>
 800930e:	e0a7      	b.n	8009460 <__ieee754_log+0x2a8>
 8009310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009314:	f7f6 ffda 	bl	80002cc <__adddf3>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4650      	mov	r0, sl
 800931e:	4659      	mov	r1, fp
 8009320:	f7f7 fab4 	bl	800088c <__aeabi_ddiv>
 8009324:	ec41 0b18 	vmov	d8, r0, r1
 8009328:	4620      	mov	r0, r4
 800932a:	f7f7 f91b 	bl	8000564 <__aeabi_i2d>
 800932e:	ec53 2b18 	vmov	r2, r3, d8
 8009332:	ec41 0b19 	vmov	d9, r0, r1
 8009336:	ec51 0b18 	vmov	r0, r1, d8
 800933a:	f7f7 f97d 	bl	8000638 <__aeabi_dmul>
 800933e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8009342:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8009346:	9301      	str	r3, [sp, #4]
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	4680      	mov	r8, r0
 800934e:	4689      	mov	r9, r1
 8009350:	f7f7 f972 	bl	8000638 <__aeabi_dmul>
 8009354:	a360      	add	r3, pc, #384	; (adr r3, 80094d8 <__ieee754_log+0x320>)
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	4606      	mov	r6, r0
 800935c:	460f      	mov	r7, r1
 800935e:	f7f7 f96b 	bl	8000638 <__aeabi_dmul>
 8009362:	a35f      	add	r3, pc, #380	; (adr r3, 80094e0 <__ieee754_log+0x328>)
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	f7f6 ffb0 	bl	80002cc <__adddf3>
 800936c:	4632      	mov	r2, r6
 800936e:	463b      	mov	r3, r7
 8009370:	f7f7 f962 	bl	8000638 <__aeabi_dmul>
 8009374:	a35c      	add	r3, pc, #368	; (adr r3, 80094e8 <__ieee754_log+0x330>)
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	f7f6 ffa7 	bl	80002cc <__adddf3>
 800937e:	4632      	mov	r2, r6
 8009380:	463b      	mov	r3, r7
 8009382:	f7f7 f959 	bl	8000638 <__aeabi_dmul>
 8009386:	a35a      	add	r3, pc, #360	; (adr r3, 80094f0 <__ieee754_log+0x338>)
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f7f6 ff9e 	bl	80002cc <__adddf3>
 8009390:	4642      	mov	r2, r8
 8009392:	464b      	mov	r3, r9
 8009394:	f7f7 f950 	bl	8000638 <__aeabi_dmul>
 8009398:	a357      	add	r3, pc, #348	; (adr r3, 80094f8 <__ieee754_log+0x340>)
 800939a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939e:	4680      	mov	r8, r0
 80093a0:	4689      	mov	r9, r1
 80093a2:	4630      	mov	r0, r6
 80093a4:	4639      	mov	r1, r7
 80093a6:	f7f7 f947 	bl	8000638 <__aeabi_dmul>
 80093aa:	a355      	add	r3, pc, #340	; (adr r3, 8009500 <__ieee754_log+0x348>)
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f7f6 ff8c 	bl	80002cc <__adddf3>
 80093b4:	4632      	mov	r2, r6
 80093b6:	463b      	mov	r3, r7
 80093b8:	f7f7 f93e 	bl	8000638 <__aeabi_dmul>
 80093bc:	a352      	add	r3, pc, #328	; (adr r3, 8009508 <__ieee754_log+0x350>)
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f7f6 ff83 	bl	80002cc <__adddf3>
 80093c6:	4632      	mov	r2, r6
 80093c8:	463b      	mov	r3, r7
 80093ca:	f7f7 f935 	bl	8000638 <__aeabi_dmul>
 80093ce:	460b      	mov	r3, r1
 80093d0:	4602      	mov	r2, r0
 80093d2:	4649      	mov	r1, r9
 80093d4:	4640      	mov	r0, r8
 80093d6:	f7f6 ff79 	bl	80002cc <__adddf3>
 80093da:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80093de:	9b01      	ldr	r3, [sp, #4]
 80093e0:	3551      	adds	r5, #81	; 0x51
 80093e2:	431d      	orrs	r5, r3
 80093e4:	2d00      	cmp	r5, #0
 80093e6:	4680      	mov	r8, r0
 80093e8:	4689      	mov	r9, r1
 80093ea:	dd48      	ble.n	800947e <__ieee754_log+0x2c6>
 80093ec:	4b4e      	ldr	r3, [pc, #312]	; (8009528 <__ieee754_log+0x370>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	4650      	mov	r0, sl
 80093f2:	4659      	mov	r1, fp
 80093f4:	f7f7 f920 	bl	8000638 <__aeabi_dmul>
 80093f8:	4652      	mov	r2, sl
 80093fa:	465b      	mov	r3, fp
 80093fc:	f7f7 f91c 	bl	8000638 <__aeabi_dmul>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4606      	mov	r6, r0
 8009406:	460f      	mov	r7, r1
 8009408:	4640      	mov	r0, r8
 800940a:	4649      	mov	r1, r9
 800940c:	f7f6 ff5e 	bl	80002cc <__adddf3>
 8009410:	ec53 2b18 	vmov	r2, r3, d8
 8009414:	f7f7 f910 	bl	8000638 <__aeabi_dmul>
 8009418:	4680      	mov	r8, r0
 800941a:	4689      	mov	r9, r1
 800941c:	b964      	cbnz	r4, 8009438 <__ieee754_log+0x280>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4630      	mov	r0, r6
 8009424:	4639      	mov	r1, r7
 8009426:	f7f6 ff4f 	bl	80002c8 <__aeabi_dsub>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	4650      	mov	r0, sl
 8009430:	4659      	mov	r1, fp
 8009432:	f7f6 ff49 	bl	80002c8 <__aeabi_dsub>
 8009436:	e6d6      	b.n	80091e6 <__ieee754_log+0x2e>
 8009438:	a321      	add	r3, pc, #132	; (adr r3, 80094c0 <__ieee754_log+0x308>)
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	ec51 0b19 	vmov	r0, r1, d9
 8009442:	f7f7 f8f9 	bl	8000638 <__aeabi_dmul>
 8009446:	a320      	add	r3, pc, #128	; (adr r3, 80094c8 <__ieee754_log+0x310>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	4604      	mov	r4, r0
 800944e:	460d      	mov	r5, r1
 8009450:	ec51 0b19 	vmov	r0, r1, d9
 8009454:	f7f7 f8f0 	bl	8000638 <__aeabi_dmul>
 8009458:	4642      	mov	r2, r8
 800945a:	464b      	mov	r3, r9
 800945c:	f7f6 ff36 	bl	80002cc <__adddf3>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	4630      	mov	r0, r6
 8009466:	4639      	mov	r1, r7
 8009468:	f7f6 ff2e 	bl	80002c8 <__aeabi_dsub>
 800946c:	4652      	mov	r2, sl
 800946e:	465b      	mov	r3, fp
 8009470:	f7f6 ff2a 	bl	80002c8 <__aeabi_dsub>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4620      	mov	r0, r4
 800947a:	4629      	mov	r1, r5
 800947c:	e7d9      	b.n	8009432 <__ieee754_log+0x27a>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	4650      	mov	r0, sl
 8009484:	4659      	mov	r1, fp
 8009486:	f7f6 ff1f 	bl	80002c8 <__aeabi_dsub>
 800948a:	ec53 2b18 	vmov	r2, r3, d8
 800948e:	f7f7 f8d3 	bl	8000638 <__aeabi_dmul>
 8009492:	4606      	mov	r6, r0
 8009494:	460f      	mov	r7, r1
 8009496:	2c00      	cmp	r4, #0
 8009498:	f43f af23 	beq.w	80092e2 <__ieee754_log+0x12a>
 800949c:	a308      	add	r3, pc, #32	; (adr r3, 80094c0 <__ieee754_log+0x308>)
 800949e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a2:	ec51 0b19 	vmov	r0, r1, d9
 80094a6:	f7f7 f8c7 	bl	8000638 <__aeabi_dmul>
 80094aa:	a307      	add	r3, pc, #28	; (adr r3, 80094c8 <__ieee754_log+0x310>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	4604      	mov	r4, r0
 80094b2:	460d      	mov	r5, r1
 80094b4:	ec51 0b19 	vmov	r0, r1, d9
 80094b8:	e727      	b.n	800930a <__ieee754_log+0x152>
 80094ba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8009510 <__ieee754_log+0x358>
 80094be:	e694      	b.n	80091ea <__ieee754_log+0x32>
 80094c0:	fee00000 	.word	0xfee00000
 80094c4:	3fe62e42 	.word	0x3fe62e42
 80094c8:	35793c76 	.word	0x35793c76
 80094cc:	3dea39ef 	.word	0x3dea39ef
 80094d0:	55555555 	.word	0x55555555
 80094d4:	3fd55555 	.word	0x3fd55555
 80094d8:	df3e5244 	.word	0xdf3e5244
 80094dc:	3fc2f112 	.word	0x3fc2f112
 80094e0:	96cb03de 	.word	0x96cb03de
 80094e4:	3fc74664 	.word	0x3fc74664
 80094e8:	94229359 	.word	0x94229359
 80094ec:	3fd24924 	.word	0x3fd24924
 80094f0:	55555593 	.word	0x55555593
 80094f4:	3fe55555 	.word	0x3fe55555
 80094f8:	d078c69f 	.word	0xd078c69f
 80094fc:	3fc39a09 	.word	0x3fc39a09
 8009500:	1d8e78af 	.word	0x1d8e78af
 8009504:	3fcc71c5 	.word	0x3fcc71c5
 8009508:	9997fa04 	.word	0x9997fa04
 800950c:	3fd99999 	.word	0x3fd99999
	...
 8009518:	c3500000 	.word	0xc3500000
 800951c:	43500000 	.word	0x43500000
 8009520:	7fefffff 	.word	0x7fefffff
 8009524:	3ff00000 	.word	0x3ff00000
 8009528:	3fe00000 	.word	0x3fe00000
 800952c:	00000000 	.word	0x00000000

08009530 <__ieee754_pow>:
 8009530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009534:	ed2d 8b06 	vpush	{d8-d10}
 8009538:	b089      	sub	sp, #36	; 0x24
 800953a:	ed8d 1b00 	vstr	d1, [sp]
 800953e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009542:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009546:	ea58 0102 	orrs.w	r1, r8, r2
 800954a:	ec57 6b10 	vmov	r6, r7, d0
 800954e:	d115      	bne.n	800957c <__ieee754_pow+0x4c>
 8009550:	19b3      	adds	r3, r6, r6
 8009552:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009556:	4152      	adcs	r2, r2
 8009558:	4299      	cmp	r1, r3
 800955a:	4b89      	ldr	r3, [pc, #548]	; (8009780 <__ieee754_pow+0x250>)
 800955c:	4193      	sbcs	r3, r2
 800955e:	f080 84d1 	bcs.w	8009f04 <__ieee754_pow+0x9d4>
 8009562:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009566:	4630      	mov	r0, r6
 8009568:	4639      	mov	r1, r7
 800956a:	f7f6 feaf 	bl	80002cc <__adddf3>
 800956e:	ec41 0b10 	vmov	d0, r0, r1
 8009572:	b009      	add	sp, #36	; 0x24
 8009574:	ecbd 8b06 	vpop	{d8-d10}
 8009578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957c:	4b81      	ldr	r3, [pc, #516]	; (8009784 <__ieee754_pow+0x254>)
 800957e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009582:	429c      	cmp	r4, r3
 8009584:	ee10 aa10 	vmov	sl, s0
 8009588:	463d      	mov	r5, r7
 800958a:	dc06      	bgt.n	800959a <__ieee754_pow+0x6a>
 800958c:	d101      	bne.n	8009592 <__ieee754_pow+0x62>
 800958e:	2e00      	cmp	r6, #0
 8009590:	d1e7      	bne.n	8009562 <__ieee754_pow+0x32>
 8009592:	4598      	cmp	r8, r3
 8009594:	dc01      	bgt.n	800959a <__ieee754_pow+0x6a>
 8009596:	d10f      	bne.n	80095b8 <__ieee754_pow+0x88>
 8009598:	b172      	cbz	r2, 80095b8 <__ieee754_pow+0x88>
 800959a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800959e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80095a2:	ea55 050a 	orrs.w	r5, r5, sl
 80095a6:	d1dc      	bne.n	8009562 <__ieee754_pow+0x32>
 80095a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80095ac:	18db      	adds	r3, r3, r3
 80095ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80095b2:	4152      	adcs	r2, r2
 80095b4:	429d      	cmp	r5, r3
 80095b6:	e7d0      	b.n	800955a <__ieee754_pow+0x2a>
 80095b8:	2d00      	cmp	r5, #0
 80095ba:	da3b      	bge.n	8009634 <__ieee754_pow+0x104>
 80095bc:	4b72      	ldr	r3, [pc, #456]	; (8009788 <__ieee754_pow+0x258>)
 80095be:	4598      	cmp	r8, r3
 80095c0:	dc51      	bgt.n	8009666 <__ieee754_pow+0x136>
 80095c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80095c6:	4598      	cmp	r8, r3
 80095c8:	f340 84ab 	ble.w	8009f22 <__ieee754_pow+0x9f2>
 80095cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80095d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80095d4:	2b14      	cmp	r3, #20
 80095d6:	dd0f      	ble.n	80095f8 <__ieee754_pow+0xc8>
 80095d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80095dc:	fa22 f103 	lsr.w	r1, r2, r3
 80095e0:	fa01 f303 	lsl.w	r3, r1, r3
 80095e4:	4293      	cmp	r3, r2
 80095e6:	f040 849c 	bne.w	8009f22 <__ieee754_pow+0x9f2>
 80095ea:	f001 0101 	and.w	r1, r1, #1
 80095ee:	f1c1 0302 	rsb	r3, r1, #2
 80095f2:	9304      	str	r3, [sp, #16]
 80095f4:	b182      	cbz	r2, 8009618 <__ieee754_pow+0xe8>
 80095f6:	e05f      	b.n	80096b8 <__ieee754_pow+0x188>
 80095f8:	2a00      	cmp	r2, #0
 80095fa:	d15b      	bne.n	80096b4 <__ieee754_pow+0x184>
 80095fc:	f1c3 0314 	rsb	r3, r3, #20
 8009600:	fa48 f103 	asr.w	r1, r8, r3
 8009604:	fa01 f303 	lsl.w	r3, r1, r3
 8009608:	4543      	cmp	r3, r8
 800960a:	f040 8487 	bne.w	8009f1c <__ieee754_pow+0x9ec>
 800960e:	f001 0101 	and.w	r1, r1, #1
 8009612:	f1c1 0302 	rsb	r3, r1, #2
 8009616:	9304      	str	r3, [sp, #16]
 8009618:	4b5c      	ldr	r3, [pc, #368]	; (800978c <__ieee754_pow+0x25c>)
 800961a:	4598      	cmp	r8, r3
 800961c:	d132      	bne.n	8009684 <__ieee754_pow+0x154>
 800961e:	f1b9 0f00 	cmp.w	r9, #0
 8009622:	f280 8477 	bge.w	8009f14 <__ieee754_pow+0x9e4>
 8009626:	4959      	ldr	r1, [pc, #356]	; (800978c <__ieee754_pow+0x25c>)
 8009628:	4632      	mov	r2, r6
 800962a:	463b      	mov	r3, r7
 800962c:	2000      	movs	r0, #0
 800962e:	f7f7 f92d 	bl	800088c <__aeabi_ddiv>
 8009632:	e79c      	b.n	800956e <__ieee754_pow+0x3e>
 8009634:	2300      	movs	r3, #0
 8009636:	9304      	str	r3, [sp, #16]
 8009638:	2a00      	cmp	r2, #0
 800963a:	d13d      	bne.n	80096b8 <__ieee754_pow+0x188>
 800963c:	4b51      	ldr	r3, [pc, #324]	; (8009784 <__ieee754_pow+0x254>)
 800963e:	4598      	cmp	r8, r3
 8009640:	d1ea      	bne.n	8009618 <__ieee754_pow+0xe8>
 8009642:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009646:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800964a:	ea53 030a 	orrs.w	r3, r3, sl
 800964e:	f000 8459 	beq.w	8009f04 <__ieee754_pow+0x9d4>
 8009652:	4b4f      	ldr	r3, [pc, #316]	; (8009790 <__ieee754_pow+0x260>)
 8009654:	429c      	cmp	r4, r3
 8009656:	dd08      	ble.n	800966a <__ieee754_pow+0x13a>
 8009658:	f1b9 0f00 	cmp.w	r9, #0
 800965c:	f2c0 8456 	blt.w	8009f0c <__ieee754_pow+0x9dc>
 8009660:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009664:	e783      	b.n	800956e <__ieee754_pow+0x3e>
 8009666:	2302      	movs	r3, #2
 8009668:	e7e5      	b.n	8009636 <__ieee754_pow+0x106>
 800966a:	f1b9 0f00 	cmp.w	r9, #0
 800966e:	f04f 0000 	mov.w	r0, #0
 8009672:	f04f 0100 	mov.w	r1, #0
 8009676:	f6bf af7a 	bge.w	800956e <__ieee754_pow+0x3e>
 800967a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800967e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009682:	e774      	b.n	800956e <__ieee754_pow+0x3e>
 8009684:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009688:	d106      	bne.n	8009698 <__ieee754_pow+0x168>
 800968a:	4632      	mov	r2, r6
 800968c:	463b      	mov	r3, r7
 800968e:	4630      	mov	r0, r6
 8009690:	4639      	mov	r1, r7
 8009692:	f7f6 ffd1 	bl	8000638 <__aeabi_dmul>
 8009696:	e76a      	b.n	800956e <__ieee754_pow+0x3e>
 8009698:	4b3e      	ldr	r3, [pc, #248]	; (8009794 <__ieee754_pow+0x264>)
 800969a:	4599      	cmp	r9, r3
 800969c:	d10c      	bne.n	80096b8 <__ieee754_pow+0x188>
 800969e:	2d00      	cmp	r5, #0
 80096a0:	db0a      	blt.n	80096b8 <__ieee754_pow+0x188>
 80096a2:	ec47 6b10 	vmov	d0, r6, r7
 80096a6:	b009      	add	sp, #36	; 0x24
 80096a8:	ecbd 8b06 	vpop	{d8-d10}
 80096ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	f000 bd20 	b.w	800a0f4 <__ieee754_sqrt>
 80096b4:	2300      	movs	r3, #0
 80096b6:	9304      	str	r3, [sp, #16]
 80096b8:	ec47 6b10 	vmov	d0, r6, r7
 80096bc:	f000 fc62 	bl	8009f84 <fabs>
 80096c0:	ec51 0b10 	vmov	r0, r1, d0
 80096c4:	f1ba 0f00 	cmp.w	sl, #0
 80096c8:	d129      	bne.n	800971e <__ieee754_pow+0x1ee>
 80096ca:	b124      	cbz	r4, 80096d6 <__ieee754_pow+0x1a6>
 80096cc:	4b2f      	ldr	r3, [pc, #188]	; (800978c <__ieee754_pow+0x25c>)
 80096ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d123      	bne.n	800971e <__ieee754_pow+0x1ee>
 80096d6:	f1b9 0f00 	cmp.w	r9, #0
 80096da:	da05      	bge.n	80096e8 <__ieee754_pow+0x1b8>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	2000      	movs	r0, #0
 80096e2:	492a      	ldr	r1, [pc, #168]	; (800978c <__ieee754_pow+0x25c>)
 80096e4:	f7f7 f8d2 	bl	800088c <__aeabi_ddiv>
 80096e8:	2d00      	cmp	r5, #0
 80096ea:	f6bf af40 	bge.w	800956e <__ieee754_pow+0x3e>
 80096ee:	9b04      	ldr	r3, [sp, #16]
 80096f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80096f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80096f8:	431c      	orrs	r4, r3
 80096fa:	d108      	bne.n	800970e <__ieee754_pow+0x1de>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	4610      	mov	r0, r2
 8009702:	4619      	mov	r1, r3
 8009704:	f7f6 fde0 	bl	80002c8 <__aeabi_dsub>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	e78f      	b.n	800962e <__ieee754_pow+0xfe>
 800970e:	9b04      	ldr	r3, [sp, #16]
 8009710:	2b01      	cmp	r3, #1
 8009712:	f47f af2c 	bne.w	800956e <__ieee754_pow+0x3e>
 8009716:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800971a:	4619      	mov	r1, r3
 800971c:	e727      	b.n	800956e <__ieee754_pow+0x3e>
 800971e:	0feb      	lsrs	r3, r5, #31
 8009720:	3b01      	subs	r3, #1
 8009722:	9306      	str	r3, [sp, #24]
 8009724:	9a06      	ldr	r2, [sp, #24]
 8009726:	9b04      	ldr	r3, [sp, #16]
 8009728:	4313      	orrs	r3, r2
 800972a:	d102      	bne.n	8009732 <__ieee754_pow+0x202>
 800972c:	4632      	mov	r2, r6
 800972e:	463b      	mov	r3, r7
 8009730:	e7e6      	b.n	8009700 <__ieee754_pow+0x1d0>
 8009732:	4b19      	ldr	r3, [pc, #100]	; (8009798 <__ieee754_pow+0x268>)
 8009734:	4598      	cmp	r8, r3
 8009736:	f340 80fb 	ble.w	8009930 <__ieee754_pow+0x400>
 800973a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800973e:	4598      	cmp	r8, r3
 8009740:	4b13      	ldr	r3, [pc, #76]	; (8009790 <__ieee754_pow+0x260>)
 8009742:	dd0c      	ble.n	800975e <__ieee754_pow+0x22e>
 8009744:	429c      	cmp	r4, r3
 8009746:	dc0f      	bgt.n	8009768 <__ieee754_pow+0x238>
 8009748:	f1b9 0f00 	cmp.w	r9, #0
 800974c:	da0f      	bge.n	800976e <__ieee754_pow+0x23e>
 800974e:	2000      	movs	r0, #0
 8009750:	b009      	add	sp, #36	; 0x24
 8009752:	ecbd 8b06 	vpop	{d8-d10}
 8009756:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975a:	f000 bcc2 	b.w	800a0e2 <__math_oflow>
 800975e:	429c      	cmp	r4, r3
 8009760:	dbf2      	blt.n	8009748 <__ieee754_pow+0x218>
 8009762:	4b0a      	ldr	r3, [pc, #40]	; (800978c <__ieee754_pow+0x25c>)
 8009764:	429c      	cmp	r4, r3
 8009766:	dd19      	ble.n	800979c <__ieee754_pow+0x26c>
 8009768:	f1b9 0f00 	cmp.w	r9, #0
 800976c:	dcef      	bgt.n	800974e <__ieee754_pow+0x21e>
 800976e:	2000      	movs	r0, #0
 8009770:	b009      	add	sp, #36	; 0x24
 8009772:	ecbd 8b06 	vpop	{d8-d10}
 8009776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977a:	f000 bca9 	b.w	800a0d0 <__math_uflow>
 800977e:	bf00      	nop
 8009780:	fff00000 	.word	0xfff00000
 8009784:	7ff00000 	.word	0x7ff00000
 8009788:	433fffff 	.word	0x433fffff
 800978c:	3ff00000 	.word	0x3ff00000
 8009790:	3fefffff 	.word	0x3fefffff
 8009794:	3fe00000 	.word	0x3fe00000
 8009798:	41e00000 	.word	0x41e00000
 800979c:	4b60      	ldr	r3, [pc, #384]	; (8009920 <__ieee754_pow+0x3f0>)
 800979e:	2200      	movs	r2, #0
 80097a0:	f7f6 fd92 	bl	80002c8 <__aeabi_dsub>
 80097a4:	a354      	add	r3, pc, #336	; (adr r3, 80098f8 <__ieee754_pow+0x3c8>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	4604      	mov	r4, r0
 80097ac:	460d      	mov	r5, r1
 80097ae:	f7f6 ff43 	bl	8000638 <__aeabi_dmul>
 80097b2:	a353      	add	r3, pc, #332	; (adr r3, 8009900 <__ieee754_pow+0x3d0>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	4606      	mov	r6, r0
 80097ba:	460f      	mov	r7, r1
 80097bc:	4620      	mov	r0, r4
 80097be:	4629      	mov	r1, r5
 80097c0:	f7f6 ff3a 	bl	8000638 <__aeabi_dmul>
 80097c4:	4b57      	ldr	r3, [pc, #348]	; (8009924 <__ieee754_pow+0x3f4>)
 80097c6:	4682      	mov	sl, r0
 80097c8:	468b      	mov	fp, r1
 80097ca:	2200      	movs	r2, #0
 80097cc:	4620      	mov	r0, r4
 80097ce:	4629      	mov	r1, r5
 80097d0:	f7f6 ff32 	bl	8000638 <__aeabi_dmul>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	a14b      	add	r1, pc, #300	; (adr r1, 8009908 <__ieee754_pow+0x3d8>)
 80097da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097de:	f7f6 fd73 	bl	80002c8 <__aeabi_dsub>
 80097e2:	4622      	mov	r2, r4
 80097e4:	462b      	mov	r3, r5
 80097e6:	f7f6 ff27 	bl	8000638 <__aeabi_dmul>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	2000      	movs	r0, #0
 80097f0:	494d      	ldr	r1, [pc, #308]	; (8009928 <__ieee754_pow+0x3f8>)
 80097f2:	f7f6 fd69 	bl	80002c8 <__aeabi_dsub>
 80097f6:	4622      	mov	r2, r4
 80097f8:	4680      	mov	r8, r0
 80097fa:	4689      	mov	r9, r1
 80097fc:	462b      	mov	r3, r5
 80097fe:	4620      	mov	r0, r4
 8009800:	4629      	mov	r1, r5
 8009802:	f7f6 ff19 	bl	8000638 <__aeabi_dmul>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	4640      	mov	r0, r8
 800980c:	4649      	mov	r1, r9
 800980e:	f7f6 ff13 	bl	8000638 <__aeabi_dmul>
 8009812:	a33f      	add	r3, pc, #252	; (adr r3, 8009910 <__ieee754_pow+0x3e0>)
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	f7f6 ff0e 	bl	8000638 <__aeabi_dmul>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4650      	mov	r0, sl
 8009822:	4659      	mov	r1, fp
 8009824:	f7f6 fd50 	bl	80002c8 <__aeabi_dsub>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	4680      	mov	r8, r0
 800982e:	4689      	mov	r9, r1
 8009830:	4630      	mov	r0, r6
 8009832:	4639      	mov	r1, r7
 8009834:	f7f6 fd4a 	bl	80002cc <__adddf3>
 8009838:	2000      	movs	r0, #0
 800983a:	4632      	mov	r2, r6
 800983c:	463b      	mov	r3, r7
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
 8009842:	f7f6 fd41 	bl	80002c8 <__aeabi_dsub>
 8009846:	4602      	mov	r2, r0
 8009848:	460b      	mov	r3, r1
 800984a:	4640      	mov	r0, r8
 800984c:	4649      	mov	r1, r9
 800984e:	f7f6 fd3b 	bl	80002c8 <__aeabi_dsub>
 8009852:	9b04      	ldr	r3, [sp, #16]
 8009854:	9a06      	ldr	r2, [sp, #24]
 8009856:	3b01      	subs	r3, #1
 8009858:	4313      	orrs	r3, r2
 800985a:	4682      	mov	sl, r0
 800985c:	468b      	mov	fp, r1
 800985e:	f040 81e7 	bne.w	8009c30 <__ieee754_pow+0x700>
 8009862:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009918 <__ieee754_pow+0x3e8>
 8009866:	eeb0 8a47 	vmov.f32	s16, s14
 800986a:	eef0 8a67 	vmov.f32	s17, s15
 800986e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009872:	2600      	movs	r6, #0
 8009874:	4632      	mov	r2, r6
 8009876:	463b      	mov	r3, r7
 8009878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800987c:	f7f6 fd24 	bl	80002c8 <__aeabi_dsub>
 8009880:	4622      	mov	r2, r4
 8009882:	462b      	mov	r3, r5
 8009884:	f7f6 fed8 	bl	8000638 <__aeabi_dmul>
 8009888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800988c:	4680      	mov	r8, r0
 800988e:	4689      	mov	r9, r1
 8009890:	4650      	mov	r0, sl
 8009892:	4659      	mov	r1, fp
 8009894:	f7f6 fed0 	bl	8000638 <__aeabi_dmul>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	4640      	mov	r0, r8
 800989e:	4649      	mov	r1, r9
 80098a0:	f7f6 fd14 	bl	80002cc <__adddf3>
 80098a4:	4632      	mov	r2, r6
 80098a6:	463b      	mov	r3, r7
 80098a8:	4680      	mov	r8, r0
 80098aa:	4689      	mov	r9, r1
 80098ac:	4620      	mov	r0, r4
 80098ae:	4629      	mov	r1, r5
 80098b0:	f7f6 fec2 	bl	8000638 <__aeabi_dmul>
 80098b4:	460b      	mov	r3, r1
 80098b6:	4604      	mov	r4, r0
 80098b8:	460d      	mov	r5, r1
 80098ba:	4602      	mov	r2, r0
 80098bc:	4649      	mov	r1, r9
 80098be:	4640      	mov	r0, r8
 80098c0:	f7f6 fd04 	bl	80002cc <__adddf3>
 80098c4:	4b19      	ldr	r3, [pc, #100]	; (800992c <__ieee754_pow+0x3fc>)
 80098c6:	4299      	cmp	r1, r3
 80098c8:	ec45 4b19 	vmov	d9, r4, r5
 80098cc:	4606      	mov	r6, r0
 80098ce:	460f      	mov	r7, r1
 80098d0:	468b      	mov	fp, r1
 80098d2:	f340 82f0 	ble.w	8009eb6 <__ieee754_pow+0x986>
 80098d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80098da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80098de:	4303      	orrs	r3, r0
 80098e0:	f000 81e4 	beq.w	8009cac <__ieee754_pow+0x77c>
 80098e4:	ec51 0b18 	vmov	r0, r1, d8
 80098e8:	2200      	movs	r2, #0
 80098ea:	2300      	movs	r3, #0
 80098ec:	f7f7 f916 	bl	8000b1c <__aeabi_dcmplt>
 80098f0:	3800      	subs	r0, #0
 80098f2:	bf18      	it	ne
 80098f4:	2001      	movne	r0, #1
 80098f6:	e72b      	b.n	8009750 <__ieee754_pow+0x220>
 80098f8:	60000000 	.word	0x60000000
 80098fc:	3ff71547 	.word	0x3ff71547
 8009900:	f85ddf44 	.word	0xf85ddf44
 8009904:	3e54ae0b 	.word	0x3e54ae0b
 8009908:	55555555 	.word	0x55555555
 800990c:	3fd55555 	.word	0x3fd55555
 8009910:	652b82fe 	.word	0x652b82fe
 8009914:	3ff71547 	.word	0x3ff71547
 8009918:	00000000 	.word	0x00000000
 800991c:	bff00000 	.word	0xbff00000
 8009920:	3ff00000 	.word	0x3ff00000
 8009924:	3fd00000 	.word	0x3fd00000
 8009928:	3fe00000 	.word	0x3fe00000
 800992c:	408fffff 	.word	0x408fffff
 8009930:	4bd5      	ldr	r3, [pc, #852]	; (8009c88 <__ieee754_pow+0x758>)
 8009932:	402b      	ands	r3, r5
 8009934:	2200      	movs	r2, #0
 8009936:	b92b      	cbnz	r3, 8009944 <__ieee754_pow+0x414>
 8009938:	4bd4      	ldr	r3, [pc, #848]	; (8009c8c <__ieee754_pow+0x75c>)
 800993a:	f7f6 fe7d 	bl	8000638 <__aeabi_dmul>
 800993e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009942:	460c      	mov	r4, r1
 8009944:	1523      	asrs	r3, r4, #20
 8009946:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800994a:	4413      	add	r3, r2
 800994c:	9305      	str	r3, [sp, #20]
 800994e:	4bd0      	ldr	r3, [pc, #832]	; (8009c90 <__ieee754_pow+0x760>)
 8009950:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009954:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009958:	429c      	cmp	r4, r3
 800995a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800995e:	dd08      	ble.n	8009972 <__ieee754_pow+0x442>
 8009960:	4bcc      	ldr	r3, [pc, #816]	; (8009c94 <__ieee754_pow+0x764>)
 8009962:	429c      	cmp	r4, r3
 8009964:	f340 8162 	ble.w	8009c2c <__ieee754_pow+0x6fc>
 8009968:	9b05      	ldr	r3, [sp, #20]
 800996a:	3301      	adds	r3, #1
 800996c:	9305      	str	r3, [sp, #20]
 800996e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009972:	2400      	movs	r4, #0
 8009974:	00e3      	lsls	r3, r4, #3
 8009976:	9307      	str	r3, [sp, #28]
 8009978:	4bc7      	ldr	r3, [pc, #796]	; (8009c98 <__ieee754_pow+0x768>)
 800997a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800997e:	ed93 7b00 	vldr	d7, [r3]
 8009982:	4629      	mov	r1, r5
 8009984:	ec53 2b17 	vmov	r2, r3, d7
 8009988:	eeb0 9a47 	vmov.f32	s18, s14
 800998c:	eef0 9a67 	vmov.f32	s19, s15
 8009990:	4682      	mov	sl, r0
 8009992:	f7f6 fc99 	bl	80002c8 <__aeabi_dsub>
 8009996:	4652      	mov	r2, sl
 8009998:	4606      	mov	r6, r0
 800999a:	460f      	mov	r7, r1
 800999c:	462b      	mov	r3, r5
 800999e:	ec51 0b19 	vmov	r0, r1, d9
 80099a2:	f7f6 fc93 	bl	80002cc <__adddf3>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	2000      	movs	r0, #0
 80099ac:	49bb      	ldr	r1, [pc, #748]	; (8009c9c <__ieee754_pow+0x76c>)
 80099ae:	f7f6 ff6d 	bl	800088c <__aeabi_ddiv>
 80099b2:	ec41 0b1a 	vmov	d10, r0, r1
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4630      	mov	r0, r6
 80099bc:	4639      	mov	r1, r7
 80099be:	f7f6 fe3b 	bl	8000638 <__aeabi_dmul>
 80099c2:	2300      	movs	r3, #0
 80099c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099c8:	9302      	str	r3, [sp, #8]
 80099ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80099ce:	46ab      	mov	fp, r5
 80099d0:	106d      	asrs	r5, r5, #1
 80099d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80099d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80099da:	ec41 0b18 	vmov	d8, r0, r1
 80099de:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80099e2:	2200      	movs	r2, #0
 80099e4:	4640      	mov	r0, r8
 80099e6:	4649      	mov	r1, r9
 80099e8:	4614      	mov	r4, r2
 80099ea:	461d      	mov	r5, r3
 80099ec:	f7f6 fe24 	bl	8000638 <__aeabi_dmul>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4630      	mov	r0, r6
 80099f6:	4639      	mov	r1, r7
 80099f8:	f7f6 fc66 	bl	80002c8 <__aeabi_dsub>
 80099fc:	ec53 2b19 	vmov	r2, r3, d9
 8009a00:	4606      	mov	r6, r0
 8009a02:	460f      	mov	r7, r1
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f6 fc5e 	bl	80002c8 <__aeabi_dsub>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4650      	mov	r0, sl
 8009a12:	4659      	mov	r1, fp
 8009a14:	f7f6 fc58 	bl	80002c8 <__aeabi_dsub>
 8009a18:	4642      	mov	r2, r8
 8009a1a:	464b      	mov	r3, r9
 8009a1c:	f7f6 fe0c 	bl	8000638 <__aeabi_dmul>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4630      	mov	r0, r6
 8009a26:	4639      	mov	r1, r7
 8009a28:	f7f6 fc4e 	bl	80002c8 <__aeabi_dsub>
 8009a2c:	ec53 2b1a 	vmov	r2, r3, d10
 8009a30:	f7f6 fe02 	bl	8000638 <__aeabi_dmul>
 8009a34:	ec53 2b18 	vmov	r2, r3, d8
 8009a38:	ec41 0b19 	vmov	d9, r0, r1
 8009a3c:	ec51 0b18 	vmov	r0, r1, d8
 8009a40:	f7f6 fdfa 	bl	8000638 <__aeabi_dmul>
 8009a44:	a37c      	add	r3, pc, #496	; (adr r3, 8009c38 <__ieee754_pow+0x708>)
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	460d      	mov	r5, r1
 8009a4e:	f7f6 fdf3 	bl	8000638 <__aeabi_dmul>
 8009a52:	a37b      	add	r3, pc, #492	; (adr r3, 8009c40 <__ieee754_pow+0x710>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	f7f6 fc38 	bl	80002cc <__adddf3>
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	462b      	mov	r3, r5
 8009a60:	f7f6 fdea 	bl	8000638 <__aeabi_dmul>
 8009a64:	a378      	add	r3, pc, #480	; (adr r3, 8009c48 <__ieee754_pow+0x718>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f7f6 fc2f 	bl	80002cc <__adddf3>
 8009a6e:	4622      	mov	r2, r4
 8009a70:	462b      	mov	r3, r5
 8009a72:	f7f6 fde1 	bl	8000638 <__aeabi_dmul>
 8009a76:	a376      	add	r3, pc, #472	; (adr r3, 8009c50 <__ieee754_pow+0x720>)
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f7f6 fc26 	bl	80002cc <__adddf3>
 8009a80:	4622      	mov	r2, r4
 8009a82:	462b      	mov	r3, r5
 8009a84:	f7f6 fdd8 	bl	8000638 <__aeabi_dmul>
 8009a88:	a373      	add	r3, pc, #460	; (adr r3, 8009c58 <__ieee754_pow+0x728>)
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f7f6 fc1d 	bl	80002cc <__adddf3>
 8009a92:	4622      	mov	r2, r4
 8009a94:	462b      	mov	r3, r5
 8009a96:	f7f6 fdcf 	bl	8000638 <__aeabi_dmul>
 8009a9a:	a371      	add	r3, pc, #452	; (adr r3, 8009c60 <__ieee754_pow+0x730>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f7f6 fc14 	bl	80002cc <__adddf3>
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	460f      	mov	r7, r1
 8009aaa:	462b      	mov	r3, r5
 8009aac:	4620      	mov	r0, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	f7f6 fdc2 	bl	8000638 <__aeabi_dmul>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4630      	mov	r0, r6
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f6 fdbc 	bl	8000638 <__aeabi_dmul>
 8009ac0:	4642      	mov	r2, r8
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	460d      	mov	r5, r1
 8009ac6:	464b      	mov	r3, r9
 8009ac8:	ec51 0b18 	vmov	r0, r1, d8
 8009acc:	f7f6 fbfe 	bl	80002cc <__adddf3>
 8009ad0:	ec53 2b19 	vmov	r2, r3, d9
 8009ad4:	f7f6 fdb0 	bl	8000638 <__aeabi_dmul>
 8009ad8:	4622      	mov	r2, r4
 8009ada:	462b      	mov	r3, r5
 8009adc:	f7f6 fbf6 	bl	80002cc <__adddf3>
 8009ae0:	4642      	mov	r2, r8
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	468b      	mov	fp, r1
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	4640      	mov	r0, r8
 8009aea:	4649      	mov	r1, r9
 8009aec:	f7f6 fda4 	bl	8000638 <__aeabi_dmul>
 8009af0:	4b6b      	ldr	r3, [pc, #428]	; (8009ca0 <__ieee754_pow+0x770>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	4606      	mov	r6, r0
 8009af6:	460f      	mov	r7, r1
 8009af8:	f7f6 fbe8 	bl	80002cc <__adddf3>
 8009afc:	4652      	mov	r2, sl
 8009afe:	465b      	mov	r3, fp
 8009b00:	f7f6 fbe4 	bl	80002cc <__adddf3>
 8009b04:	2000      	movs	r0, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	460d      	mov	r5, r1
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4640      	mov	r0, r8
 8009b10:	4649      	mov	r1, r9
 8009b12:	f7f6 fd91 	bl	8000638 <__aeabi_dmul>
 8009b16:	4b62      	ldr	r3, [pc, #392]	; (8009ca0 <__ieee754_pow+0x770>)
 8009b18:	4680      	mov	r8, r0
 8009b1a:	4689      	mov	r9, r1
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4629      	mov	r1, r5
 8009b22:	f7f6 fbd1 	bl	80002c8 <__aeabi_dsub>
 8009b26:	4632      	mov	r2, r6
 8009b28:	463b      	mov	r3, r7
 8009b2a:	f7f6 fbcd 	bl	80002c8 <__aeabi_dsub>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4650      	mov	r0, sl
 8009b34:	4659      	mov	r1, fp
 8009b36:	f7f6 fbc7 	bl	80002c8 <__aeabi_dsub>
 8009b3a:	ec53 2b18 	vmov	r2, r3, d8
 8009b3e:	f7f6 fd7b 	bl	8000638 <__aeabi_dmul>
 8009b42:	4622      	mov	r2, r4
 8009b44:	4606      	mov	r6, r0
 8009b46:	460f      	mov	r7, r1
 8009b48:	462b      	mov	r3, r5
 8009b4a:	ec51 0b19 	vmov	r0, r1, d9
 8009b4e:	f7f6 fd73 	bl	8000638 <__aeabi_dmul>
 8009b52:	4602      	mov	r2, r0
 8009b54:	460b      	mov	r3, r1
 8009b56:	4630      	mov	r0, r6
 8009b58:	4639      	mov	r1, r7
 8009b5a:	f7f6 fbb7 	bl	80002cc <__adddf3>
 8009b5e:	4606      	mov	r6, r0
 8009b60:	460f      	mov	r7, r1
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4640      	mov	r0, r8
 8009b68:	4649      	mov	r1, r9
 8009b6a:	f7f6 fbaf 	bl	80002cc <__adddf3>
 8009b6e:	a33e      	add	r3, pc, #248	; (adr r3, 8009c68 <__ieee754_pow+0x738>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	2000      	movs	r0, #0
 8009b76:	4604      	mov	r4, r0
 8009b78:	460d      	mov	r5, r1
 8009b7a:	f7f6 fd5d 	bl	8000638 <__aeabi_dmul>
 8009b7e:	4642      	mov	r2, r8
 8009b80:	ec41 0b18 	vmov	d8, r0, r1
 8009b84:	464b      	mov	r3, r9
 8009b86:	4620      	mov	r0, r4
 8009b88:	4629      	mov	r1, r5
 8009b8a:	f7f6 fb9d 	bl	80002c8 <__aeabi_dsub>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4630      	mov	r0, r6
 8009b94:	4639      	mov	r1, r7
 8009b96:	f7f6 fb97 	bl	80002c8 <__aeabi_dsub>
 8009b9a:	a335      	add	r3, pc, #212	; (adr r3, 8009c70 <__ieee754_pow+0x740>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f7f6 fd4a 	bl	8000638 <__aeabi_dmul>
 8009ba4:	a334      	add	r3, pc, #208	; (adr r3, 8009c78 <__ieee754_pow+0x748>)
 8009ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009baa:	4606      	mov	r6, r0
 8009bac:	460f      	mov	r7, r1
 8009bae:	4620      	mov	r0, r4
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	f7f6 fd41 	bl	8000638 <__aeabi_dmul>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	460b      	mov	r3, r1
 8009bba:	4630      	mov	r0, r6
 8009bbc:	4639      	mov	r1, r7
 8009bbe:	f7f6 fb85 	bl	80002cc <__adddf3>
 8009bc2:	9a07      	ldr	r2, [sp, #28]
 8009bc4:	4b37      	ldr	r3, [pc, #220]	; (8009ca4 <__ieee754_pow+0x774>)
 8009bc6:	4413      	add	r3, r2
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	f7f6 fb7e 	bl	80002cc <__adddf3>
 8009bd0:	4682      	mov	sl, r0
 8009bd2:	9805      	ldr	r0, [sp, #20]
 8009bd4:	468b      	mov	fp, r1
 8009bd6:	f7f6 fcc5 	bl	8000564 <__aeabi_i2d>
 8009bda:	9a07      	ldr	r2, [sp, #28]
 8009bdc:	4b32      	ldr	r3, [pc, #200]	; (8009ca8 <__ieee754_pow+0x778>)
 8009bde:	4413      	add	r3, r2
 8009be0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009be4:	4606      	mov	r6, r0
 8009be6:	460f      	mov	r7, r1
 8009be8:	4652      	mov	r2, sl
 8009bea:	465b      	mov	r3, fp
 8009bec:	ec51 0b18 	vmov	r0, r1, d8
 8009bf0:	f7f6 fb6c 	bl	80002cc <__adddf3>
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	464b      	mov	r3, r9
 8009bf8:	f7f6 fb68 	bl	80002cc <__adddf3>
 8009bfc:	4632      	mov	r2, r6
 8009bfe:	463b      	mov	r3, r7
 8009c00:	f7f6 fb64 	bl	80002cc <__adddf3>
 8009c04:	2000      	movs	r0, #0
 8009c06:	4632      	mov	r2, r6
 8009c08:	463b      	mov	r3, r7
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	460d      	mov	r5, r1
 8009c0e:	f7f6 fb5b 	bl	80002c8 <__aeabi_dsub>
 8009c12:	4642      	mov	r2, r8
 8009c14:	464b      	mov	r3, r9
 8009c16:	f7f6 fb57 	bl	80002c8 <__aeabi_dsub>
 8009c1a:	ec53 2b18 	vmov	r2, r3, d8
 8009c1e:	f7f6 fb53 	bl	80002c8 <__aeabi_dsub>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4650      	mov	r0, sl
 8009c28:	4659      	mov	r1, fp
 8009c2a:	e610      	b.n	800984e <__ieee754_pow+0x31e>
 8009c2c:	2401      	movs	r4, #1
 8009c2e:	e6a1      	b.n	8009974 <__ieee754_pow+0x444>
 8009c30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009c80 <__ieee754_pow+0x750>
 8009c34:	e617      	b.n	8009866 <__ieee754_pow+0x336>
 8009c36:	bf00      	nop
 8009c38:	4a454eef 	.word	0x4a454eef
 8009c3c:	3fca7e28 	.word	0x3fca7e28
 8009c40:	93c9db65 	.word	0x93c9db65
 8009c44:	3fcd864a 	.word	0x3fcd864a
 8009c48:	a91d4101 	.word	0xa91d4101
 8009c4c:	3fd17460 	.word	0x3fd17460
 8009c50:	518f264d 	.word	0x518f264d
 8009c54:	3fd55555 	.word	0x3fd55555
 8009c58:	db6fabff 	.word	0xdb6fabff
 8009c5c:	3fdb6db6 	.word	0x3fdb6db6
 8009c60:	33333303 	.word	0x33333303
 8009c64:	3fe33333 	.word	0x3fe33333
 8009c68:	e0000000 	.word	0xe0000000
 8009c6c:	3feec709 	.word	0x3feec709
 8009c70:	dc3a03fd 	.word	0xdc3a03fd
 8009c74:	3feec709 	.word	0x3feec709
 8009c78:	145b01f5 	.word	0x145b01f5
 8009c7c:	be3e2fe0 	.word	0xbe3e2fe0
 8009c80:	00000000 	.word	0x00000000
 8009c84:	3ff00000 	.word	0x3ff00000
 8009c88:	7ff00000 	.word	0x7ff00000
 8009c8c:	43400000 	.word	0x43400000
 8009c90:	0003988e 	.word	0x0003988e
 8009c94:	000bb679 	.word	0x000bb679
 8009c98:	0800a7b8 	.word	0x0800a7b8
 8009c9c:	3ff00000 	.word	0x3ff00000
 8009ca0:	40080000 	.word	0x40080000
 8009ca4:	0800a7d8 	.word	0x0800a7d8
 8009ca8:	0800a7c8 	.word	0x0800a7c8
 8009cac:	a3b3      	add	r3, pc, #716	; (adr r3, 8009f7c <__ieee754_pow+0xa4c>)
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	4640      	mov	r0, r8
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	f7f6 fb09 	bl	80002cc <__adddf3>
 8009cba:	4622      	mov	r2, r4
 8009cbc:	ec41 0b1a 	vmov	d10, r0, r1
 8009cc0:	462b      	mov	r3, r5
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	4639      	mov	r1, r7
 8009cc6:	f7f6 faff 	bl	80002c8 <__aeabi_dsub>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	ec51 0b1a 	vmov	r0, r1, d10
 8009cd2:	f7f6 ff41 	bl	8000b58 <__aeabi_dcmpgt>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	f47f ae04 	bne.w	80098e4 <__ieee754_pow+0x3b4>
 8009cdc:	4aa2      	ldr	r2, [pc, #648]	; (8009f68 <__ieee754_pow+0xa38>)
 8009cde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	f340 8107 	ble.w	8009ef6 <__ieee754_pow+0x9c6>
 8009ce8:	151b      	asrs	r3, r3, #20
 8009cea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009cee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009cf2:	fa4a fa03 	asr.w	sl, sl, r3
 8009cf6:	44da      	add	sl, fp
 8009cf8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009cfc:	489b      	ldr	r0, [pc, #620]	; (8009f6c <__ieee754_pow+0xa3c>)
 8009cfe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009d02:	4108      	asrs	r0, r1
 8009d04:	ea00 030a 	and.w	r3, r0, sl
 8009d08:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009d0c:	f1c1 0114 	rsb	r1, r1, #20
 8009d10:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009d14:	fa4a fa01 	asr.w	sl, sl, r1
 8009d18:	f1bb 0f00 	cmp.w	fp, #0
 8009d1c:	f04f 0200 	mov.w	r2, #0
 8009d20:	4620      	mov	r0, r4
 8009d22:	4629      	mov	r1, r5
 8009d24:	bfb8      	it	lt
 8009d26:	f1ca 0a00 	rsblt	sl, sl, #0
 8009d2a:	f7f6 facd 	bl	80002c8 <__aeabi_dsub>
 8009d2e:	ec41 0b19 	vmov	d9, r0, r1
 8009d32:	4642      	mov	r2, r8
 8009d34:	464b      	mov	r3, r9
 8009d36:	ec51 0b19 	vmov	r0, r1, d9
 8009d3a:	f7f6 fac7 	bl	80002cc <__adddf3>
 8009d3e:	a37a      	add	r3, pc, #488	; (adr r3, 8009f28 <__ieee754_pow+0x9f8>)
 8009d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d44:	2000      	movs	r0, #0
 8009d46:	4604      	mov	r4, r0
 8009d48:	460d      	mov	r5, r1
 8009d4a:	f7f6 fc75 	bl	8000638 <__aeabi_dmul>
 8009d4e:	ec53 2b19 	vmov	r2, r3, d9
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fab5 	bl	80002c8 <__aeabi_dsub>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	4640      	mov	r0, r8
 8009d64:	4649      	mov	r1, r9
 8009d66:	f7f6 faaf 	bl	80002c8 <__aeabi_dsub>
 8009d6a:	a371      	add	r3, pc, #452	; (adr r3, 8009f30 <__ieee754_pow+0xa00>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f7f6 fc62 	bl	8000638 <__aeabi_dmul>
 8009d74:	a370      	add	r3, pc, #448	; (adr r3, 8009f38 <__ieee754_pow+0xa08>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	4680      	mov	r8, r0
 8009d7c:	4689      	mov	r9, r1
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4629      	mov	r1, r5
 8009d82:	f7f6 fc59 	bl	8000638 <__aeabi_dmul>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4640      	mov	r0, r8
 8009d8c:	4649      	mov	r1, r9
 8009d8e:	f7f6 fa9d 	bl	80002cc <__adddf3>
 8009d92:	4604      	mov	r4, r0
 8009d94:	460d      	mov	r5, r1
 8009d96:	4602      	mov	r2, r0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	4639      	mov	r1, r7
 8009d9e:	f7f6 fa95 	bl	80002cc <__adddf3>
 8009da2:	4632      	mov	r2, r6
 8009da4:	463b      	mov	r3, r7
 8009da6:	4680      	mov	r8, r0
 8009da8:	4689      	mov	r9, r1
 8009daa:	f7f6 fa8d 	bl	80002c8 <__aeabi_dsub>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	4620      	mov	r0, r4
 8009db4:	4629      	mov	r1, r5
 8009db6:	f7f6 fa87 	bl	80002c8 <__aeabi_dsub>
 8009dba:	4642      	mov	r2, r8
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	460f      	mov	r7, r1
 8009dc0:	464b      	mov	r3, r9
 8009dc2:	4640      	mov	r0, r8
 8009dc4:	4649      	mov	r1, r9
 8009dc6:	f7f6 fc37 	bl	8000638 <__aeabi_dmul>
 8009dca:	a35d      	add	r3, pc, #372	; (adr r3, 8009f40 <__ieee754_pow+0xa10>)
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	460d      	mov	r5, r1
 8009dd4:	f7f6 fc30 	bl	8000638 <__aeabi_dmul>
 8009dd8:	a35b      	add	r3, pc, #364	; (adr r3, 8009f48 <__ieee754_pow+0xa18>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f7f6 fa73 	bl	80002c8 <__aeabi_dsub>
 8009de2:	4622      	mov	r2, r4
 8009de4:	462b      	mov	r3, r5
 8009de6:	f7f6 fc27 	bl	8000638 <__aeabi_dmul>
 8009dea:	a359      	add	r3, pc, #356	; (adr r3, 8009f50 <__ieee754_pow+0xa20>)
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f7f6 fa6c 	bl	80002cc <__adddf3>
 8009df4:	4622      	mov	r2, r4
 8009df6:	462b      	mov	r3, r5
 8009df8:	f7f6 fc1e 	bl	8000638 <__aeabi_dmul>
 8009dfc:	a356      	add	r3, pc, #344	; (adr r3, 8009f58 <__ieee754_pow+0xa28>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	f7f6 fa61 	bl	80002c8 <__aeabi_dsub>
 8009e06:	4622      	mov	r2, r4
 8009e08:	462b      	mov	r3, r5
 8009e0a:	f7f6 fc15 	bl	8000638 <__aeabi_dmul>
 8009e0e:	a354      	add	r3, pc, #336	; (adr r3, 8009f60 <__ieee754_pow+0xa30>)
 8009e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e14:	f7f6 fa5a 	bl	80002cc <__adddf3>
 8009e18:	4622      	mov	r2, r4
 8009e1a:	462b      	mov	r3, r5
 8009e1c:	f7f6 fc0c 	bl	8000638 <__aeabi_dmul>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4640      	mov	r0, r8
 8009e26:	4649      	mov	r1, r9
 8009e28:	f7f6 fa4e 	bl	80002c8 <__aeabi_dsub>
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	460d      	mov	r5, r1
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4640      	mov	r0, r8
 8009e36:	4649      	mov	r1, r9
 8009e38:	f7f6 fbfe 	bl	8000638 <__aeabi_dmul>
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	ec41 0b19 	vmov	d9, r0, r1
 8009e42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e46:	4620      	mov	r0, r4
 8009e48:	4629      	mov	r1, r5
 8009e4a:	f7f6 fa3d 	bl	80002c8 <__aeabi_dsub>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	ec51 0b19 	vmov	r0, r1, d9
 8009e56:	f7f6 fd19 	bl	800088c <__aeabi_ddiv>
 8009e5a:	4632      	mov	r2, r6
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	460d      	mov	r5, r1
 8009e60:	463b      	mov	r3, r7
 8009e62:	4640      	mov	r0, r8
 8009e64:	4649      	mov	r1, r9
 8009e66:	f7f6 fbe7 	bl	8000638 <__aeabi_dmul>
 8009e6a:	4632      	mov	r2, r6
 8009e6c:	463b      	mov	r3, r7
 8009e6e:	f7f6 fa2d 	bl	80002cc <__adddf3>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	4620      	mov	r0, r4
 8009e78:	4629      	mov	r1, r5
 8009e7a:	f7f6 fa25 	bl	80002c8 <__aeabi_dsub>
 8009e7e:	4642      	mov	r2, r8
 8009e80:	464b      	mov	r3, r9
 8009e82:	f7f6 fa21 	bl	80002c8 <__aeabi_dsub>
 8009e86:	460b      	mov	r3, r1
 8009e88:	4602      	mov	r2, r0
 8009e8a:	4939      	ldr	r1, [pc, #228]	; (8009f70 <__ieee754_pow+0xa40>)
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	f7f6 fa1b 	bl	80002c8 <__aeabi_dsub>
 8009e92:	ec41 0b10 	vmov	d0, r0, r1
 8009e96:	ee10 3a90 	vmov	r3, s1
 8009e9a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ea2:	da2b      	bge.n	8009efc <__ieee754_pow+0x9cc>
 8009ea4:	4650      	mov	r0, sl
 8009ea6:	f000 f877 	bl	8009f98 <scalbn>
 8009eaa:	ec51 0b10 	vmov	r0, r1, d0
 8009eae:	ec53 2b18 	vmov	r2, r3, d8
 8009eb2:	f7ff bbee 	b.w	8009692 <__ieee754_pow+0x162>
 8009eb6:	4b2f      	ldr	r3, [pc, #188]	; (8009f74 <__ieee754_pow+0xa44>)
 8009eb8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009ebc:	429e      	cmp	r6, r3
 8009ebe:	f77f af0d 	ble.w	8009cdc <__ieee754_pow+0x7ac>
 8009ec2:	4b2d      	ldr	r3, [pc, #180]	; (8009f78 <__ieee754_pow+0xa48>)
 8009ec4:	440b      	add	r3, r1
 8009ec6:	4303      	orrs	r3, r0
 8009ec8:	d009      	beq.n	8009ede <__ieee754_pow+0x9ae>
 8009eca:	ec51 0b18 	vmov	r0, r1, d8
 8009ece:	2200      	movs	r2, #0
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f7f6 fe23 	bl	8000b1c <__aeabi_dcmplt>
 8009ed6:	3800      	subs	r0, #0
 8009ed8:	bf18      	it	ne
 8009eda:	2001      	movne	r0, #1
 8009edc:	e448      	b.n	8009770 <__ieee754_pow+0x240>
 8009ede:	4622      	mov	r2, r4
 8009ee0:	462b      	mov	r3, r5
 8009ee2:	f7f6 f9f1 	bl	80002c8 <__aeabi_dsub>
 8009ee6:	4642      	mov	r2, r8
 8009ee8:	464b      	mov	r3, r9
 8009eea:	f7f6 fe2b 	bl	8000b44 <__aeabi_dcmpge>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	f43f aef4 	beq.w	8009cdc <__ieee754_pow+0x7ac>
 8009ef4:	e7e9      	b.n	8009eca <__ieee754_pow+0x99a>
 8009ef6:	f04f 0a00 	mov.w	sl, #0
 8009efa:	e71a      	b.n	8009d32 <__ieee754_pow+0x802>
 8009efc:	ec51 0b10 	vmov	r0, r1, d0
 8009f00:	4619      	mov	r1, r3
 8009f02:	e7d4      	b.n	8009eae <__ieee754_pow+0x97e>
 8009f04:	491a      	ldr	r1, [pc, #104]	; (8009f70 <__ieee754_pow+0xa40>)
 8009f06:	2000      	movs	r0, #0
 8009f08:	f7ff bb31 	b.w	800956e <__ieee754_pow+0x3e>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	2100      	movs	r1, #0
 8009f10:	f7ff bb2d 	b.w	800956e <__ieee754_pow+0x3e>
 8009f14:	4630      	mov	r0, r6
 8009f16:	4639      	mov	r1, r7
 8009f18:	f7ff bb29 	b.w	800956e <__ieee754_pow+0x3e>
 8009f1c:	9204      	str	r2, [sp, #16]
 8009f1e:	f7ff bb7b 	b.w	8009618 <__ieee754_pow+0xe8>
 8009f22:	2300      	movs	r3, #0
 8009f24:	f7ff bb65 	b.w	80095f2 <__ieee754_pow+0xc2>
 8009f28:	00000000 	.word	0x00000000
 8009f2c:	3fe62e43 	.word	0x3fe62e43
 8009f30:	fefa39ef 	.word	0xfefa39ef
 8009f34:	3fe62e42 	.word	0x3fe62e42
 8009f38:	0ca86c39 	.word	0x0ca86c39
 8009f3c:	be205c61 	.word	0xbe205c61
 8009f40:	72bea4d0 	.word	0x72bea4d0
 8009f44:	3e663769 	.word	0x3e663769
 8009f48:	c5d26bf1 	.word	0xc5d26bf1
 8009f4c:	3ebbbd41 	.word	0x3ebbbd41
 8009f50:	af25de2c 	.word	0xaf25de2c
 8009f54:	3f11566a 	.word	0x3f11566a
 8009f58:	16bebd93 	.word	0x16bebd93
 8009f5c:	3f66c16c 	.word	0x3f66c16c
 8009f60:	5555553e 	.word	0x5555553e
 8009f64:	3fc55555 	.word	0x3fc55555
 8009f68:	3fe00000 	.word	0x3fe00000
 8009f6c:	fff00000 	.word	0xfff00000
 8009f70:	3ff00000 	.word	0x3ff00000
 8009f74:	4090cbff 	.word	0x4090cbff
 8009f78:	3f6f3400 	.word	0x3f6f3400
 8009f7c:	652b82fe 	.word	0x652b82fe
 8009f80:	3c971547 	.word	0x3c971547

08009f84 <fabs>:
 8009f84:	ec51 0b10 	vmov	r0, r1, d0
 8009f88:	ee10 2a10 	vmov	r2, s0
 8009f8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f90:	ec43 2b10 	vmov	d0, r2, r3
 8009f94:	4770      	bx	lr
	...

08009f98 <scalbn>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	ec55 4b10 	vmov	r4, r5, d0
 8009f9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	b999      	cbnz	r1, 8009fd0 <scalbn+0x38>
 8009fa8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009fac:	4323      	orrs	r3, r4
 8009fae:	d03f      	beq.n	800a030 <scalbn+0x98>
 8009fb0:	4b35      	ldr	r3, [pc, #212]	; (800a088 <scalbn+0xf0>)
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	ee10 0a10 	vmov	r0, s0
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f7f6 fb3d 	bl	8000638 <__aeabi_dmul>
 8009fbe:	4b33      	ldr	r3, [pc, #204]	; (800a08c <scalbn+0xf4>)
 8009fc0:	429e      	cmp	r6, r3
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	460d      	mov	r5, r1
 8009fc6:	da10      	bge.n	8009fea <scalbn+0x52>
 8009fc8:	a327      	add	r3, pc, #156	; (adr r3, 800a068 <scalbn+0xd0>)
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	e01f      	b.n	800a010 <scalbn+0x78>
 8009fd0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009fd4:	4291      	cmp	r1, r2
 8009fd6:	d10c      	bne.n	8009ff2 <scalbn+0x5a>
 8009fd8:	ee10 2a10 	vmov	r2, s0
 8009fdc:	4620      	mov	r0, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f7f6 f974 	bl	80002cc <__adddf3>
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	460d      	mov	r5, r1
 8009fe8:	e022      	b.n	800a030 <scalbn+0x98>
 8009fea:	460b      	mov	r3, r1
 8009fec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009ff0:	3936      	subs	r1, #54	; 0x36
 8009ff2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009ff6:	4296      	cmp	r6, r2
 8009ff8:	dd0d      	ble.n	800a016 <scalbn+0x7e>
 8009ffa:	2d00      	cmp	r5, #0
 8009ffc:	a11c      	add	r1, pc, #112	; (adr r1, 800a070 <scalbn+0xd8>)
 8009ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a002:	da02      	bge.n	800a00a <scalbn+0x72>
 800a004:	a11c      	add	r1, pc, #112	; (adr r1, 800a078 <scalbn+0xe0>)
 800a006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a00a:	a319      	add	r3, pc, #100	; (adr r3, 800a070 <scalbn+0xd8>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f7f6 fb12 	bl	8000638 <__aeabi_dmul>
 800a014:	e7e6      	b.n	8009fe4 <scalbn+0x4c>
 800a016:	1872      	adds	r2, r6, r1
 800a018:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a01c:	428a      	cmp	r2, r1
 800a01e:	dcec      	bgt.n	8009ffa <scalbn+0x62>
 800a020:	2a00      	cmp	r2, #0
 800a022:	dd08      	ble.n	800a036 <scalbn+0x9e>
 800a024:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a028:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a02c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a030:	ec45 4b10 	vmov	d0, r4, r5
 800a034:	bd70      	pop	{r4, r5, r6, pc}
 800a036:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a03a:	da08      	bge.n	800a04e <scalbn+0xb6>
 800a03c:	2d00      	cmp	r5, #0
 800a03e:	a10a      	add	r1, pc, #40	; (adr r1, 800a068 <scalbn+0xd0>)
 800a040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a044:	dac0      	bge.n	8009fc8 <scalbn+0x30>
 800a046:	a10e      	add	r1, pc, #56	; (adr r1, 800a080 <scalbn+0xe8>)
 800a048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a04c:	e7bc      	b.n	8009fc8 <scalbn+0x30>
 800a04e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a052:	3236      	adds	r2, #54	; 0x36
 800a054:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a058:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a05c:	4620      	mov	r0, r4
 800a05e:	4b0c      	ldr	r3, [pc, #48]	; (800a090 <scalbn+0xf8>)
 800a060:	2200      	movs	r2, #0
 800a062:	e7d5      	b.n	800a010 <scalbn+0x78>
 800a064:	f3af 8000 	nop.w
 800a068:	c2f8f359 	.word	0xc2f8f359
 800a06c:	01a56e1f 	.word	0x01a56e1f
 800a070:	8800759c 	.word	0x8800759c
 800a074:	7e37e43c 	.word	0x7e37e43c
 800a078:	8800759c 	.word	0x8800759c
 800a07c:	fe37e43c 	.word	0xfe37e43c
 800a080:	c2f8f359 	.word	0xc2f8f359
 800a084:	81a56e1f 	.word	0x81a56e1f
 800a088:	43500000 	.word	0x43500000
 800a08c:	ffff3cb0 	.word	0xffff3cb0
 800a090:	3c900000 	.word	0x3c900000

0800a094 <with_errno>:
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	4604      	mov	r4, r0
 800a098:	460d      	mov	r5, r1
 800a09a:	4616      	mov	r6, r2
 800a09c:	f7fb fbe6 	bl	800586c <__errno>
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	6006      	str	r6, [r0, #0]
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}

0800a0a8 <xflow>:
 800a0a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0aa:	4614      	mov	r4, r2
 800a0ac:	461d      	mov	r5, r3
 800a0ae:	b108      	cbz	r0, 800a0b4 <xflow+0xc>
 800a0b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a0b4:	e9cd 2300 	strd	r2, r3, [sp]
 800a0b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0bc:	4620      	mov	r0, r4
 800a0be:	4629      	mov	r1, r5
 800a0c0:	f7f6 faba 	bl	8000638 <__aeabi_dmul>
 800a0c4:	2222      	movs	r2, #34	; 0x22
 800a0c6:	b003      	add	sp, #12
 800a0c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0cc:	f7ff bfe2 	b.w	800a094 <with_errno>

0800a0d0 <__math_uflow>:
 800a0d0:	b508      	push	{r3, lr}
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a0d8:	f7ff ffe6 	bl	800a0a8 <xflow>
 800a0dc:	ec41 0b10 	vmov	d0, r0, r1
 800a0e0:	bd08      	pop	{r3, pc}

0800a0e2 <__math_oflow>:
 800a0e2:	b508      	push	{r3, lr}
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a0ea:	f7ff ffdd 	bl	800a0a8 <xflow>
 800a0ee:	ec41 0b10 	vmov	d0, r0, r1
 800a0f2:	bd08      	pop	{r3, pc}

0800a0f4 <__ieee754_sqrt>:
 800a0f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f8:	ec55 4b10 	vmov	r4, r5, d0
 800a0fc:	4e67      	ldr	r6, [pc, #412]	; (800a29c <__ieee754_sqrt+0x1a8>)
 800a0fe:	43ae      	bics	r6, r5
 800a100:	ee10 0a10 	vmov	r0, s0
 800a104:	ee10 2a10 	vmov	r2, s0
 800a108:	4629      	mov	r1, r5
 800a10a:	462b      	mov	r3, r5
 800a10c:	d10d      	bne.n	800a12a <__ieee754_sqrt+0x36>
 800a10e:	f7f6 fa93 	bl	8000638 <__aeabi_dmul>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4620      	mov	r0, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	f7f6 f8d7 	bl	80002cc <__adddf3>
 800a11e:	4604      	mov	r4, r0
 800a120:	460d      	mov	r5, r1
 800a122:	ec45 4b10 	vmov	d0, r4, r5
 800a126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12a:	2d00      	cmp	r5, #0
 800a12c:	dc0b      	bgt.n	800a146 <__ieee754_sqrt+0x52>
 800a12e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a132:	4326      	orrs	r6, r4
 800a134:	d0f5      	beq.n	800a122 <__ieee754_sqrt+0x2e>
 800a136:	b135      	cbz	r5, 800a146 <__ieee754_sqrt+0x52>
 800a138:	f7f6 f8c6 	bl	80002c8 <__aeabi_dsub>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	f7f6 fba4 	bl	800088c <__aeabi_ddiv>
 800a144:	e7eb      	b.n	800a11e <__ieee754_sqrt+0x2a>
 800a146:	1509      	asrs	r1, r1, #20
 800a148:	f000 808d 	beq.w	800a266 <__ieee754_sqrt+0x172>
 800a14c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a150:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a158:	07c9      	lsls	r1, r1, #31
 800a15a:	bf5c      	itt	pl
 800a15c:	005b      	lslpl	r3, r3, #1
 800a15e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a162:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a166:	bf58      	it	pl
 800a168:	0052      	lslpl	r2, r2, #1
 800a16a:	2500      	movs	r5, #0
 800a16c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a170:	1076      	asrs	r6, r6, #1
 800a172:	0052      	lsls	r2, r2, #1
 800a174:	f04f 0e16 	mov.w	lr, #22
 800a178:	46ac      	mov	ip, r5
 800a17a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a17e:	eb0c 0001 	add.w	r0, ip, r1
 800a182:	4298      	cmp	r0, r3
 800a184:	bfde      	ittt	le
 800a186:	1a1b      	suble	r3, r3, r0
 800a188:	eb00 0c01 	addle.w	ip, r0, r1
 800a18c:	186d      	addle	r5, r5, r1
 800a18e:	005b      	lsls	r3, r3, #1
 800a190:	f1be 0e01 	subs.w	lr, lr, #1
 800a194:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a198:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a19c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a1a0:	d1ed      	bne.n	800a17e <__ieee754_sqrt+0x8a>
 800a1a2:	4674      	mov	r4, lr
 800a1a4:	2720      	movs	r7, #32
 800a1a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a1aa:	4563      	cmp	r3, ip
 800a1ac:	eb01 000e 	add.w	r0, r1, lr
 800a1b0:	dc02      	bgt.n	800a1b8 <__ieee754_sqrt+0xc4>
 800a1b2:	d113      	bne.n	800a1dc <__ieee754_sqrt+0xe8>
 800a1b4:	4290      	cmp	r0, r2
 800a1b6:	d811      	bhi.n	800a1dc <__ieee754_sqrt+0xe8>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	eb00 0e01 	add.w	lr, r0, r1
 800a1be:	da57      	bge.n	800a270 <__ieee754_sqrt+0x17c>
 800a1c0:	f1be 0f00 	cmp.w	lr, #0
 800a1c4:	db54      	blt.n	800a270 <__ieee754_sqrt+0x17c>
 800a1c6:	f10c 0801 	add.w	r8, ip, #1
 800a1ca:	eba3 030c 	sub.w	r3, r3, ip
 800a1ce:	4290      	cmp	r0, r2
 800a1d0:	bf88      	it	hi
 800a1d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a1d6:	1a12      	subs	r2, r2, r0
 800a1d8:	440c      	add	r4, r1
 800a1da:	46c4      	mov	ip, r8
 800a1dc:	005b      	lsls	r3, r3, #1
 800a1de:	3f01      	subs	r7, #1
 800a1e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a1e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a1e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a1ec:	d1dd      	bne.n	800a1aa <__ieee754_sqrt+0xb6>
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	d01b      	beq.n	800a22a <__ieee754_sqrt+0x136>
 800a1f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a2a0 <__ieee754_sqrt+0x1ac>
 800a1f6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a2a4 <__ieee754_sqrt+0x1b0>
 800a1fa:	e9da 0100 	ldrd	r0, r1, [sl]
 800a1fe:	e9db 2300 	ldrd	r2, r3, [fp]
 800a202:	f7f6 f861 	bl	80002c8 <__aeabi_dsub>
 800a206:	e9da 8900 	ldrd	r8, r9, [sl]
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4640      	mov	r0, r8
 800a210:	4649      	mov	r1, r9
 800a212:	f7f6 fc8d 	bl	8000b30 <__aeabi_dcmple>
 800a216:	b140      	cbz	r0, 800a22a <__ieee754_sqrt+0x136>
 800a218:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a21c:	e9da 0100 	ldrd	r0, r1, [sl]
 800a220:	e9db 2300 	ldrd	r2, r3, [fp]
 800a224:	d126      	bne.n	800a274 <__ieee754_sqrt+0x180>
 800a226:	3501      	adds	r5, #1
 800a228:	463c      	mov	r4, r7
 800a22a:	106a      	asrs	r2, r5, #1
 800a22c:	0863      	lsrs	r3, r4, #1
 800a22e:	07e9      	lsls	r1, r5, #31
 800a230:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a234:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a238:	bf48      	it	mi
 800a23a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a23e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a242:	461c      	mov	r4, r3
 800a244:	e76d      	b.n	800a122 <__ieee754_sqrt+0x2e>
 800a246:	0ad3      	lsrs	r3, r2, #11
 800a248:	3815      	subs	r0, #21
 800a24a:	0552      	lsls	r2, r2, #21
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d0fa      	beq.n	800a246 <__ieee754_sqrt+0x152>
 800a250:	02dc      	lsls	r4, r3, #11
 800a252:	d50a      	bpl.n	800a26a <__ieee754_sqrt+0x176>
 800a254:	f1c1 0420 	rsb	r4, r1, #32
 800a258:	fa22 f404 	lsr.w	r4, r2, r4
 800a25c:	1e4d      	subs	r5, r1, #1
 800a25e:	408a      	lsls	r2, r1
 800a260:	4323      	orrs	r3, r4
 800a262:	1b41      	subs	r1, r0, r5
 800a264:	e772      	b.n	800a14c <__ieee754_sqrt+0x58>
 800a266:	4608      	mov	r0, r1
 800a268:	e7f0      	b.n	800a24c <__ieee754_sqrt+0x158>
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	3101      	adds	r1, #1
 800a26e:	e7ef      	b.n	800a250 <__ieee754_sqrt+0x15c>
 800a270:	46e0      	mov	r8, ip
 800a272:	e7aa      	b.n	800a1ca <__ieee754_sqrt+0xd6>
 800a274:	f7f6 f82a 	bl	80002cc <__adddf3>
 800a278:	e9da 8900 	ldrd	r8, r9, [sl]
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4640      	mov	r0, r8
 800a282:	4649      	mov	r1, r9
 800a284:	f7f6 fc4a 	bl	8000b1c <__aeabi_dcmplt>
 800a288:	b120      	cbz	r0, 800a294 <__ieee754_sqrt+0x1a0>
 800a28a:	1ca0      	adds	r0, r4, #2
 800a28c:	bf08      	it	eq
 800a28e:	3501      	addeq	r5, #1
 800a290:	3402      	adds	r4, #2
 800a292:	e7ca      	b.n	800a22a <__ieee754_sqrt+0x136>
 800a294:	3401      	adds	r4, #1
 800a296:	f024 0401 	bic.w	r4, r4, #1
 800a29a:	e7c6      	b.n	800a22a <__ieee754_sqrt+0x136>
 800a29c:	7ff00000 	.word	0x7ff00000
 800a2a0:	200001d8 	.word	0x200001d8
 800a2a4:	200001e0 	.word	0x200001e0

0800a2a8 <_init>:
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	bf00      	nop
 800a2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ae:	bc08      	pop	{r3}
 800a2b0:	469e      	mov	lr, r3
 800a2b2:	4770      	bx	lr

0800a2b4 <_fini>:
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b6:	bf00      	nop
 800a2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ba:	bc08      	pop	{r3}
 800a2bc:	469e      	mov	lr, r3
 800a2be:	4770      	bx	lr
